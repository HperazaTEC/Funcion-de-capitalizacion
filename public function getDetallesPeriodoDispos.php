<?php
require_once dirname ( __FILE__ ).'/../vendor/autoload.php';
use Carbon\Carbon as Carbon;
include(getcwd() . "/../../protected/ClaseConexion.php");
$log_path = Yii::app()->basePath."/logs/BuroCredito/";


/**
 * This is the model class for table "solicitudes".
 *
 * The followings are the available columns in table 'solicitudes':
 * @property integer $id
 * @property string $clave
 * @property string $contrato
 * @property string $numero_cuenta
 * @property string $referencia_oxxo
 * @property string $referencia_pagos
 * @property string $referencia_pagos2
 * @property string $poliza
 * @property string $lugar_firma
 * @property string $fecha_aceptacion
 * @property integer $id_usuario
 * @property string $usuario
 * @property string $nombre_usuario
 * @property string $fecha_solicitud
 * @property string $fecha_disposicion
 * @property string $fecha_vencimiento
 * @property integer $gracia_capital
 * @property integer $gracia_interes
 * @property integer $condonacion_interes
 * @property integer $id_producto
 * @property integer $id_moneda
 * @property integer $tipo_cobro
 * @property integer $id_banco
 * @property integer $id_deudor
 * @property integer $id_banco_cliente
 * @property string $clave_producto
 * @property string $nombre_producto
 * @property string $monto_solicitado
 * @property string $monto_autorizado
 * @property string $entregable
 * @property string $aforo
 * @property integer $plazo_solicitado
 * @property integer $plazo_autorizado
 * @property integer $frecuencia
 * @property integer $id_tasa_referencia
 * @property string $nombre_tasa_referencia
 * @property string $serie_tasa_referencia
 * @property integer $id_tipo_amortizacion
 * @property string $nombre_tipo_amortizacion
 * @property integer $id_tipo_pago
 * @property string $nombre_tipo_pago
 * @property string $sobretasa
 * @property string $descuento_interes
 * @property string $tasa_moratoria
 * @property integer $id_impuesto
 * @property string $nombre_impuesto
 * @property string $porcentaje_impuesto
 * @property integer $id_impuesto_moratorios
 * @property string $nombre_impuesto_moratorios
 * @property decimal $porcentaje_impuesto_moratorios
 * @property integer $aplicacion_moratorios
 * @property integer $id_parametrico
 * @property string $tipo_garantia
 * @property string $clase_garantia
 * @property string $valor_garantia
 * @property string $descripcion_garantia
 * @property integer $id_cliente
 * @property string $clave_cliente
 * @property string $nombre_cliente
 * @property integer $id_grupo_cliente
 * @property string $ingreso_cliente
 * @property string $califiacion_calculada
 * @property string $calificacion_asignada
 * @property string $riesgo_buro
 * @property integer $id_usuario_aceptacion
 * @property string $usuario_aceptacion
 * @property string $nombre_usuario_aceptacion
 * @property string $justificacion_aceptacion
 * @property string $status_calculado
 * @property string $status_asignado
 * @property string $sesion_comite
 * @property integer $id_sucursal
 * @property string $nombre_sucursal
 * @property integer $id_empresa
 * @property string $nombre_empresa
 * @property integer $id_fondeadora
 * @property integer $id_aportes_fondeadores
 * @property integer $tabla_personalizada
 * @property integer $id_grupo_solicitud
 * @property string $valor_equipo
 * @property string $iva_equipo
 * @property string $valor_sin_iva
 * @property string $valor_residual_porcentaje
 * @property string $valor_residual_monto
 * @property string $deposito_meses
 * @property string $deposito_con_iva
 * @property string $deposito_adicional
 * @property string $deposito_monto
 * @property string $anticipo_rentas
 * @property string $ratificacion
 * @property string $ratificacion_total
 * @property string $comision_apertura_porcentaje
 * @property string $comision_apertura_monto
 * @property string $gastos_iniciales
 * @property string $gastos_iniciales_porcentaje
 * @property string $comisiones_iniciales
 * @property string $comisiones_iniciales_porcentaje
 * @property string $garantia_extendida
 * @property string $seguro
 * @property string $accesorios
 * @property string $enganche
 * @property string $gastos_rentas
 * @property string $tenencia
 * @property string $otros_gastos
 * @property string $otros_gastos_porcentaje
 * @property string $financiamiento_gastos_iniciales
 * @property string $financiamiento_comisiones_iniciales
 * @property string $financiamiento_garantia_extendida
 * @property string $financiamiento_seguro
 * @property string $financiamiento_accesorios
 * @property string $financiamiento_tenencia
 * @property string $financiamiento_otros_gastos
 * @property string $anual_gastos_iniciales
 * @property string $anual_comisiones_iniciales
 * @property string $anual_garantia_extendida
 * @property string $anual_seguro
 * @property string $anual_accesorios
 * @property string $anual_tenencia
 * @property string $anual_otros_gastos
 * @property decimal $udi
 * @property decimal $valor_mercado
 * @property string $reporte_circulo_credito
 * @property integer $id_status
 * @property integer $individual
 * @property integer $tabla_disposiciones
 * @property integer $ajuste_primera_amortizacion
 * @property integer $ajuste_primera_amortizacion2
 * @property integer $ajuste_ultima_amortizacion
 * @property integer $id_cotizador
 * @property integer $id_linea
 * @property integer $renta_interina
 * @property integer $tipo_reestructura
 * @property integer $fecha_quebranto
 * @property integer $inPagosFondeador
 * @property integer $bandera_alarma_vencimiento
 * @property string $base_comisiones_iniciales
 * @property string $base_otros_gastos
 * @property string $status_stp
 * @property string $errorstp
 * @property string $foliointernostp
 * @property integer $transferido
 * @property integer $seleccionado
 * @property integer $intereses_visibles
 * @property string $referenciaclubpago
 * @property string $clabeclubpago
 * @property string $cuota_predefinida
 * @property string $codigoafiliacion
 * @property string $codigodelegacionafiliacion
 * @property string $modulodelegacion
 * @property string $codigocampania
 * @property integer $tipodisposicion
 * @property string $producto_financiero
 * @property string $codigo_vendedor_fimubac
 * @property string $sucursal_fimubac
 * @property integer $interes_diario_ultima_letra
 * @property integer $interes_calculado_saldo_insoluto
 * @property integer $dadoaltaSTP
 * @property string $cuentastp
 * @property integer $tipo_adelanto_capital
 * @property integer $promedio_interes
 * @property integer $bandera_residual_manual
 * @property decimal $monto_residual_valor_actual
 * @property string $claverastreo
 * @property string $diadepago
 * @property string $proceso
 * @property integer $ajuste_capital
 * @property integer $id_commodities
 * @property float $descuento_cantidad
 * @property float $monto_movimiento
 * @property integer $id_estatus_pago
 * @property integer $arrendamiento_dias
 * @property integer $dias_interes
 * @property decimal $tir
 * @property decimal $id_tipo_cartera
 * @property string $porcentaje_capital
 * @property string $porcentaje_interes
 * @property string $tipo_moratorios
 * @property integer $id_clave_observacion
 * @property string $status_pre
 * @property string $folio_pre
 * @property string $json_descuentos_pago_puntual
 * @property string $fechaPrimerIncumplimiento
 * @property decimal $monto_preautorizado
 * @property string $nombre_banco
 * @property integer $pagado_con_deposito
 * @property integer $id_etapa_credito
 * @property integer $aplica_iva_comision;
 * @property string $refutacion;
 * @property string $fecha_ultima_refutacion;
 * @property integer $etapa_automatica;
 * @property integer $tipo_valor_anticipo;
 * @property decimal $severidad_cub;
 * @property decimal $decimales;
 * @property string $anticipoBase;
 * @property integer $ajuste_decimales;
 * @property string $fecha_vencimiento_linea_credito;
 */
class Solicitudes extends CActiveRecord {

	//Permiso para editar cotizador
	public $permisoCotizador;
	//Aux
	public $udiAux;
	public $valorMercadoAux;
	public $factorRentaAux;
	public $rentaAux;
	public $ivaSeguroAux;
	public $seguroSinIvaAux;
	public $anticipoRentasAux;
	public $totalConIvaAux;
	public $totalSinIvaAux;
	public $pagoInicialAux;
	public $condonacion_interes;
	public $comisionInicialBase;//Sobre Capital o Sobre Financiado
	public $gastoInicialBase;//Sobre Capital o Sobre Financiado
	//
	private $_fechaInicio;
	private $_fechaFin;
    public $expedientes;
	//
	public $auto_relleno_interes;
	public $fecha_inicio_amortizaciones;//Para la creación de la tabla de amortizacion, no se guarda ni sirve para otra cosa
	public $fecha_fin_amortizaciones;//Para la creación de la tabla de amortizacion, no se guarda ni sirve para otra cosa
	public $ajuste;//Cuando se hacen pagos extraordinarios se especifica si se ajusta el plazo o se ajustan los montos
	public $modo;//Como se muestra la tabla
	//Fecha Corte circulo de crédito
	public $fechaCorte;
	public $id_aportes_fondeadores;
    public $promedio_interes;
	//
	public $_montoComisionesFinanciadas;
	public $_ivaComisionesFinanciadas;
	////Reporte de circulo de credito
	private $_claveOtorgante;
	private $_nombreOtorgante;
	private $_identificadorDeMedio;
	private $_fechaExtraccion;
	private $_notaOtorgante;
	private $_version;
	private $_razonSocial;
	private $_apellidoPaterno;
	private $_apellidoMaterno;
	private $_apellidoAdicional;
	private $_nombres;
	private $_fechaNacimiento;
	private $_rfc;
	private $_curp;
	private $_numeroSeguridadSocial;
	private $_nacionalidad;
	private $_residencia;
	private $_numeroLicenciaConducir;
	private $_estadoCivil;
	private $_sexo;
	private $_claveElectorIfe;
	private $_numeroDependientes;
	private $_fechaDefuncion;
	private $_indicadorDefuncion;
	private $_tipoPersona;
	private $_direccion;
	private $_coloniaPoblacion;
	private $_delegacionMunicipio;
	private $_ciudad;
	private $_estado;
	private $_pais;
	private $_codigoPostal;
	private $_fechaResidencia;
	private $_telefono;
	private $_tipoDomicilio;
	private $_tipoAsentamiento;
	private $_empresa;
	private $_direccionEmpresa;
	private $_coloniaPoblacionEmpresa;
	private $_delegacionMunicipioEmpresa;
	private $_ciudadEmpresa;
	private $_estadoEmpresa;
	private $_codigoPostalEmpresa;
	private $_telefonoEmpresa;
	private $_extensionEmpresa;
	private $_faxEmpresa;
	private $_puestoEmpresa;
	private $_fechaContratacionEmpresa;
	private $_monedaSalario;
	private $_salarioMensual;
	private $_fechaUltimoDiaEmpleo;
	private $_fechaVerificacionEmpleo;
	private $_claveActualOtorgante;
	private $_nombreActualOtorgante;
	private $_numeroCuenta;
	private $_tipoResponsabilidadCuenta;
	private $_tipoCuenta;
	private $_tipoCuentaCirculo;
	private $_tipoContrato;
	private $_moneda;
	private $_valorActivoValuacion;
	private $_numeroPagos;
	private $_frecuenciaPagos;
	private $_frecuenciaPagosDias;
	private $_montoPagar;
	private $_fechaApertura;
	private $_fechaUltimoPago;
	private $_fechaUltimoPagoInv;
	private $_fechaUltimaCompra;
	private $_fechaCierreCredito;
	private $_fechaCorte;
	private $_garantia;
	private $_creditoMaximo;
	private $_saldoActual;
	private $_limiteCredito;
	private $_saldoVencido;
	private $_numeroPagosVencidos;
	private $_pagoActual;
	private $_historicoPagos;
	private $_clavePrevencion;
	private $_totalPagosReportados;
	private $_claveAnteriorOtorgante;
	private $_NombreAnteriorOtorgante;
	private $_numeroCuentaAnterior;
	private $_fechaPrimerIncumplimiento;
	private $_fechaPrimerIncumplimientoV;
	private $_diasVencidos;
	private $_saldoInsoluto;
	private $_montoUltimoPago;
	private $_plazoMeses;
	private $_montoCreditoOriginacion;
	private $_totalSaldosActuales;
	private $_totalSaldosVencidos;
	private $_totalElementosNombreReportados;
	private $_totalElementosDireccionReportados;
	private $_totalElementosEmpleoReportados;
	private $_totalElementosCuentasReportados;
	private $_domicilioDevolucion;
	private $_numero_amortizacion_pago;
	private $_pago_exigible;
	private $_ultimaAmortizacionStatus;
	private $calcularCapitalizacion;
	//Filtros
	public $claveCliente;
	public $clave_cliente;
	public $idCliente;
	public $idGrupo;
	public $claveGrupoCliente;
	public $idGrupoSolidario;
	public $section;
	public $origen;
	public $_montoDispuesto;
	public $_montoDispersion;
	public $_fechaDispersion;
	private $_notasSolicitud;
	public $idEjecutivo;

	//Importacion de Pagos
	public $archivoPagos;

	///Calificar
	public $numeroCalificacion;
	public $tipoCalificacion;
	public $tipoSolicitud;
	///Cotizador
	public $user;
	public $password;
	public $calculoTasaVariable;
	public $editar_iva;//
	public $monto_s; //para el tema de saber cuanto se solicito
	public $monto_f; //para el tema de saber cuanto se solicito
	//Forzar Ajuste
	public $forzarAjuste;
	//Columnas
	public $_integrantes;//Grupales
	//Calculo Fecha Fin
	public $plazoDias;
	public $bandera_alarma_vencimiento;
	//
	public $incrementosIntereses;
	public $usuarioEtapa;
	public $estatussolicitudes;
	//
	public $aporteFondeo;//Si tiene valor la solicitud es una solicitud generada desde el modulo de fondeadores, es decir, es temporal.
	//
	private $_autorizador;
	private $_columnas;

	//Consultas buro de credito
	public $id_cliente_consulta_pf;
	public $id_cliente_consulta_pm;

	//Fisica
	public $numero_referencia_operador;
	public $producto_requerido;
	public $identificador_buro;
	public $tipo_consulta;
	public $tipo_contrato;
	public $usuario_buro;
	public $password_buro;

	//Moral
	public $tipo_reporte_buro;
	public $score_code;
	public $interpretador_buro;
	public $variables_cnbv;
	public $consulta_por_folio;
	public $generar_consolidado;
	public $firma_autografa;
	public $inPagosFondeador;

	public $base_comisiones_iniciales;
    public $base_otros_gastos;
	//variables adicionales
	public $variables_adicionales;
	public $activar_cuota;

	public $validarConsulta;//sirve para el formulario de consulta de buro personapm

    protected $errArrBCc = array();
	public $activar_factura;
	public $sobretasa2;
	public $borradoSession;
	public $_decimales;
	public $controlCheckReestructura;
	public $total_pagar;
	public $id_segmentacion_cub;
	public $nombre_segmentacion;
	public $refutacion;
	public $fecha_ultima_refutacion;
	public $id_etapa_credito;
	public $buroApiVersion = 'v1';

	/**
	 *
	 * @return string the associated database table name
	 */
	public function tableName() {
		return 'solicitudes';
	}

	/**
	 *
	 * @return array validation rules for model attributes.
	 */
	public function rules() {
		// NOTE: you should only define rules for those attributes that
		// will receive user inputs.
		return array (
			array (
					'clave, ciclo, id_usuario, usuario, nombre_usuario, id_producto, clave_producto, nombre_producto, plazo_solicitado, id_tasa_referencia, nombre_tasa_referencia, id_tipo_amortizacion, nombre_tipo_amortizacion, id_tipo_pago, nombre_tipo_pago, sobretasa, descuento_interes, tasa_moratoria, id_impuesto, nombre_impuesto, porcentaje_impuesto, id_impuesto_moratorios, nombre_impuesto_moratorios, porcentaje_impuesto_moratorios, id_parametrico,fecha_solicitud,id_status',
					'required'
			),
			array(
					'justificacion_aceptacion, calificacion_asignada, status_asignado, fecha_vencimiento',
					'required',
					'on'=>"calificar"
			),
			array (
					'clave, contrato',
					'unique'
			),
			array (
					'interes_calculado_saldo_insoluto,interes_diario_ultima_letra,tipodisposicion,id_grupo_cliente, id_status, individual,ajuste_primera_amortizacion2, ajuste_primera_amortizacion, ajuste_ultima_amortizacion, id_cotizador, id_linea, id_banco, id_deudor, id_banco_cliente, id_activo_arrendamiento,ciclo, aplicacion_moratorios, gracia_capital, gracia_interes, condonacion_interes,bandera_alarma_vencimiento,promedio_interes,ajuste_capital,arrendamiento_dias,dias_interes,id_tipo_cartera,id_clave_observacion',
					'numerical',
					'integerOnly' => true
			),
			array (
					'clave, contrato, referencia_oxxo, referencia_pagos, referencia_pagos2',
					'length',
					'max' => 30
			),
			array (
					'numero_cuenta,numero_firma',
					'length',
					'max' => 25
			),
            array (
                'porcentaje_capital,porcentaje_interes',
                'numerical',
                'max' => 100,
                'min' => 0
            ),
			array (
					'password_buro',
					'length',
					'max' => 8,
					'min' => 8
			),
			array (
					'numero_referencia_operador',
					'length',
					'max' => 25,
					'min' => 25
			),

		 

			array(
					'diadepago,fecha_solicitud, open_banking, fecha_aceptacion, fecha_vencimiento, id_grupo_solicitud,modo,fecha_disposicion_tentativa,consultar_meses,fecha_fin_amortizaciones,activar_factura,pagado_con_deposito, aplica_iva_comision,id_etapa_credito',
					'safe'
			),
		
			

			array (
				'codigoafiliacion,codigodelegacionafiliacion,modulodelegacion,codigocampania',
				'length',
				'max' => 20
			),

			array (
				'clabeclubpago',
				'length',
				'max' => 20
		),
			array (
					'serie_tasa_referencia',
					'length',
					'max' => 15
			),

			array (
				'producto_financiero',
				'length',
				'max' => 4
		),

		array (
			'codigo_vendedor_fimubac,sucursal_fimubac',
			'length',
			'max' => 8
	),

			array (
					'ciclo',
					'length',
					'max' => 2,
					'min' => 2
			),
			array (
					'cuentastp,poliza, clave_producto, clave_cliente, tabla_disposiciones',
					'length',
					'max' => 20
			),
			array(
					'usuario, nombre_producto, tipo_moratorios, nombre_impuesto, nombre_impuesto_moratorios, usuario_aceptacion, status_calculado, status_asignado, sesion_comite, etapa, calificacion_asignada,facilito_objeto,facilito_codeudor,facilito_metodo',
					'length',
					'max'=>50
			),
			array(
					'nombre_tasa_referencia, nombre_tipo_amortizacion, tipo_garantia, clase_garantia',
					'length',
					'max'=>100
			),
			array(
					'nombre_usuario, nombre_usuario_aceptacion',
					'length',
					'max'=>150
			),
			array (
					'lugar_aceptacion, nombre_cliente, descripcion_garantia, justificacion_aceptacion, nombre_sucursal, nombre_empresa',
					'length',
					'max' => 250
			),
			array(
					'monto_residual_valor_actual,monto_solicitado, monto_autorizado, entregable, montoDispuesto, aforo, sobretasa, descuento_interes, tasa_moratoria, porcentaje_impuesto, porcentaje_impuesto_moratorios, valor_garantia, ingreso_cliente, calificacion_calculada, cat,facilito_porcentaje_manejo, cuota_predefinida,tir',
					'type',
					'type'=>'float'
			),
			array(
					'dadoaltaSTP,tabla_personalizada, deposito_con_iva, comisionApertura_con_iva',
					'numerical',
					'integerOnly'=>true,
					'max'=>1
			),
			//Los siguientes son para el producto de ARRENDAMIENTO PURO
			array(
					'anticipoBase, valor_equipo, iva_equipo, valor_sin_iva, valor_residual_porcentaje, valor_residual_monto, deposito_meses, deposito_monto, deposito_adicional, anticipo_rentas, ratificacion, ratificacion_total, comision_apertura_porcentaje, comision_apertura_monto, seguro, accesorios, enganche, gastos_rentas, tenencia, gastos_iniciales,comisiones_iniciales, garantia_extendida, otros_gastos, udi, valor_mercado, comisiones_iniciales_porcentaje, gastos_iniciales_porcentaje, otros_gastos_porcentaje, calculo_capital, deposito_porcentaje,nombre_banco',
					'safe',
			),
			array(
					'id_cliente',
					'validaCliente',
			),
			array(
					'status_asignado',
					'validaStatus',
			),
			array(
					'fecha_disposicion',
					'validaFechaDisposicion',
			),
			array(
					'monto_solicitado, monto_autorizado',
					'validaMonto',
			),
			array(
					'plazo_solicitado, plazo_autorizado',
					'validaPlazo',
			),
			array(
					'contrato',
					'validaContrato',
			),
			array(
					'plazo_solicitado, plazo_autorizado, frecuencia',
					'numerical',
					'integerOnly'=>true,
					'min'=>1
			), 

			array (
				'referenciaclubpago',
				'length',
				'max' => 100
			),

			array (
					'financiamiento_seguro, financiamiento_tenencia, financiamiento_garantia_extendida, financiamiento_gastos_iniciales, financiamiento_comisiones_iniciales, financiamiento_otros_gastos',
					'length',
					'max' => 15
			),
			array (
					'bandera_residual_manual,anual_seguro, anual_tenencia, anual_garantia_extendida, anual_gastos_iniciales, anual_comisiones_iniciales, anual_otros_gastos',
					'numerical',
					'integerOnly' => true
			),
			array(
					'id_fondeadora, id_aportes_fondeadores, id_moneda, tipo_valor_anticipo',
					'numerical',
					'integerOnly'=>true,
			),
			array (
					'reporte_circulo_credito',
					'length',
					'max' => 100000
			),
			array(
					'anticipoBase,comisionInicialBase, gastoInicialBase,id_commodities,descuento_cantidad, depositoBase,id_status,id_estatus_pago,fecha_vencimiento_linea_credito',
					'safe'
			),

			array(
					'factor,seguro_vida,seguro_bien,feci,comision,desembolso,puntos_seguro,prestamo_bruto,comision_manejo,monto_itbms,monto_feci,interes,seguro_no_financiado,mensualidad_aproximada,solicitado_monto,facilito_seguro',
					'type',
					'type'=>'float'
			),
		
			array (
				'claverastreo',
				'length',
				'max' => 100
			),
			array('id_cliente,claveCliente,clave_cliente,clave,montoDispuesto,id_etapa_credito,fecha_cambio_etapa,segmentacion,refutacion,fecha_ultima_refutacion', 'safe', 'on'=>'search'),

			// The following rule is used by search().
			// @todo Please remove those attributes that should not be searched.
			array (
					'diadepago,claverastreo,bandera_residual_manual,cuentastp,dadoaltaSTP,interes_calculado_saldo_insoluto,interes_diario_ultima_letra,sucursal_fimubac,codigo_vendedor_fimubac,producto_financiero,errorstp,seleccionado,transferido,status_stp,foliointernostp,clave, claveCliente, id_cliente, claveGrupoCliente, id_grupo_cliente, id_supervisor,idEjecutivo, fecha_solicitud, fecha_aceptacion, fecha_disposicion, nombre_producto, monto_solicitado, plazo_solicitado, id_fondeadora, id_aportes_fondeadores, status_calculado, integrantes,etapa, cartera_vencida, referencia_oxxo, referencia_pagos, referencia_pagos2,tipo_cobro, nombre_completo,id_sucursal, id_empresa, id_supervisor,riesgo_buro,sesion_comite,status_calculado,calificacion_asignada,calificacion_calculada,monto_solicitado,monto_autorizado,entregable,montoDispuesto,id_banco,autorizador,factor,seguro_vida,seguro_bien,feci,comision,desembolso, puntos_seguro,prestamo_bruto,comision_manejo,monto_itbms,monto_feci,interes,seguro_no_financiado,mensualidad_aproximada,solicitado_monto,bloquear_tasas,proceso,montoDispersion,fechaDispersion,id_status,id_estatus_pago,tir,monto_preautorizado,nombre_banco,pagado_con_deposito, id_etapa_credito,anticipoBase',
					'safe',
					'on' => 'search'
			)
		);
	}

	public function __construct($scenario='insert')
	{
		$clave=$this->dbConnection->createCommand("SELECT MAX(CAST(clave AS DECIMAL)) FROM clientes")->queryScalar();
		$clave++;
		$this->clave=str_pad($clave,9,"0",STR_PAD_LEFT);
		parent::__construct($scenario);
	}

	public function validaMonto($attr, $params){
		$monto=$this[$attr];
		$producto=Productos::model()->findByPk($this->id_producto);
		if(!is_null($producto)){
			$monto_maximo=$producto->monto_maximo;
		}else{
			$monto_maximo=0;
		}
		if(!isset($this->id_grupo_cliente) || $this->id_grupo_cliente==0){
			if($monto>$monto_maximo){
				$this->addError($attr, $this->getAttributeLabel($attr)." no puede ser mayor de ".number_format($monto_maximo,2,".",","));
			}else{
				if($attr=="monto_solicitado"){
					if($monto<=0){
						$this->addError($attr, $this->getAttributeLabel($attr)." debe ser mayor de 0.00");
					}
				}elseif($attr=="monto_autorizado"){
					if($this->status_asignado=="Aceptada"){
						if($monto<=0){
							$this->addError($attr, $this->getAttributeLabel($attr)." debe ser mayor de 0.00");
						}
					}
				}
			}
		}
	}
	public function validaPlazo($attr, $params){
		$plazo=$this[$attr];
		$producto=Productos::model()->findByPk($this->id_producto);
		if(!is_null($producto)){
			$plazo_maximo=(float)$producto->plazo_maximo;
		}else{
			$plazo_maximo=0;
		}
		if($plazo>$plazo_maximo){
			$this->addError($attr, $this->getAttributeLabel($attr)." no puede ser mayor a $plazo_maximo ".$this->getUnidadPlazo());
		}else{
			if($plazo<0){
				if($attr=="plazo_solicitado"){
					$this->addError($attr, $this->getAttributeLabel($attr)." debe ser mayor a 0 ".$this->getUnidadPlazo());
				}
			}
		}
	}
	public function validaContrato($attr, $params){
		$contrato=$this[$attr];
		if($this->status_asignado=="Aceptada"){
			if(!isset($contrato) || $contrato=="" || $contrato==false){
				$this->addError($attr, $this->getAttributeLabel($attr)." es obligatorio en la autorización");
			}
		}
	}

	public function validaCliente($attr, $params){
		$cliente=$this[$attr];
		$grupo=$this['id_grupo_cliente'];
		if(!isset($grupo) or $grupo=="" or $grupo==0){
			if(!isset($cliente) or $cliente=="" or $cliente==0){
				$this->addError($attr,"El Cliente o el Grupo Solidario no puede ser nulo");
			}
		}else{
			$this['id_cliente']=null;
		}
	}

	public function validaStatus($attr, $params){
		$status=$this[$attr];
		if($status=="Aceptada"){
			$grupo=$this['id_grupo_cliente'];
			if(!isset($grupo) || $grupo=="" || $grupo==0){
			    if(isset($this->id_cliente0)){
                    $etapa=$this->id_cliente0->getEtapaDocumentos(1, $this);//Autorización
                    //if($etapa==false && $this->importado!=1){
                    if($etapa==false){
                        $this->addError($attr, "El estatus no es permitido cuando no se ha entregado el expediente de autorización");
                    }
                }
			}
		}
	}

	public function validaFechaDisposicion($attr, $params){
		$fecha=$this[$attr];
		if(isset($fecha) && $fecha!=0){
			$fecha=date("Y-m-d",strtotime($fecha));//Para quitar la hora

			$fechaAutorizacion=date("Y-m-d",strtotime($this->fecha_aceptacion));//Para quitar la hora
			if(strtotime($fecha)<strtotime($fechaAutorizacion)){
				$this->addError($attr, "La fecha de disposición ($fecha) no puede ser menor a la fecha de autorización ($fechaAutorizacion)");
			}else{
				$grupo=$this['id_grupo_cliente'];
				if(!isset($grupo) || $grupo=="" || $grupo==0){
                    if(isset($this->id_cliente0)){
                        $etapa=$this->id_cliente0->getEtapaDocumentos(2, $this);//Disposición
                        if($etapa==false){
                            $this->addError($attr, "La disposición no es permitida cuando no se ha entregado el expediente de la disposición");
                        }
                    }
				}
			}
		}
	}

	/**
	 *
	 * @return array relational rules.
	 */
	public function relations() {
		// NOTE: you may need to adjust the relation name and the related
		// class name for the relations automatically generated below.
		return array (
			'id_activo_arrendamiento0'=>array(self::BELONGS_TO,'ArrendamientosSolicitudes','id_activo_arrendamiento'),
			'id_cliente0'=>array(self::BELONGS_TO,'Clientes','id_cliente'),//Nombre_Relacion=array(self::BELONGS_TO, NombreModeloForaneo, ColumnaRelacionadaConModeloForaneo)
			'id_ejecutivo0' => array(self::BELONGS_TO, 'Ejecutivos', array('id_ejecutivo' => 'id'), 'through' => 'id_cliente0'),
			'ocupacion0'=>array(self::BELONGS_TO,'PldClientes','id_cliente'),
			'id_banco0'=>array(self::BELONGS_TO,'Bancos','id_banco'),
			'id_grupo_cliente0'=>array(self::BELONGS_TO,'GruposClientes','id_grupo_cliente'),//Cada cliente solamente puede pertenecer a un grupo, asi que este grupo debe ser el del cliente seleccionado, si no se selecciona un grupo es porque la solicitud no es grupo solidario.
			'id_fondeadora0'=>array(self::BELONGS_TO,'Fondeadoras','id_fondeadora'),
			'id_aportes_fondeadores1'=>array(self::BELONGS_TO,'AportesFondeadores','id_fondeadora'),
			'id_moneda0'=>array(self::BELONGS_TO,'Monedas','id_moneda'),
			'id_parametrico0'=>array(self::BELONGS_TO,'Parametricos','id_parametrico'),
			'id_tipo_amortizacion0'=>array(self::BELONGS_TO,'TiposAmortizacion','id_tipo_amortizacion'),
			'id_tipo_pago0'=>array(self::BELONGS_TO,'TiposPagos','id_tipo_pago'),
			'id_producto0'=>array(self::BELONGS_TO,'Productos','id_producto'),
			'id_status0'=>array(self::BELONGS_TO,'StatusSolicitudes','id_status'),
			'id_tasa_referencia0'=>array(self::BELONGS_TO,'TasasReferencia','id_tasa_referencia'),
			'id_grupo_solicitud0'=>array(self::BELONGS_TO,'GruposSolicitudes','id_grupo_solicitud'),
			'id_supervisor0'=>array(self::BELONGS_TO,'Supervisores','id_supervisor'),
			'id_impuesto0'=>array(self::BELONGS_TO,'Impuestos','id_impuesto'),
			'id_impuesto_moratorios0'=>array(self::BELONGS_TO,'Impuestos','id_impuesto_moratorios'),
			'id_reestructura0'=>array(self::BELONGS_TO,'Solicitudes','id_reestructura'),
			'id_disposicion0'=>array(self::HAS_MANY,'Disposiciones','id_solicitud'),
			'id_renovacion_monto0'=>array(self::HAS_MANY,'RenovacionesMontos','id_solicitud'),
			'id_renovacion_plazo0'=>array(self::HAS_MANY,'RenovacionesPlazos','id_solicitud'),
			//
			'solidarios0'=>array(self::HAS_MANY,'GruposSolidarios','id_solicitud'),
			'amortizaciones0' => array(self::HAS_MANY, 'Amortizaciones', 'id_solicitud'),
			'reestructura0'=>array(self::HAS_ONE,'Solicitudes','id_reestructura'),
			'id_deudor0'=>array(self::BELONGS_TO,'Deudores','id_deudor'),
			'id_banco_cliente0'=>array(self::BELONGS_TO,'BancosClientes','id_banco_cliente'),
			'id_nombre_banco0'=>array(self::BELONGS_TO,'ListadoBancos','nombre_banco'),
			'id_sucursal0'=>array(self::BELONGS_TO,'Sucursales','id_sucursal'),
			'id_empresa0'=>array(self::BELONGS_TO,'Empresa','id_empresa'),
			'id_operacion0'=>array(self::HAS_MANY,'Operaciones','id_solicitud'),
			'id_calificacion0'=>array(self::BELONGS_TO,'CalificacionesRiesgo',array('calificacion_asignada'=>'clave')),
			'id_commodities0'=>array(self::BELONGS_TO,'Commodities','id_commodities'),
			'id_cotizador0'=>array(self::BELONGS_TO,'Cotizador','id_cotizador'),
			'id_estatus_cobro0'=>array(self::BELONGS_TO,'EstatusCobroSolicitudes','id_estatus_cobro'),
			'id_estatus_pago0'=>array(self::BELONGS_TO,'StatusPagos','id_estatus_pago'),
			'id_Cuenta_UsrPss0'=>array(self::BELONGS_TO,'CuentasUsuariosPass','id_cuentas_usuarios_pass'),
            'id_tipo_cartera0'=>array(self::BELONGS_TO,'TiposCartera','id_tipo_cartera'),
            'id_clave_observacion0'=>array(self::BELONGS_TO,'ClavesObservacion','id_clave_observacion'),
            'id_amortizacion0'=>array(self::HAS_MANY,'Amortizaciones','id_solicitud'),
            'id_solicitud_datos0' => array(self::HAS_MANY, 'SolicitudesDatos', 'id_solicitud'),
            'id_datos_tablas_adicionales0' => array(self::HAS_MANY, 'DatosTablasAdicionalesParametricos', 'id_solicitud'),
            'id_etapa_credito0'=>array(self::BELONGS_TO,'EtapasCreditos','id_etapa_credito'),
			'segmentacion' => array(self::HAS_ONE, 'SegmentacionesCub', '', 
				'on' => 'segmentacion.id = id_cliente0.id_segmentacion_cub',
				'joinType' => 'LEFT JOIN',
			),
		);
	}

	protected function afterSave(){
		parent::afterSave();
		if(is_null($this->ciclo )){ // Solicitud desde el modelo
			// ciclo nulo <=> solicitud rompió ciclo en otro lado
			$sql = "WITH ttable AS(
						SELECT
							id AS id_solicitud,
							ROW_NUMBER() OVER (PARTITION BY id_cliente ORDER BY id) AS cicloOrden
						FROM solicitudes
						WHERE id_cliente = $this->id_cliente
					)
					UPDATE solicitudes s
					JOIN ttable tt ON s.id = tt.id_solicitud
					SET s.ciclo = IF(tt.cicloOrden <= 9, CONCAT('0', tt.cicloOrden), tt.cicloOrden)
					WHERE s.id = $this->id;";
			Yii::app()->db->createCommand($sql)->execute();
		}
	}

	protected function afterDelete(){
		parent::afterDelete();
		// Actualizar el ciclo de las solicitudes del cliente
		$sql = "
			WITH ttable
			AS (
				SELECT
					id AS id_solicitud,
					ROW_NUMBER() OVER (PARTITION BY id_cliente ORDER BY id) AS cicloOrden
				FROM solicitudes
				WHERE id_cliente = $this->id_cliente
			)
			UPDATE solicitudes s
			JOIN ttable tt ON s.id = tt.id_solicitud
			SET s.ciclo = IF(tt.cicloOrden <= 9, CONCAT('0', tt.cicloOrden), tt.cicloOrden)
		";
		Yii::app()->db->createCommand($sql)->execute();
	}


	

	/**
	 *
	 * @return array customized attribute labels (name=>label)
	 */
	public function attributeLabels()
	{
		$empresaPais = Empresa::model()->find()->pais;
		$idioma = strtolower(Idiomas::model()->findByAttributes(['pais' => $empresaPais])->codigo_pais);
		$modelName = strtolower(get_class($this));

		return array (
			'variables_adicionales'=> Utils::t($modelName,'variables_adicionales','Adicional',$idioma),
			'clave'=> Utils::t($modelName,'clave','Clave',$idioma),
			'segmentacion'=> Utils::t($modelName,'segmentacion','Segmentacion',$idioma),
			'contrato'=> Utils::t($modelName,'contrato','Contrato',$idioma),
			'numero_cuenta'=> Utils::t($modelName,'numero_cuenta','Número de Cuenta',$idioma),
			'referencia_oxxo'=> Utils::t($modelName,'referencia_oxxo','Referencia OXXO',$idioma),
			'referencia_pagos'=> Utils::t($modelName,'referencia_pagos','Referencia Pagos',$idioma),
			'referencia_pagos2'=> Utils::t($modelName,'referencia_pagos2','Referencia Pagos 2',$idioma),
			'poliza'=> Utils::t($modelName,'poliza','Póliza',$idioma),
			'id_activo_arrendamiento'=> Utils::t($modelName,'id_activo_arrendamiento','Equipo/Activo Arrendamiento',$idioma) ,
			'calculo_capital'=> Utils::t($modelName,'calculo_capital','Tipo Financiamiento',$idioma),
			'id_grupo_solicitud'=> Utils::t($modelName,'id_grupo_solicitud','Grupo de Solicitud',$idioma),
			'lugar_aceptacion'=> Utils::t($modelName,'lugar_aceptacion','Lugar de Aceptación',$idioma),
			'usuario' => Utils::t($modelName,'usuario','Creador',$idioma),
			'nombre_usuario'=> Utils::t($modelName,'nombre_usuario','Creador',$idioma),
			'fecha_solicitud'=> Utils::t($modelName,'fecha_solicitud','Fecha de la Solicitud',$idioma),
			'fecha_aceptacion'=> Utils::t($modelName,'fecha_aceptacion','Fecha de Aprobación',$idioma),
			'fecha_disposicion'=> Utils::t($modelName,'fecha_disposicion','Fecha de Disposicion',$idioma),
			'fecha_vencimiento'=> Utils::t($modelName,'fecha_vencimiento','Fecha de Vencimiento',$idioma),
			'gracia_capital'=> Utils::t($modelName,'gracia_capital','Gracia de Capital',$idioma),
			'gracia_interes'=> Utils::t($modelName,'gracia_interes','Gracia de Interés',$idioma),
			'condonacion_interes'=> Utils::t($modelName,'condonacion_interes','Condonación de Interés',$idioma),
			'nombre_producto' => Utils::t($modelName,'nombre_producto','Producto',$idioma),
			'id_producto'=> Utils::t($modelName,'id_producto','Producto',$idioma),
			'id_banco' => Utils::t($modelName,'id_banco','Banco Financiera',$idioma),
			'id_deudor' => Utils::t($modelName,'id_deudor','Deudor Financiera',$idioma),
			'id_banco_cliente' => Utils::t($modelName,'id_banco_cliente','Banco Cliente',$idioma),
			'id_moneda'=> Utils::t($modelName,'id_moneda','Moneda',$idioma),
			'monto_solicitado'=> Utils::t($modelName,'monto_solicitado','Monto Solicitado',$idioma),
			'monto_autorizado'=> Utils::t($modelName,'monto_autorizado','Monto Autorizado',$idioma),
			'plazo_solicitado'=> Utils::t($modelName,'plazo_solicitado','Plazo Solicitado'.((isset($this->id_tipo_amortizacion) && $this->id_tipo_amortizacion!=0)?' ('.$this->getUnidadPlazo().')':''),$idioma),
			'plazo_autorizado'=> Utils::t($modelName,'plazo_autorizado','Plazo Autorizado'.((isset($this->id_tipo_amortizacion) && $this->id_tipo_amortizacion!=0)?' ('.$this->getUnidadPlazo().')':''),$idioma),
			'frecuencia'=> Utils::t($modelName,'frecuencia','Frecuencia',$idioma),
			'plazo_dias_solicitado'=> Utils::t($modelName,'plazo_dias_solicitado','Plazo en días',$idioma),
			'plazo_dias_autorizado'=> Utils::t($modelName,'plazo_dias_autorizado','Plazo en días',$idioma),
			'nombre_tasa_referencia'=> Utils::t($modelName,'nombre_tasa_referencia','Tasa de Referencia',$idioma),
			'id_tipo_amortizacion'=> Utils::t($modelName,'id_tipo_amortizacion','Tipo de Amortización',$idioma),
			'nombre_tipo_amortizacion'=> Utils::t($modelName,'nombre_tipo_amortizacion','Tipo de Amortización',$idioma),
			'id_tipo_pago'=> Utils::t($modelName,'id_tipo_pago','Tipo de Pago',$idioma),
			'nombre_tipo_pago'=> Utils::t($modelName,'nombre_tipo_pago','Tipo de Pago',$idioma),
			'id_tasa_referencia'=> Utils::t($modelName,'id_tasa_referencia','Tasa',$idioma),
			'sobretasa'=> Utils::t($modelName,'sobretasa','Sobretasa',$idioma),
			'tasa_moratoria'=> Utils::t($modelName,'tasa_moratoria','Tasa Moratoria',$idioma),
			'nombre_impuesto'=> Utils::t($modelName,'nombre_impuesto','Impuesto',$idioma),
			'id_impuesto'=> Utils::t($modelName,'id_impuesto','Impuesto',$idioma),
			'nombre_impuesto_moratorios'=> Utils::t($modelName,'nombre_impuesto_moratorios','Impuesto de Moratorios',$idioma),
			'id_impuesto_moratorios'=> Utils::t($modelName,'id_impuesto_moratorios','Impuesto de Moratorios',$idioma),
			'aplicacion_moratorios'=> Utils::t($modelName,'aplicacion_moratorios','Aplicación de Moratorios',$idioma),
			'id_parametrico'=> Utils::t($modelName,'id_parametrico','Parametrico',$idioma),
			'tipo_garantia'=> Utils::t($modelName,'tipo_garantia','Tipo de Garantía',$idioma),
			'clase_garantia'=> Utils::t($modelName,'clase_garantia','Clase de Garantía',$idioma),
			'valor_garantia'=> Utils::t($modelName,'valor_garantia','Valor de la Garantía',$idioma),
			'id_cliente'=> Utils::t($modelName,'id_cliente','Cliente',$idioma),
			'clave_cliente'=> Utils::t($modelName,'clave_cliente','Clave Cliente',$idioma),
			'nombre_cliente'=> Utils::t($modelName,'nombre_cliente','Nombre Cliente',$idioma),
			'id_grupo_cliente'=> Utils::t($modelName,'id_grupo_cliente','Grupo Solidario',$idioma),
			'id_supervisor'=> Utils::t($modelName,'id_supervisor','Supervisor',$idioma),
			'idEjecutivo'=> Utils::t($modelName,'idEjecutivo','Ejecutivo',$idioma),
			'ingreso_cliente'=> Utils::t($modelName,'ingreso_cliente','Ingreso del Cliente',$idioma),
			'calificacion_calculada'=> Utils::t($modelName,'calificacion_calculada','Calificación Calculada',$idioma),
			'calificacion_asignada'=> Utils::t($modelName,'calificacion_asignada','Calificación Asignada',$idioma),
			'id_usuario_aceptacion'=> Utils::t($modelName,'id_usuario_aceptacion','Usuario que Aprobó',$idioma),
			'usuario_aprobacion'=> Utils::t($modelName,'usuario_aprobacion','Usuario que Aprobó',$idioma),
			'nombre_usuario_aprobacion'=> Utils::t($modelName,'nombre_usuario_aprobacion','Usuario que Aprobó',$idioma),
			'justificacion_aceptacion'=> Utils::t($modelName,'justificacion_aceptacion','Justificación del Estatus',$idioma),
			'status_calculado'=> Utils::t($modelName,'status_calculado','Estatus Sistema',$idioma),
			'status_asignado'=> Utils::t($modelName,'status_asignado','Estatus Analista',$idioma),
			'id_status'=> Utils::t($modelName,'id_status','Estatus Interno',$idioma),
			'id_estatus_cobro'=> Utils::t($modelName,'id_estatus_cobro','Estatus cobranza',$idioma),
			'id_estatus_pago'=> Utils::t($modelName,'id_estatus_pago','Estatus pago',$idioma),
			'id_sucursal'=> Utils::t($modelName,'id_sucursal','Sucursal',$idioma),
			'nombre_sucursal'=> Utils::t($modelName,'nombre_sucursal','Sucursal',$idioma),
			'id_empresa'=> Utils::t($modelName,'id_empresa','Empresa',$idioma),
			'nombre_empresa'=> Utils::t($modelName,'nombre_empresa','Empresa',$idioma),
			'id_fondeadora'=> Utils::t($modelName,'id_fondeadora','Fondeadora',$idioma),
			'id_aportes_fondeadores'=> Utils::t($modelName,'id_aportes_fondeadores','Aportes de Fondeadores',$idioma),
			'auto_relleno_adicional'=> Utils::t($modelName,'auto_relleno_adicional','Rellenar pago adicional automaticamente',$idioma),
			'fecha_disposicion_tentativa'=> Utils::t($modelName,'fecha_disposicion_tentativa','Fecha Disposición Tentativa',$idioma),
			'numero_disposiciones'=> Utils::t($modelName,'numero_disposiciones','No. Disposiciones',$idioma),
			'tir'=> Utils::t($modelName,'tir','TIR',$idioma),
			//Los siguientes son para ARRENDAMIENTO PURO(El monto autorizado es el valor arrendado)
			'valor_equipo'=> Utils::t($modelName,'valor_equipo','Activo o Equipo (c/Impuesto)',$idioma),
			'valor_auto_usado'=> Utils::t($modelName,'valor_auto_usado','Residual',$idioma),
			'valor_residual_porcentaje'=> Utils::t($modelName,'valor_residual_porcentaje','Residual',$idioma),
			'valor_residual_monto'=> Utils::t($modelName,'valor_residual_monto','Residual',$idioma),
			'deposito_meses'=> Utils::t($modelName,'deposito_meses','Numero de rentas para deposito de seguridad',$idioma),
			'deposito_con_iva'=> Utils::t($modelName,'deposito_con_iva','Deposito con Impuesto',$idioma),
			'deposito_adicional'=> Utils::t($modelName,'deposito_adicional','Deposito Adicional de Seguridad antes de iva',$idioma),
			'deposito_monto'=> Utils::t($modelName,'deposito_monto','Deposito de Seguridad',$idioma),
			'anticipo_rentas'=> Utils::t($modelName,'anticipo_rentas','Anticipo (s/Impuesto)',$idioma),
			//
			'ratificacion'=> Utils::t($modelName,'ratificacion','Sobreprecio Ratificación (s/Impuesto)',$idioma),
			'ratificacion_total'=> Utils::t($modelName,'ratificacion_total','Ratificación Total (s/Impuesto)',$idioma),
			'comision_apertura_porcentaje'=> Utils::t($modelName,'comision_apertura_porcentaje','Comisión Apertura',$idioma),
			'comision_apertura_monto'=> Utils::t($modelName,'comision_apertura_monto','Comisión Apertura',$idioma),
			'seguro'=> Utils::t($modelName,'seguro','Seguro Multianual (c/Impuesto)',$idioma),
			'accesorios'=> Utils::t($modelName,'accesorios','Accesorios',$idioma),
			'enganche'=> Utils::t($modelName,'enganche','Enganche',$idioma),
			'gastos_rentas'=> Utils::t($modelName,'gastos_rentas','Gastos de Renta',$idioma),
			'tenencia'=> Utils::t($modelName,'tenencia','Tenencia',$idioma),
			//
			'gastos_iniciales_porcentaje'=> Utils::t($modelName,'gastos_iniciales_porcentaje','Costo Adicional de Contado (s/Impuesto)',$idioma),
			'gastos_iniciales'=> Utils::t($modelName,'gastos_iniciales','Costo Adicional de Contado (s/Impuesto)',$idioma),
			'comisiones_iniciales'=> Utils::t($modelName,'comisiones_iniciales','Comision Apertura',$idioma),
			'comisiones_iniciales_porcentaje'=> Utils::t($modelName,'comisiones_iniciales_porcentaje','Comision Apertura',$idioma),
			'garantia_extendida'=> Utils::t($modelName,'garantia_extendida','Garantia Extendida',$idioma),
			'otros_gastos'=> Utils::t($modelName,'otros_gastos','Costo Adicional Financiado (s/Impuesto)',$idioma),
			'otros_gastos_porcentaje'=> Utils::t($modelName,'otros_gastos_porcentaje','Costo Adicional Financiado (s/Impuesto)',$idioma),
			'financiamiento_seguro'=> Utils::t($modelName,'financiamiento_seguro','Financiamiento de Seguro',$idioma),
			'financiamiento_accesorios'=> Utils::t($modelName,'financiamiento_accesorios','Financiamiento de Accesorios',$idioma),
			'financiamiento_tenencia'=> Utils::t($modelName,'financiamiento_tenencia','Financiamiento de Tenencia',$idioma),
			'financiamiento_gastos_iniciales'=> Utils::t($modelName,'financiamiento_gastos_iniciales','Financiamiento de Gastos Iniciales',$idioma),
			'financiamiento_comisiones_iniciales'=> Utils::t($modelName,'financiamiento_comisiones_iniciales','Financiamiento de Comisiones Iniciales',$idioma),
			'financiamiento_garantia_extendida'=> Utils::t($modelName,'financiamiento_garantia_extendida','Financiamiento de Garantia Extendida',$idioma),
			'financiamiento_otros_gastos'=> Utils::t($modelName,'financiamiento_otros_gastos','Financiamiento de Otros Gastos',$idioma),
			'anual_seguro'=> Utils::t($modelName,'anual_seguro','Anual',$idioma),
			'anual_accesorios'=> Utils::t($modelName,'anual_accesorios','Anual',$idioma),
			'anual_tenencia'=> Utils::t($modelName,'anual_tenencia','Anual',$idioma),
			'anual_gastos_iniciales'=> Utils::t($modelName,'anual_gastos_iniciales','Anual',$idioma),
			'anual_comisiones_iniciales'=> Utils::t($modelName,'anual_comisiones_iniciales','Anual',$idioma),
			'anual_garantia_extendida'=> Utils::t($modelName,'anual_garantia_extendida','Anual',$idioma),
			'anual_otros_gastos'=> Utils::t($modelName,'anual_otros_gastos','Anual',$idioma),
			//
			'udi'=> Utils::t($modelName,'udi','UDI',$idioma),
			'valor_mercado'=> Utils::t($modelName,'valor_mercado','Valor de Mercado',$idioma),
			'numero_firma'=> Utils::t($modelName,'numero_firma','Numero de Firma',$idioma),
			'tabla_disposiciones'=> Utils::t($modelName,'tabla_disposiciones','Tabla de Disposiciones',$idioma),
			'id_cotizador'=> Utils::t($modelName,'id_cotizador','Cotización',$idioma),
			'id_linea'=> Utils::t($modelName,'id_linea','Linea',$idioma),
			'ajuste_primera_amortizacion'=> Utils::t($modelName,'ajuste_primera_amortizacion','Ajuste Primera Amortización',$idioma),
			'editar_iva'=> Utils::t($modelName,'editar_iva','Editar Impuesto',$idioma),
			'cartera_vencida'=> Utils::t($modelName,'cartera_vencida','Tipo de Cartera',$idioma),
			//
			'ivaSeguroAux'=> Utils::t($modelName,'ivaSeguroAux','Impuesto Seguro',$idioma),
			'seguroSinIvaAux'=> Utils::t($modelName,'seguroSinIvaAux','Seguro (s/Impuesto)',$idioma),
			'totalConIvaAux'=> Utils::t($modelName,'totalConIvaAux','Monto Total (c/Impuesto)',$idioma),
			'totalSinIvaAux'=> Utils::t($modelName,'totalSinIvaAux','Monto Total (s/Impuesto)',$idioma),
			'anticipoRentasAux'=> Utils::t($modelName,'anticipoRentaAux','Anticipo (s/Impuesto)',$idioma),
			'udiAux'=> Utils::t($modelName,'udiAux','UDI',$idioma),
			'valorMercadoAux'=> Utils::t($modelName,'valorMercadoAux','Valor de Mercado',$idioma),
			'rentaAux'=> Utils::t($modelName,'rentaAux','Renta (s/Impuesto)',$idioma),
			'factorRentaAux'=> Utils::t($modelName,'factorRentaAux','Factor Renta',$idioma),
			'pagoInicialAux'=> Utils::t($modelName,'pagoInicialAux','Pago Inicial Renta',$idioma),
			'comisionInicialBase'=> Utils::t($modelName,'comisionInicialBase','Base',$idioma),
			'gastoInicialBase'=> Utils::t($modelName,'gastoInicialBase','Base',$idioma),
			'fecha_quebranto'=> Utils::t($modelName,'fecha_quebranto','Fecha de Quebranto',$idioma),
			'etapa'=> Utils::t($modelName,'etapa','Etapa de Crédito',$idioma),
			'estatussolicitudes'=> Utils::t($modelName,'estatussolicitudes','Estatus Solicitudes',$idioma),
			//
			'claveCliente'=> Utils::t($modelName,'claveCliente','No. Cliente',$idioma),
			'claveGrupoCliente'=> Utils::t($modelName,'claveGrupoCliente','Clave Grupo Solidario',$idioma),
			'integrantes'=> Utils::t($modelName,'integrantes','Integrantes',$idioma),
			'montoDispuesto'=> Utils::t($modelName,'montoDispuesto','Monto Dispuesto',$idioma),
			'montoDispersion'=> Utils::t($modelName,'montoDispersion','Monto Dispersión',$idioma),
			'fechaDispersion'=> Utils::t($modelName,'fechaDispersion','Fecha Dispersión',$idioma),
			'sesion_comite'=> Utils::t($modelName,'sesion_comite','Sesión Comite',$idioma),
			'notasSolicitud'=> Utils::t($modelName,'notasSolicitud','Notas de Solicitud',$idioma),
			//Consultas buro de credito
			'id_cliente_consulta_pf'=> Utils::t($modelName,'id_cliente_consulta_pf','Cliente',$idioma),
			'id_cliente_consulta_pm'=> Utils::t($modelName,'id_cliente_consulta_pm','Cliente',$idioma),
			'numero_referencia_operador'=> Utils::t($modelName,'numero_referencia_operador','Número Referencia Operador',$idioma),
			'producto_requerido'=> Utils::t($modelName,'producto_requerido','Producto Requerido',$idioma),
			'identificador_buro'=> Utils::t($modelName,'identificador_buro','Identificador Buró',$idioma),
			'tipo_contrato'=> Utils::t($modelName,'tipo_contrato','Tipo Contrato',$idioma),
			'usuario_buro'=> Utils::t($modelName,'usuario_buro','Usuario',$idioma),
			'password_buro'=> Utils::t($modelName,'password_buro','Contraseña',$idioma),
			'autorizador'=> Utils::t($modelName,'autorizador','Autorizador',$idioma),
			//descontado
			'factor'=> Utils::t($modelName,'factor','Factor',$idioma),
			'feci'=> Utils::t($modelName,'feci','FECI',$idioma),
			'seguro_vida'=> Utils::t($modelName,'seguro_vida','Seguro de Vida',$idioma),
			'seguro_bien'=> Utils::t($modelName,'seguro_bien','Seguro de Bien',$idioma),
			'comision'=> Utils::t($modelName,'comision','Comisión',$idioma),
			'puntos_seguro'=> Utils::t($modelName,'puntos_seguro','Seguro',$idioma),
			'prestamo_bruto'=> Utils::t($modelName,'prestamo_bruto','Prestamo Bruto',$idioma),
			'comision_manejo'=> Utils::t($modelName,'comision_manejo','Comision Manejo',$idioma),
			'monto_itbms'=> Utils::t($modelName,'monto_itbms','ITBMS',$idioma),
			'monto_feci'=> Utils::t($modelName,'monto_feci','FECI',$idioma),
			'bloquear_tasas'=> Utils::t($modelName,'bloquear_tasas','Tasa Especial',$idioma),
			//Producto Panama Facilito
			'facilito_seguro'=> Utils::t($modelName,'facilito_seguro','Seguro',$idioma),
			'facilito_objeto'=> Utils::t($modelName,'facilito_objeto','Objeto del Crédito',$idioma),
			'facilito_codeudor'=> Utils::t($modelName,'facilito_codeudor','Codeudor',$idioma),
			'bandera_alarma_vencimiento'=> Utils::t($modelName,'bandera_alarma_vencimiento','Alarma Vencimiento de linea',$idioma),
            'open_banking' =>  Utils::t($modelName,'open_banking','Consultar Open Banking',$idioma),
            'consultar_meses'=> Utils::t($modelName,'consultar_meses','Meses a consultar',$idioma),
            'base_comisiones_iniciales'=> Utils::t($modelName,'base_comisiones_iniciales','Base comision',$idioma),
            'base_otros_gastos'=> Utils::t($modelName,'base_otros_gastos','Base otros gastos',$idioma),
			'ajuste_primera_amortizacion2'=> Utils::t($modelName,'ajuste_primera_amortizacion2','Ajuste de dias desfasados de primera amortizacion',$idioma),
			'foliointernostp'=> Utils::t($modelName,'foliointernostp','Folio Interno STP',$idioma),
			'status_stp'=> Utils::t($modelName,'status_stp','Status STP',$idioma),
			'transferido'=> Utils::t($modelName,'transferido','Transferido STP',$idioma),
			'seleccionado'=> Utils::t($modelName,'seleccionado','Seleccionado',$idioma),
			//
			'errorstp'=> Utils::t($modelName,'errorstp','Error STP',$idioma),
			'referenciaclubpago'=> Utils::t($modelName,'referenciaclubpago','Referencia de Club Pago',$idioma),
			'clabeclubpago'=> Utils::t($modelName,'clabeclubpago','Clabe Club Pago',$idioma),
			'codigoafiliacion'=> Utils::t($modelName,'codigoafiliacion','Codigo de Afiliación/Convenio/Dependencia',$idioma),
			'codigodelegacionafiliacion'=> Utils::t($modelName,'codigodelegacionafiliacion','Codigo de Delegacion de la Afiliacion / Dependencia / Convenio',$idioma),
			'modulodelegacion'=> Utils::t($modelName,'modulodelegacion','Modulo de la Delegacion de la Afiliacion / Dependencia / Convenio',$idioma),
			'codigocampania'=> Utils::t($modelName,'codigocompania','Codigo de campaña de publicidad',$idioma),
			'tipodisposicion'=> Utils::t($modelName,'tipodisposicion','Tipo de disposicion (Ventanilla/ SPEI/ Cheque) ',$idioma),
            'activar_cuota'=> Utils::t($modelName,'activar_cuota','Habilitar captura de cuota fija',$idioma),
			'codigo_vendedor_fimubac'=> Utils::t($modelName,'codigo_vendedor_fimubac','Codigo Vendedor Fimubac',$idioma),
			'producto_financiero'=> Utils::t($modelName,'producto_financiero','Producto Financiero Fimubac',$idioma),
			'sucursal_fimubac'=> Utils::t($modelName,'sucursal_fimubac','Sucursal Fimubac',$idioma),
			'interes_diario_ultima_letra'=> Utils::t($modelName,'interes_diario_ultima_letra','Generar interes diario en la ultima letra hasta el dia de pago',$idioma),
			//
			'interes_calculado_saldo_insoluto'=> Utils::t($modelName,'interes_calculado_saldo_insoluto','Generar interes en base al saldo insoluto',$idioma),
			'dadoaltaSTP'=> Utils::t($modelName,'dadoaltaSTP','Dado de alta en enlace financiero STP',$idioma),
			'cuentastp'=> Utils::t($modelName,'cuentastp','Clabe STP para cobranza',$idioma),
            'promedio_interes' => Utils::t($modelName,'promedio_interes','Promediar Interes',$idioma),
            'bandera_residual_manual'=> Utils::t($modelName,'bandera_residual_manual','Habilitar edición de residual a valor actual',$idioma),
			'monto_residual_valor_actual'=> Utils::t($modelName,'monto_residual_valor_actual','Monto del valor actual del residual',$idioma),
			'claverastreo'=> Utils::t($modelName,'claverastreo','Clave de rastreo',$idioma),
			'diadepago'=> Utils::t($modelName,'diadepago','Fecha De Primer Descuento De Nómina',$idioma),
			'proceso'=> Utils::t($modelName,'proceso','Procesos del Credito',$idioma),
            'ajuste_capital'=> Utils::t($modelName,'ajuste_capital','Ajuste de Capital en Primera Amortización',$idioma),
			'comisionApertura_con_iva'=> Utils::t($modelName,'comisionApertura_con_iva','Apertura con Impuesto',$idioma),
			'depositoBase'=> Utils::t($modelName,'depositoBase','Base de Deposito',$idioma),
			'activar_factura' => Utils::t($modelName,'activar_factura','Activar facturación de arrendamiento',$idioma),
            'arrendamiento_dias'=> Utils::t($modelName,'arrendamiento_dias','Promedio de interes',$idioma),
            'id_tipo_cartera'=> Utils::t($modelName,'id_tipo_cartera','Tipo Cartera',$idioma),
            'porcentaje_capital'=> Utils::t($modelName,'porcentaje_capital','Porcentaje de Capital',$idioma),
            'porcentaje_interes'=> Utils::t($modelName,'porcentaje_interes','Porcentaje de Interés',$idioma),
			'tipo_moratorios'=> Utils::t($modelName,'tipo_moratorios','Tipo Moratorios',$idioma),
			'id_clave_observacion'=> Utils::t($modelName,'id_clave_observacion','Clave de observación',$idioma),
			'status_pre'=> Utils::t($modelName,'status_pre','Estatus Precalififcación',$idioma),
			'folio_pre'=> Utils::t($modelName,'folio_pre','Folio Precalificación',$idioma),
			'monto_preautorizado' => Utils::t($modelName,'monto_preautorizado','Monto Pre-autorizado',$idioma),
			'anticipoBase'=> Utils::t($modelName,'anticipoBase','Base de Anticipo',$idioma),
			'buroApiVersion' => Utils::t($modelName,'buroApiVersion','Version',$idioma),
			'fecha_vencimiento_linea_credito' => Utils::t($modelName,'fecha_vencimiento_linea_credito','Fecha de Vecimiento (Linea de Credito)',$idioma)
		);
	}

	public function getocultosSolicitudes(){
		if(!isset($this->_columnas)){
			$data=VariablesClientes::model()->findAll('Oculto=:Oculto AND tabla=:tabla',array(':tabla'=>'Solicitudes',':Oculto'=>'1'));
			$datos=array();
			if(!is_null($data)){
				foreach ($data as $d){
					if($d->Oculto==1){//Permitido
						$datos[]=$d->columna;
					}
				}
			}
			$this->_columnas=$datos;
		}


		return $this->_columnas;
	}

	public function getOcultoSolicitudes($t="Solicitudes") {
		$labels=array(
			'variables_adicionales'=>'Adicional',
			'id_cotizador'=>'Cotización',
			'numero_cuenta'=>'Número de Cuenta',
			'poliza'=>'Póliza',
			'id_grupo_solicitud'=>'Grupo de Solicitud',
			'id_activo_arrendamiento'=>'Equipo/Activo Arrendamiento',
			'numero_firma'=>'Numero de Firma',
			'id_banco' => 'Banco Financiera',
			'id_deudor' => 'Deudor Financiera',
			'id_banco_cliente' => 'Banco Cliente',
			'factor'=>'Factor',
			'comision'=>'Comisión',
			'puntos_seguro'=>'Seguro',
			'seguro_vida'=>'Seguro de Vida',
			'seguro_bien'=>'Seguro de Bien',
			'prestamo_bruto'=>'Prestamo Bruto',
			'comision_manejo'=>'Comision Manejo',
			'monto_itbms'=>'ITBMS',
			'monto_feci'=>'FECI',
			'bloquear_tasas'=>'Tasa Especial',
			'gracia_capital'=>'Gracia de Capital',
			'gracia_interes'=>'Gracia de Interés',
			'condonacion_interes'=>'Condonación de Interés',
			'ingreso_cliente'=>'Ingreso del Cliente',
			'id_impuesto_moratorios'=>'Impuesto de Moratorios',
			'aplicacion_moratorios'=>'Aplicación de Moratorios',
			'id_supervisor'=>'Supervisor',
			'bandera_alarma_vencimiento'=>'Alarma Vencimiento de linea',
			'cat'=>'CAT',
			'nombre_banco' => 'Banco',
		);
		$datas=VariablesClientes::model()->findAll('status=:status AND tabla=:tabla ',array(':tabla'=>'Solicitudes',':status'=>'0'));
		$columnas= $datas;
		return $this->_columnas;
	}
	/**
	 * Retrieves a list of models based on the current search/filter conditions.
	 *
	 * Typical usecase:
	 * - Initialize the model fields with values from filter form.
	 * - Execute this method to get CActiveDataProvider instance which will filter
	 * models according to data in model fields.
	 * - Pass data provider to CGridView, CListView or any similar widget.
	 *
	 * @return CActiveDataProvider the data provider that can return the models
	 *      based on the search/filter conditions.
	 */
	public function search($ejecutivos=null) {
		// @todo Please modify the following code to remove attributes that should not be searched.
		$criteria = new CDbCriteria ();
		$criteria->alias="s";
		$criteria->with=array('id_cliente0','id_ejecutivo0',"id_cliente0.id_pld_cliente0","id_grupo_cliente0",
							  "id_supervisor0.id_usuario0","id_grupo_solicitud0","id_fondeadora0","id_aportes_fondeadores1",
							  "id_producto0","id_banco0",'id_deudor0' ,'id_banco_cliente0',"id_cotizador0", "id_nombre_banco0","segmentacion","id_etapa_credito0");
		

		if(isset($this->diadepago) and !is_null($this->diadepago) and $this->diadepago!=''){
			$criteria->addCondition("s.diadepago LIKE '%".$this->diadepago."%'");}
		if(isset($this->segmentacion) and !is_null($this->segmentacion) and $this->segmentacion!=''){
				$criteria->addCondition("segmentacion.nombre LIKE '%".$this->segmentacion."%'");}
		if(isset($this->nombre_banco) and !is_null($this->nombre_banco) and $this->nombre_banco!=''){
			$criteria->addCondition("s.nombre_banco = '".$this->nombre_banco."'");}

		if(isset($this->cuentastp) and !is_null($this->cuentastp) and $this->cuentastp!=''){
		$criteria->addCondition("s.cuentastp LIKE '%".$this->cuentastp."%'");}

		if(isset($this->dadoaltaSTP) and !is_null($this->dadoaltaSTP) and $this->dadoaltaSTP!=''){
		$criteria->addCondition("s.dadoaltaSTP LIKE '%".$this->dadoaltaSTP."%'");}

		if(isset($this->claverastreo) and !is_null($this->claverastreo) and $this->claverastreo!=''){
			$criteria->addCondition("s.claverastreo LIKE '%".$this->claverastreo."%'");}

		if(isset($this->id_grupo_solicitud) and $this->id_grupo_solicitud!=''){
			$criteria->addCondition("s.id_grupo_solicitud='".$this->id_grupo_solicitud."'");
		}

		if(isset($this->clave) and $this->clave!=''){
			$criteria->addCondition("s.clave = '".$this->clave."'");
		}
		if(isset($this->id_cotizador) and $this->id_cotizador!=''){
			$criteria->addCondition("id_cotizador0.clave like '%".$this->id_cotizador."'");
		}

		if(isset($this->riesgo_buro) and $this->riesgo_buro!=''){
			$criteria->addCondition("s.riesgo_buro LIKE '%".$this->riesgo_buro."%'");
		}

		if(isset($this->sesion_comite) and $this->sesion_comite!=''){
			$criteria->addCondition("s.sesion_comite LIKE '%".$this->sesion_comite."%'");
		}

		if(isset($this->calificacion_calculada) and $this->calificacion_calculada!=''){
			$criteria->addCondition("s.calificacion_calculada LIKE '%".$this->calificacion_calculada."%'");
		}

		if(isset($this->calificacion_asignada) and $this->calificacion_asignada!=''){
			$criteria->addCondition("s.calificacion_asignada LIKE '%".$this->calificacion_asignada."%'");
		}

		if(isset($this->status_calculado) and $this->status_calculado!=''){
			$criteria->addCondition("s.status_calculado = '".$this->status_calculado."'");
		}

		if(isset($this->id_status) and $this->id_status!=''){
			$criteria->addCondition("s.id_status = '".$this->id_status."'");
		}
		if(isset($this->id_estatus_cobro) and $this->id_estatus_cobro!=''){
			$criteria->addCondition("s.id_estatus_cobro = '".$this->id_estatus_cobro."'");
		}

		if(isset($this->autorizador) and $this->autorizador!=''){
			$criteria->addCondition("EXISTS(SELECT id FROM solicitudes_aceptaciones WHERE s.id=id_solicitud AND id_usuario='".$this->autorizador."' AND status='Aceptada') = TRUE");
		}

		if(isset($this->id_producto) and $this->id_producto!=''){
			$criteria->addCondition("s.id_producto =".$this->id_producto);
		}

		if(isset($this->nombre_tasa_referencia) and $this->nombre_tasa_referencia!=''){
			$criteria->addCondition("s.id_tasa_referencia =".$this->nombre_tasa_referencia);
		}

		if(isset($this->id_sucursal) and $this->id_sucursal!=''){
			$criteria->addCondition("s.id_sucursal =".$this->id_sucursal);
		}

		if(isset($this->id_supervisor) and $this->id_supervisor!=''){
			$criteria->addCondition("s.id_supervisor =".$this->id_supervisor);
		}

		if(isset($this->id_empresa) and $this->id_empresa!=''){
			$criteria->addCondition("s.id_empresa =".$this->id_empresa);
		}

		if(isset($this->tipo_cobro) and $this->tipo_cobro!=''){
			$criteria->addCondition("s.tipo_cobro LIKE '%".$this->tipo_cobro."%'");
		}

		if(isset($this->contrato) and $this->contrato!=''){
			$criteria->addCondition("s.contrato LIKE '%".$this->contrato."%'");
		}

		if(isset($this->referencia_oxxo) and $this->referencia_oxxo!=''){
			$criteria->addCondition("s.referencia_oxxo LIKE '%".$this->referencia_oxxo."%'");
		}

		if(isset($this->referencia_pagos) and $this->referencia_pagos!=''){
			$criteria->addCondition("s.referencia_pagos LIKE '%".$this->referencia_pagos."%'");
		}

		if(isset($this->referencia_pagos2) and $this->referencia_pagos2!=''){
			$criteria->addCondition("s.referencia_pagos2 LIKE '%".$this->referencia_pagos2."%'");
		}

		if(isset($this->claveCliente) and $this->claveCliente!=''){
			$criteria->addCondition("id_cliente0.clave_cliente LIKE '%".$this->claveCliente."%'");
		}
		if(isset($this->clave_cliente) and $this->clave_cliente!=''){
			$criteria->addCondition("id_cliente0.clave LIKE '%".$this->clave_cliente."%'");
		}

		if(isset($this->id_cliente) and $this->id_cliente!=''){
			$criteria->addCondition("CONCAT_WS(' ',id_cliente0.nombre,id_cliente0.nombre2,id_cliente0.apellido_paterno, id_cliente0.apellido_materno) LIKE '%".$this->id_cliente."%'");
		}

		if(isset($this->plazo_autorizado) and $this->plazo_autorizado!=''){
			$criteria->addCondition("s.plazo_autorizado LIKE '%".$this->plazo_autorizado."%'");
		}

		if(isset($this->plazo_solicitado) and $this->plazo_solicitado!=''){
			$criteria->addCondition("s.plazo_solicitado LIKE '%".$this->plazo_solicitado."%'");
		}

		if(isset($this->idCliente) and $this->idCliente!=''){
			$criteria->addCondition("id_cliente0.id = '".$this->idCliente."'");
		}

		if(isset($this->claveGrupoCliente) and $this->claveGrupoCliente!==''){
			$criteria->addCondition("id_grupo_cliente0.clave = '".$this->claveGrupoCliente."'");
		}

		if(isset($this->id_grupo_cliente) and $this->id_grupo_cliente!=''){
			$criteria->addCondition("id_grupo_cliente0.id LIKE '%".$this->id_grupo_cliente."%'");
		}
		if(isset($this->proceso) and $this->proceso!=''){
			$criteria->addCondition("proceso = '".$this->proceso."'");
		}

		if(!is_null($ejecutivos)){
			
			$condicion="( s.id_cliente in ( select id from clientes where id_ejecutivo in (select id from ejecutivos where id_usuario in (".$ejecutivos."))))";	
		
			$condicion=$condicion." OR ( s.id_supervisor in (select id from supervisores where id_usuario in (".$ejecutivos."))";	
			
			$condicion=$condicion." OR ( s.id_grupo_cliente is not null ))";
		
			$criteria->addCondition($condicion);
			
			if(isset($this->id_supervisor) and $this->id_supervisor!=''){
			$criteria->addCondition("id_supervisor=".$this->id_supervisor."");
			}
			
			if(isset($this->idEjecutivo) and $this->idEjecutivo!=''){
			$criteria->addCondition("id_cliente0.id_ejecutivo in (".$this->idEjecutivo.")");
			}
			
		}else{
			
			if(isset($this->id_supervisor) and $this->id_supervisor!=''){
			$criteria->addCondition("id_supervisor=".$this->id_supervisor."");
			}
			
			if(isset($this->idEjecutivo) and $this->idEjecutivo!=''){
			$criteria->addCondition("id_cliente0.id_ejecutivo in (".$this->idEjecutivo.")");
			}
			
		}

		if(isset($this->fecha_solicitud) and $this->fecha_solicitud!=''){
			$criteria->addCondition("s.fecha_solicitud LIKE '%".$this->fecha_solicitud."%'");
		}
		if(isset($this->fecha_disposicion) and $this->fecha_disposicion!=''){
			$criteria->addCondition("s.fecha_disposicion LIKE '%".$this->fecha_disposicion."%'");
		}

		if(isset($this->entregables) and $this->entregables!=''){
			$criteria->addCondition("s.entregables LIKE '%".$this->entregables."%'");
		}
		if(isset($this->nombre_producto) and $this->nombre_producto==''){
			$criteria->addCondition("s.id_producto='".$this->nombre_producto."'");
		}
		if(isset($this->id_moneda) and $this->id_moneda!==''){
			$criteria->addCondition("s.id_moneda='".$this->id_moneda."'");
		}
		if(isset($this->id_banco) and $this->id_banco!==''){
			$criteria->addCondition("id_banco0.nombre LIKE '%".$this->id_banco."%'");
		}
		if(isset($this->id_deudor) and $this->id_deudor!==''){
			$criteria->addCondition("id_deudor0.nombre LIKE '%".$this->id_deudor."%'");
		}
		if(isset($this->id_banco_cliente) and $this->id_banco_cliente!==''){
			$criteria->addCondition("id_banco_cliente0.nombre LIKE '%".$this->id_banco_cliente."%'");
		}
		if(isset($this->cartera_vencida) and $this->cartera_vencida!==''){
			$criteria->addCondition("IF(s.cartera_vencida=1,'Cartera Vencida','Cartera Vigente')='".$this->cartera_vencida."'");
		}
		if(isset($this->monto_solicitado) and $this->monto_solicitado!=''){
			if(substr($this->monto_autorizado,0,1)=="="){
				$criteria->addCondition("IF(s.id_grupo_cliente IS NULL,s.monto_solicitado,(SELECT SUM(IFNULL(monto,0)) FROM grupos_solidarios WHERE id_solicitud=s.id)) = ".substr($this->monto_solicitado,1)."");
			}else{
				$criteria->addCondition("IF(s.id_grupo_cliente IS NULL,s.monto_solicitado,(SELECT SUM(IFNULL(monto,0)) FROM grupos_solidarios WHERE id_solicitud=s.id)) LIKE '%".$this->monto_solicitado."%'");
			}
		}
		if(isset($this->monto_autorizado) and $this->monto_autorizado!=''){
			if(substr($this->monto_autorizado,0,1)=="="){
				$criteria->addCondition("IF(s.id_grupo_cliente IS NULL,IFNULL(s.monto_autorizado,0),(SELECT SUM(IFNULL(monto,0)) FROM grupos_solidarios WHERE id_solicitud=s.id AND status='Aceptada')) = ".substr($this->monto_autorizado,1)."");
			}else{
				$criteria->addCondition("IF(s.id_grupo_cliente IS NULL,IFNULL(s.monto_autorizado,0),(SELECT SUM(IFNULL(monto,0)) FROM grupos_solidarios WHERE id_solicitud=s.id AND status='Aceptada')) LIKE '%".$this->monto_autorizado."%'");
			}
		}
		if(isset($this->montoDispuesto) and $this->montoDispuesto!=''){
			if(substr($this->montoDispuesto,0,1)=="="){
				$criteria->addCondition("IF(s.id_grupo_cliente IS NULL,IFNULL((SELECT saldo_inicial FROM amortizaciones WHERE id_solicitud=s.id AND numero_amortizacion IN(0,1) LIMIT 1),0)+IFNULL((SELECT SUM(IFNULL(importe,0)) FROM disposiciones WHERE id_solicitud=s.id),0),(SELECT SUM(IFNULL(monto,0)) FROM grupos_solidarios WHERE id_solicitud=s.id AND status='Aceptada' AND s.status_asignado IN('Aceptada','Pagado','Reestructurado','Incobrable','Quebrantado'))) = ".substr($this->montoDispuesto,1)."");
			}else{
				$criteria->addCondition("IF(s.id_grupo_cliente IS NULL,IFNULL((SELECT saldo_inicial FROM amortizaciones WHERE id_solicitud=s.id AND numero_amortizacion IN(0,1) LIMIT 1),0)+IFNULL((SELECT SUM(importe) FROM disposiciones WHERE id_solicitud=s.id),0),(SELECT SUM(monto) FROM grupos_solidarios WHERE id_solicitud=s.id AND status='Aceptada' AND s.status_asignado IN('Aceptada','Pagado','Reestructurado','Incobrable','Quebrantado'))) LIKE '%".$this->montoDispuesto."%'");
			}
		}
		if(isset($this->id_fondeadora) and $this->id_fondeadora!=''){
			$criteria->addCondition("s.id_fondeadora='".$this->id_fondeadora."'");
		}
		if(isset($this->id_aportes_fondeadores) and $this->id_aportes_fondeadores!=''){
			$criteria->addCondition("s.id_aportes_fondeadores='".$this->id_aportes_fondeadores."'");
		}
		if(isset($this->status_asignado) and $this->status_asignado!=''){//status asignado puede ser tambien status calculado
			$criteria->addCondition("(s.id_grupo_cliente IS NULL AND ((s.status_asignado='".$this->status_asignado."' AND s.status_asignado is not null) or (s.status_calculado='".$this->status_asignado."' AND s.status_asignado is null))) OR (s.id_grupo_cliente IS NOT NULL AND IF((SELECT COUNT(*) FROM grupos_solidarios WHERE id_solicitud=s.id AND status='Aceptada')=(SELECT COUNT(*) FROM grupos_solidarios WHERE id_solicitud=s.id) AND (SELECT COUNT(*) FROM grupos_solidarios WHERE id_solicitud=s.id)>0,'Aceptada','En Revisión')='$this->status_asignado')");
		}
		if(isset($this->integrantes) and $this->integrantes!=''){
			$criteria->addCondition("IF(s.id_grupo_cliente IS NULL,0,(SELECT COUNT(id) FROM grupos_solidarios WHERE id_solicitud=s.id)) LIKE '%".$this->integrantes."%'");
		}
		if(isset($this->section) and $this->section!=''){//status asignado puede ser tambien status calculado
			if($this->section=="promocion"){
				//$criteria->addCondition("s.status_calculado='Registrada' AND s.status_asignado IS NULL");
			}elseif($this->section=="analisis"){
				//$criteria->addCondition("s.status_asignado IN('Aceptada','Pagado')");
			}elseif($this->section=="seguimiento"){
				$criteria->addCondition("(s.status_asignado IN('Aceptada','Pagado', 'Reestructurado','Incobrable','Quebrantado') OR (s.id_grupo_cliente IS NOT NULL AND NOT EXISTS (SELECT * FROM grupos_solidarios WHERE id_solicitud=s.id AND status<>'Aceptada')))");
			}elseif($this->section=="pagos"){//Solo aceptada y pagado porque solo con esos estatus se puede seguir pagando
				$criteria->addCondition("s.status_asignado IN('Aceptada','Pagado') AND s.fecha_disposicion IS NOT NULL AND s.fecha_disposicion<>0");
			}elseif($this->section=="clientes_0"){
				$criteria->addCondition("((s.status_asignado NOT IN('Aceptada','Pagado', 'Reestructurado','Incobrable','Quebrantado')) OR s.status_asignado IS NULL)");
			}elseif($this->section=="clientes_1"){
				//Es el mismo filtro que seguimiento
				$criteria->addCondition("(s.status_asignado IN('Aceptada','Pagado', 'Reestructurado','Incobrable','Quebrantado') OR (s.id_grupo_cliente IS NOT NULL AND NOT EXISTS (SELECT * FROM grupos_solidarios WHERE id_solicitud=s.id AND status<>'Aceptada')))");
			}elseif($this->section=="agro"){
				$criteria->addCondition("s.id_commodities>0");
			}
		}
		if(isset($this->origen)and $this->origen!='') {

			$clientIds = $this->getIdsClients($this->origen);

			if ($this->origen=='clientes') {
				$cond1="s.id_cliente IN ($clientIds)";
				//$cond1="( s.id_cliente IN ( select id from clientes where id in (select id_cliente from solicitudes where monto_autorizado IS NOT NULL AND monto_autorizado > 0 )))";
				$criteria->addCondition($cond1);
			} elseif ($this->origen=='solicitudes') {
				$cond1="s.id_cliente NOT IN ($clientIds)";
				//$cond1="( s.id_cliente NOT IN ( select id from clientes where id in (select id_cliente from solicitudes where monto_autorizado IS NOT NULL AND monto_autorizado > 0 )))";	
				$criteria->addCondition($cond1);
			}
		}

		if(Yii::app()->user->getPerfil()=="Ejecutivo"){
			$criteria->addCondition("(id_ejecutivo0.id_usuario='".Yii::app()->user->getId()."')");
			//$criteria->addCondition("s.etapa IN (1)");

		}elseif(Yii::app()->user->getPerfil()=="Administrador de Sucursal"){
			$user=Yii::app()->user->getUserModel();
			if($user->filtro_sucursal==1 && is_null($ejecutivos)){
				$criteria->addCondition("id_cliente0.id_sucursal='".$user->id_sucursal."' OR EXISTS (SELECT id FROM clientes WHERE id_sucursal='".$user->id_sucursal."' AND id_grupo_cliente=s.id_grupo_cliente)");
			}
			$producBloqueados=ProductosBloqueoSolicitudes::model()->findAll("id_usuario = :id_usuario AND status=1",array(':id_usuario'=>Yii::app()->user->getId()));
			foreach ($producBloqueados as $key => $value) {
				$bloqueoProdarray .= $value['id_producto'].",";
			}
			$bloqueoProdarray = substr($bloqueoProdarray, 0, -1);
			if(!empty($bloqueoProdarray)){
				$criteria->addCondition("s.id_producto IN (".$bloqueoProdarray.")");
			}
		}elseif (Yii::app()->user->getPerfil()=="Analista"){
			$criteria->addCondition("s.etapa >= 2");

			$usON=Yii::app()->user->getId();
			//$permiso = StatusSolicitudes::model()->find("nombre = 'Sucursal Asignada'");
			$validaPermiso = PermisosAnalistas::model()->find('id_usuario=:usuario AND fk_permisosAnalista =:permisosAnalista',array(':usuario'=>$usON, ':permisosAnalista'=>1));
			if($validaPermiso->estado == 1){
				$saberSucursal = Usuarios::model()->find('id=:usuario',array(':usuario'=>$usON));
				$criteria->addCondition("(s.id_sucursal='".$saberSucursal->id_sucursal."')");
			}
		}elseif (Yii::app()->user->getPerfil()=="Supervisor"){
			$criteria->addCondition("(id_supervisor0.id_usuario='".Yii::app()->user->getId()."')");
			$criteria->addCondition("s.etapa IN (3,4,5)");
		}

		if(isset($this->numero_disposiciones) and $this->numero_disposiciones!=''){
			$criteria->addCondition("numero_disposiciones=".$this->numero_disposiciones."");
		}
		if(isset($this->id_activo_arrendamiento) and $this->id_activo_arrendamiento!=''){
			$criteria->addCondition("id_activo_arrendamiento=".$this->id_activo_arrendamiento."");
		}
		//checamos si el usuario tiene solicitudes bloqueadas
		if(is_null($ejecutivos)){
			$statusBloqueados=UsuariosStatusSolicitudes::model()->findAll("id_usuario = :id_usuario AND status=1",array(':id_usuario'=>Yii::app()->user->getId()));
			foreach ($statusBloqueados as $key => $value) {
				$bloqueoarray .= $value['id_status'].",";
			}
			$bloqueoarray = substr($bloqueoarray, 0, -1);
			if(!empty($bloqueoarray)){
				$criteria->addCondition("s.id_status NOT IN (".$bloqueoarray.")");
			}
		}
		//filtros extra para etapas creditos->solicitudes
		$criteria->compare('id_etapa_credito0.etapa', $this->id_etapa_credito, true);
		$criteria->compare('refutacion', $this->refutacion, true);
		$criteria->compare('fecha_ultima_refutacion', $this->fecha_ultima_refutacion, true);

		$sort=new CSort();
		$sort->defaultOrder="s.id DESC";
		$sort->attributes=array(
			'id_grupo_solicitud'=>array(
				'asc'=>'id_grupo_solicitud0.nombre ASC',
				'desc'=>'id_grupo_solicitud0.nombre DESC'
			),
			'claveCliente'=>array(
					'asc'=>'id_cliente0.clave ASC',
					'desc'=>'id_cliente0.clave DESC'
			),
			'numero_disposiciones'=>array(
					'asc'=>'numero_disposiciones ASC',
					'desc'=>'numero_disposiciones DESC'
			),
			'id_cliente'=>array(
				'asc'=>'CONCAT_WS(\' \',id_cliente0.nombre, id_cliente0.apellido_paterno, id_cliente0.apellido_materno) ASC',
				'desc'=>'CONCAT_WS(\' \',id_cliente0.nombre, id_cliente0.apellido_paterno, id_cliente0.apellido_materno) DESC'
			),
			'claveGrupoCliente'=>array(
					'asc'=>'id_grupo_cliente0.clave ASC',
					'desc'=>'id_grupo_cliente0.clave DESC'
			),
			'id_grupo_cliente'=>array(
					'asc'=>'id_grupo_cliente0.nombre ASC',
					'desc'=>'id_grupo_cliente0.nombre DESC'
			),
			'id_supervisor'=>array(
				'asc'=>"CONCAT_WS(' ',id_usuario0.nombre,id_usuario0.apellido_paterno,id_usuario0.apellido_materno) ASC",
				'desc'=>"CONCAT_WS(' ',id_usuario0.nombre,id_usuario0.apellido_paterno, id_usuario0.apellido_materno) DESC"
			),
			'idEjecutivo'=>array(
				'asc'=>"CONCAT_WS(' ',id_usuario0.nombre,id_usuario0.apellido_paterno,id_usuario0.apellido_materno) ASC",
				'desc'=>"CONCAT_WS(' ',id_usuario0.nombre,id_usuario0.apellido_paterno, id_usuario0.apellido_materno) DESC"
			),
			'id_fondeadora'=>array(
				'asc'=>"id_fondeadora0.nombre ASC",
				'desc'=>"id_fondeadora0.nombre DESC"
			),
			'id_aportes_fondeadores'=>array(
				'asc'=>"id_aportes_fondeadores1.nombre ASC",
				'desc'=>"id_aportes_fondeadores1.nombre DESC"
			),
			'id_producto'=>array(
				'asc'=>"id_producto0.nombre ASC",
				'desc'=>"id_producto0.nombre DESC"
			),
			'monto_solicitado'=>array(
				'asc'=>'IF(s.id_grupo_cliente IS NULL,s.monto_solicitado,(SELECT SUM(monto) FROM grupos_solidarios WHERE id_solicitud=s.id)) ASC',
				'desc'=>'IF(s.id_grupo_cliente IS NULL,s.monto_solicitado,(SELECT SUM(monto) FROM grupos_solidarios WHERE id_solicitud=s.id)) DESC'
			),
			'monto_autorizado'=>array(
				'asc'=>'IF(s.id_grupo_cliente IS NULL,IFNULL(s.monto_autorizado,0),(SELECT SUM(IFNULL(monto,0)) FROM grupos_solidarios WHERE id_solicitud=s.id AND status=\'Aceptada\')) ASC',
				'desc'=>'IF(s.id_grupo_cliente IS NULL,IFNULL(s.monto_autorizado,0),(SELECT SUM(IFNULL(monto,0)) FROM grupos_solidarios WHERE id_solicitud=s.id AND status=\'Aceptada\')) DESC'
			),
			'montoDispuesto'=>array(
				'asc'=>"IF(s.id_grupo_cliente IS NULL,IFNULL((SELECT saldo_inicial FROM amortizaciones WHERE id_solicitud=s.id AND numero_amortizacion IN(0,1) LIMIT 1),0)+IFNULL((SELECT SUM(IFNULL(importe,0)) FROM disposiciones WHERE id_solicitud=s.id),0),(SELECT SUM(IFNULL(monto,0)) FROM grupos_solidarios WHERE id_solicitud=s.id AND status='Aceptada' AND s.status_asignado IN('Aceptada','Pagado','Reestructurado','Incobrable','Quebrantado'))) ASC",
				'desc'=>"IF(s.id_grupo_cliente IS NULL,IFNULL((SELECT saldo_inicial FROM amortizaciones WHERE id_solicitud=s.id AND numero_amortizacion IN(0,1) LIMIT 1),0)+IFNULL((SELECT SUM(IFNULL(importe,0)) FROM disposiciones WHERE id_solicitud=s.id),0),(SELECT SUM(IFNULL(monto,0)) FROM grupos_solidarios WHERE id_solicitud=s.id AND status='Aceptada' AND s.status_asignado IN('Aceptada','Pagado','Reestructurado','Incobrable','Quebrantado'))) DESC"
			),
			'integrantes'=>array(
				'asc'=>'IF(s.id_grupo_cliente IS NULL,0,(SELECT COUNT(id) FROM grupos_solidarios WHERE id_solicitud=s.id)) ASC',
				'desc'=>'IF(s.id_grupo_cliente IS NULL,0,(SELECT COUNT(ud) FROM grupos_solidarios WHERE id_solicitud=s.id)) DESC'
			),
			'autorizador'=>array(
				'asc'=>"(SELECT GROUP_CONCAT(CONCAT_WS(' ',sau.nombre,sau.apellido_paterno,sau.apellido_materno)) FROM solicitudes_aceptaciones sa LEFT JOIN usuarios sau ON(sa.id_solicitud=sau.id) WHERE sa.status='Aceptada' AND sa.id_solicitud=s.id GROUP BY sa.id_solicitud) ASC",
				'desc'=>"(SELECT GROUP_CONCAT(CONCAT_WS(' ',sau.nombre,sau.apellido_paterno,sau.apellido_materno)) FROM solicitudes_aceptaciones sa LEFT JOIN usuarios sau ON(sa.id_solicitud=sau.id) WHERE sa.status='Aceptada' AND sa.id_solicitud=s.id GROUP BY sa.id_solicitud) DESC",
			),
			'segmentacion'=>array(
				'asc'=>'segmentacion.nombre asc',
				'desc'=>'segmentacion.nombre desc'
			),
			"*"
		);
		$provider= new CActiveDataProvider ( $this, array (
				'criteria' => $criteria,
				'sort'=>$sort,
				'pagination'=>array(
					'pageSize'=>25,),
		) );
		Yii::app()->session['dataProviderSolicitudes']=$provider;

		return $provider;
	}

    public function RealizarPagos($pagos=null,$cola=null, $masivo = false){
        preg_match("/dbname=([^;]*)/", Yii::app()->db->connectionString, $matches);
        $database= "[".$matches[1]."]";
        preg_match("/dbname=([^;]*)/", Yii::app()->db->connectionString, $matches);
        $database= "[".$matches[1]."]";
	    $pagar=false;
		$saldo_rest=0;
        if(isset($pagos) && !empty($pagos)){
			try{
            $empresa=Empresa::model()->find();
            $usuario=Usuarios::model()->find("usuario='super'");
            $id_usuario=$usuario->id;
            $nombreUsuario=$usuario->fullname;
            if(isset($pagos[0]["disposicion"]) && $pagos[0]["disposicion"]!=""){
                $disposicion=Disposiciones::model()->find("id_solicitud='".$this->id."' AND clave='".$pagos[0]["disposicion"]."'");
            }
            if(isset($disposicion)){
                $amortizacionSeleccionada=Amortizaciones::model()->find("id_disposicion='".$disposicion->id."' AND status='Calculado'");
            }else{
                $amortizacionSeleccionada=Amortizaciones::model()->find("id_solicitud='".$this->id."' AND status='Calculado'");
            }
            if(!isset($amortizacionSeleccionada) || empty($amortizacionSeleccionada)){
                return false;
            }
            if(isset($disposicion)){
                $amortizaciones=$amortizacionSeleccionada->getAmortizacionesDisposicion($disposicion);
            }else{
                $amortizaciones=$amortizacionSeleccionada->getAmortizaciones($this);
            }
            $finalizado=false;
            foreach ($amortizaciones as $key =>$amortizacion){
                if($finalizado){
                    break;
                }
                if($amortizacion['id']==$amortizacionSeleccionada->id){
                    $pagar=true;
                    $puntero=0;
                }
                $liquidada=false;
                $montoInicial=$monto;
                while($liquidada==false){
                    if($pagar){
						if(!isset($pagos[$puntero]['id'])){
                            $pagos[$puntero]['id']=0;
                        }
                        $pago=$pagos[$puntero];
                        $tipo=$pago['tipo'];
                        $monto=$pago['monto'];
                        $fecha=$pago['fecha'];
						$fechacobro=$pago['fechacobro'];
                        $canal=$pago['canal'];
						$statuspago=$pago['status_pago'];
						$statuspago = trim(strtoupper($statuspago));
                        $instrumento=$pago['instrumento'];
                        $monto=round($monto,2);
                        $instrumentoMonetario=InstrumentosMonetarios::model()->find("descripcion='".$instrumento."'");
                        $canalCobranza=CanalesCobranza::model()->find("clave='".$canal."'");
                        $especial=false;
                        //PE-001 pago con distribución de conceptos agrupados por vencimiento totales (ENSUEÑO)
                        //PE-002 pago con excedente abonado a seguro (VALORACREDIT)
                        if($canal == "CN-001" || $canal == "CN-002" || $canal == "CN-003" || $canal == "CN-004" || $canal == "AC-001" || $canal == "AC-002" || $canal == "PE-001" || $canal == "PE-002" ||
                        $canal == "CN-011" || $canal == "CN-012" || $canal == "CN-013" || $canal == "CN-014" || $canal == "PA-001" || $canal == "PA-002" || $canal == "PA-003"){
                            $especial=true;
                        }
                        if(is_null($instrumentoMonetario) || empty($instrumentoMonetario)){
                            $result=array(
                                'id'=>$pago['id'],
                                'mensaje'=>'El instrumento monetario '.$pago['instrumento'].' no existe',
                            );
                            if($cola!="openpay"){
                                return $result;
                            }else{
                                return false;
                            }
                        }
                        if((is_null($canalCobranza) || empty($canalCobranza)) && !$especial){
                            $result=array(
                                'id'=>$pago['id'],
                                'mensaje'=>'El canal '.$pago['canal'].' no existe',
								'estado'=>'noexiste',
								'nombreCanal'=>$pago['canal'],

                            );
                            if($cola!="openpay"){
                                return $result;
                            }else{
                                return false;
                            }
                        }
                        if(isset($disposicion)){
                            $amortizacionesAux=$amortizacionSeleccionada->getAmortizacionesDisposicion($disposicion, array(), array(), array(), $monto, $amortizacionSeleccionada->id, $fecha);
                        }else{
                            $amortizacionesAux=$amortizacionSeleccionada->getAmortizaciones($this, array(), array(), array(), $monto, $amortizacionSeleccionada->id, $fecha);
                        }
                        $set=true;
						//Evaluar el fecha primer incumplimiento 
						$evaluar_fechaPrimerIncumplimiento = false;
						if(!is_null($this->fechaPrimerIncumplimiento)){
							$evaluar_fechaPrimerIncumplimiento = true;
						}
                        foreach($amortizacionesAux as $keyAux => $amortizacionAux){
                            $amortizaciones[$keyAux]=$amortizacionAux;
                            $key=$keyAux;
                            if($amortizacionAux['status']=="Calculado" && $set){
                                $amortizacion=$amortizacionAux;
                                $set=false;
                            }
                        }
                        $liquidacionAnterior=false;
						$am = new Amortizaciones();
						$test_amt = $am->getamortizaciones($this);
						$saldo_rest=0;
						foreach($test_amt as $row_a){
							if($row_a["pago_realizado"]<$row_a["pago_total"] && $row_a["pago_restante"]>0
							&& $row_a["status"]=="Calculado"){
								$saldo_rest += ($row_a["pago_restante"]);
							}
						}
						if($saldo_rest>0){
							if($tipo=="Individual"){
								$referenciaOperacion="t".round(microtime(true) * 1000);
								if ($especial) {
									$solicitud = $this;
									$seleccionado = Amortizaciones::model()->find(array('condition' => 't.status=:status AND id_solicitud=:solicitud', 'order' => 'fecha_amortizacion ASC', 'params' => array(':status' => 'Calculado', ':solicitud' => $solicitud->id)));
									//$amortizaciones = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
									$empresa = Empresa::model()->find();
									$fecha_ultimo_pago = 0;
									/*foreach ($amortizaciones as $amortizacion) {
										if ($seleccionado->id == $amortizacion['id']) {
											$amortizacion_condonar = $amortizacion;
										}
										if ($amortizacion['status'] == "Registrado") {
											$fecha_ultimo_pago = strtotime($amortizacion["fecha_pago"]);
										}
									}*/
									$amortizacion_condonar = $amortizacion;
									$fecha_ultimo_pago = strtotime($amortizacion["fecha_pago"]);
									$amortizacion = $amortizacion_condonar;
									if (is_null($fecha_ultimo_pago)) {
										$fecha_ultimo_pago = 0;
									}
									if($fecha==''|| $fecha==' '){
										$fecha = $amortizacion['fecha_amortizacion'];
									}
									$fecha = strtotime($fecha);
									$errores_detalles="";
									$referenciaOperacion = "t" . round(microtime(true) * 1000);
									if (($monto > 0 || ($canal == "CN-011" || $canal == "CN-012" || $canal == "CN-013" || $canal == "CN-014")) && $fecha >= $fecha_ultimo_pago && (!is_null($solicitud) && !empty($solicitud)) && (!is_null($amortizacion) && !empty($amortizacion) && $amortizacion['id'] > 0)) {
										$fecha = date('Y-m-d', $fecha);
										if ($amortizacion['numero_amortizacion'] == 0) {
											if ($amortizacion['pago_restante'] == 0) {
												$seleccionado->fecha_pago = $fecha;
												$seleccionado->referencia_operacion="u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$seleccionado->status = 'Registrado';
												$success = $seleccionado->save(false);
												if ($success) {
													$operacion = new Operaciones();
													$descripcion_operacion = "Se pago completamente la amortización 0 de la solicitud $solicitud->clave el cual fue un monto de " . number_format(0, 2, ".", ",");
													$operacion->id_cliente = $solicitud->id_cliente;
													$operacion->id_instrumento_monetario = 1;//Una operacion de descuento no tiene instrumento
													$operacion->id_solicitud = $solicitud->id;
													$operacion->monto = 0;
													$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
													$operacion->id_canal = 1;//Una operacion de descuento no tiene canal
													$operacion->referencia = null;
													$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
													$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
													$operacion->fecha = $fecha;
													$operacion->usuario=$id_usuario;
													$operacion->nombre_usuario=$nombreUsuario;
													$operacion->descripcion = $descripcion_operacion;
													$operacion->id_tipo_operacion = 0;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
													$operacion->id_localidad_pld = $empresa->id_localidad_pld;
													$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
													$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
													$operacion->folio = $ultimo_folio + 1;
													$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
													$operacion->monto_garantia_solicitud = 0;
													$success = $operacion->save(false);
													$fecha_ultimo_pago =$seleccionado->fecha_pago;
													$seleccionado = Amortizaciones::model()->find(array('condition' => 't.status=:status AND id_solicitud=:solicitud', 'order' => 'fecha_amortizacion ASC', 'params' => array(':status' => 'Calculado', ':solicitud' => $solicitud->id)));
													//$amortizaciones = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
													$fecha_ultimo_pago = 0;
													/*foreach ($amortizaciones as $amortizacion) {
														if ($seleccionado->id == $amortizacion['id']) {
															$amortizacion_condonar = $amortizacion;
														}
														if ($amortizacion['status'] == "Registrado") {
															$fecha_ultimo_pago = strtotime($amortizacion["fecha_pago"]);
														}else{
															break;
														}
													}*/
													$amortizacion_condonar = $amortizaciones[$key+1];
													$amortizacion = $amortizacion_condonar;
													$referenciaOperacion = "t" . round(microtime(true) * 1000);
												}
											}
										}
										$parcialidadesCondonar = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion='" . $amortizacion['id'] . "'");
										$parcial_capital = 0;
										$parcial_interes = 0;
										$parcial_comisiones = 0;
										$parcial_moratorios = 0;
										foreach ($parcialidadesCondonar as $parcialidad) {
											$parcial_capital = $parcial_capital + $parcialidad->pago_capital;
											$parcial_interes = $parcial_interes + $parcialidad->pago_interes;
											$parcial_comisiones = $parcial_comisiones + $parcialidad->pago_comisiones;
											$parcial_moratorios = $parcial_moratorios + $parcialidad->pago_moratorios;
										}
										$registrar=false;
										$exceso=false;
										$amortizacionesExtras=array();
										$monto_operacion=0;
										$descripcion_operacion="";
										$amortizacionesPagarEsp=array();
										switch ($canal) {
											case "CN-001"://condonación de comisiones
												if ($monto > ($amortizacion['pago_comisiones'] - $parcial_comisiones)) {
													$montoE=$monto-($amortizacion['pago_comisiones']-$parcial_comisiones);
													$montoExceso=$montoE;
													foreach ($amortizaciones as $amortizacionA){
														if($amortizacionA['id']==$amortizacion['id']){
															$registrar=true;
														}else if($registrar){
															if($fecha>=$amortizacionA['fecha_amortizacion'] && $montoE>0){
																if($montoE>($amortizacionA['pago_comisiones']-$amortizacionA['parcial_comisiones'])){
																	$montoParcial=$amortizacionA['pago_comisiones']-$amortizacionA['parcial_comisiones'];
																	$montoE-=$montoParcial;
																}else{
																	$montoParcial=$montoE;
																	$montoE=0;
																}
																$amortizacionesExtras[]=array(
																	'id'=>$amortizacionA['id'],
																	'parcialidad'=>$montoParcial
																);
																$exceso=true;
															}
														}
													}
													if($exceso){
														$monto = $amortizacion['pago_comisiones'] - $parcial_comisiones;
														$exceso=false;
													}else{
														$monto = $amortizacion['pago_comisiones'] - $parcial_comisiones;
													}
												}
												if ($monto <= 0 && $montoExceso <= 0) {
													continue;
												}
												$parcialidad = new ParcialidadesAmortizaciones();
												$parcialidad->id_amortizacion = $amortizacion["id"];
												$parcialidad->fecha_pago = $fecha;
												$parcialidad->status = "Condonado";
												$parcialidad->pago_moratorios = 0;
												$parcialidad->pago_comisiones = $monto;
												$parcialidad->pago_interes = 0;
												$parcialidad->pago_capital = 0;
												$parcialidad->iva_capital = 0;
												$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
												$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
												$parcialidad->pago_con_garantia = $parcialidad->pago_total;
												$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
												$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$success = $parcialidad->save(false);
												$descripcion_operacion.= "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente a las comisiones el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
												$monto_operacion+=$parcialidad->pago_total;
												if(isset($amortizacionesExtras) && !empty($amortizacionesExtras)){
													foreach ($amortizacionesExtras as $amortizacionE){
														foreach ($amortizaciones as $amortizacionPE){
															if($amortizacionPE['id']==$amortizacionE['id']){
																$amortizacion=$amortizacionPE;
															}
														}
														$parcialidad = new ParcialidadesAmortizaciones();
														$parcialidad->id_amortizacion = $amortizacionE["id"];
														$parcialidad->fecha_pago = $fecha;
														$parcialidad->status = "Condonado";
														$parcialidad->pago_moratorios = 0;
														$parcialidad->pago_comisiones = $amortizacionE['parcialidad'];
														$parcialidad->pago_interes = 0;
														$parcialidad->pago_capital = 0;
														$parcialidad->iva_capital = 0;
														$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
														$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
														$parcialidad->pago_con_garantia = $parcialidad->pago_total;
														$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
														$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$success = $parcialidad->save(false);
														if ($success) {
															if ($success) {
																$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
																if (is_null($ultima_operacion) || empty($ultima_operacion)) {
																	$ultimo_folio = 0;
																} else {
																	$ultimo_folio = $ultima_operacion->folio;
																}
																$descripcion_operacion.= "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente a las comisiones el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
																$monto_operacion+=$parcialidad->pago_total;
																if (!$success) {
																	//No se pudo generar la operación de la condonación de comisiones
																} else {
																	$monto_condonado += $parcialidad->pago_total;
																	$successed++;
																}
															} else {
																//No se pudieron generar las polizas de la condonación de comisiones
															}
														} else {
															//No se pudo generar la condonacion de comisiones
														}
													}
												}
												if ($success) {
													if ($success) {
														$operacion = new Operaciones();
														$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
														if (is_null($ultima_operacion) || empty($ultima_operacion)) {
															$ultimo_folio = 0;
														} else {
															$ultimo_folio = $ultima_operacion->folio;
														}
														$operacion = new Operaciones();
														$operacion->id_cliente = $solicitud->id_cliente;
														$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
														$operacion->id_solicitud = $solicitud->id;
														$operacion->monto = $monto_operacion;
														$operacion->id_moneda = null;//Una operacion de descuento no tiene moneda
														$operacion->id_canal = null;//Una operacion de descuento no tiene canal
														$operacion->referencia = null;
														$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
														$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
														$operacion->fecha = $fecha;
														$operacion->usuario=$id_usuario;
														$operacion->nombre_usuario=$nombreUsuario;
														$operacion->descripcion = $descripcion_operacion;
														$operacion->id_tipo_operacion = 0;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
														$operacion->id_localidad_pld = $empresa->id_localidad_pld;
														$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
														$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$operacion->folio = $ultimo_folio + 1;
														$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
														$operacion->monto_garantia_solicitud = 0;
														$success = $operacion->save();
														if (!$success) {
															//No se pudo generar la operación de la condonación de comisiones
														} else {
															$monto_condonado += $monto;
															$successed++;
														}
													} else {
														//No se pudieron generar las polizas de la condonación de comisiones
													}
												} else {
													//No se pudo generar la condonacion de comisiones
												}
												break;
											case "CN-011"://condonación de comisiones
												$monto_condonar=$amortizacion['pago_comisiones']-$amortizacion['parcial_comisiones'];
												if($monto_condonar<=0){
													$errores_detalles .= "Condonación {$canal} fallida ({$this->clave},{$fecha},{$monto}}), No hay comisiones vencidas a condonar. <br>";
													$failed++;
													continue;
												}
												$parcialidad = new ParcialidadesAmortizaciones();
												$parcialidad->id_amortizacion = $amortizacion["id"];
												$parcialidad->fecha_pago = $fecha;
												$parcialidad->status = "Condonado";
												$parcialidad->pago_moratorios = 0;
												$parcialidad->pago_comisiones = $monto_condonar;
												$parcialidad->pago_interes = 0;
												$parcialidad->pago_capital = 0;
												$parcialidad->iva_capital = 0;
												$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
												$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
												$parcialidad->pago_con_garantia = $parcialidad->pago_total;
												$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
												$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$success = $parcialidad->save(false);
												$monto_operacion=$parcialidad->pago_total;
												if ($success) {
													if ($success) {
														$operacion = new Operaciones();
														$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
														if (is_null($ultima_operacion) || empty($ultima_operacion)) {
															$ultimo_folio = 0;
														} else {
															$ultimo_folio = $ultima_operacion->folio;
														}
														$operacion = new Operaciones();
														$descripcion_operacion = "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente a las comisiones el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").".";
														$operacion->id_cliente = $solicitud->id_cliente;
														$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
														$operacion->id_solicitud = $solicitud->id;
														$operacion->monto = $monto_operacion;
														$operacion->id_moneda = null;//Una operacion de descuento no tiene moneda
														$operacion->id_canal = null;//Una operacion de descuento no tiene canal
														$operacion->referencia = null;
														$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
														$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
														$operacion->fecha = $fecha;
														$operacion->usuario=$id_usuario;
														$operacion->nombre_usuario=$nombreUsuario;
														$operacion->descripcion = $descripcion_operacion;
														$operacion->id_tipo_operacion = 0;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
														$operacion->id_localidad_pld = $empresa->id_localidad_pld;
														$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
														$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$operacion->folio = $ultimo_folio + 1;
														$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
														$operacion->monto_garantia_solicitud = 0;
														$success = $operacion->save();
														if (!$success) {
															//No se pudo generar la operación de la condonación de comisiones
														} else {
															$monto_condonado += $monto;
															$successed++;
														}
													} else {
														//No se pudieron generar las polizas de la condonación de comisiones
													}
												} else {
													//No se pudo generar la condonacion de comisiones
												}
												break;
											case "CN-002"://condonación de moratorios
												if ($monto > ($amortizacion['pago_moratorios'] - $parcial_moratorios)) {
													$montoE=$monto-($amortizacion['pago_moratorios']-$parcial_moratorios);
													$montoExceso=$montoE;
													foreach ($amortizaciones as $amortizacionA){
														if($amortizacionA['id']==$amortizacion['id']){
															$registrar=true;
														}else if($registrar){
															if($fecha>=$amortizacionA['fecha_amortizacion'] && $montoE>0){
																if($montoE>($amortizacionA['pago_moratorios']-$amortizacionA['parcial_moratorios'])){
																	$montoParcial=$amortizacionA['pago_moratorios']-$amortizacionA['parcial_moratorios'];
																	$montoE-=$montoParcial;
																}else{
																	$montoParcial=$montoE;
																	$montoE=0;
																}
																$amortizacionesExtras[]=array(
																	'id'=>$amortizacionA['id'],
																	'parcialidad'=>$montoParcial
																);
																$exceso=true;
															}
														}
													}
													if($exceso){
														$monto = $amortizacion['pago_moratorios'] - $parcial_moratorios;
														$exceso=false;
													}else{
														$monto = $amortizacion['pago_moratorios'] - $parcial_moratorios;
													}
												}
												if ($monto <= 0 && $montoExceso <= 0) {
													continue;
												}
												$parcialidad = new ParcialidadesAmortizaciones();
												$parcialidad->id_amortizacion = $amortizacion["id"];
												$parcialidad->fecha_pago = $fecha;
												$parcialidad->status = "Condonado";
												$parcialidad->pago_moratorios = $monto;
												$parcialidad->pago_comisiones = 0;
												$parcialidad->pago_interes = 0;
												$parcialidad->pago_capital = 0;
												$parcialidad->iva_capital = 0;
												$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
												$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
												$parcialidad->pago_con_garantia = $parcialidad->pago_total;
												$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
												$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$success = $parcialidad->save(false);
												$descripcion_operacion.= "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente a los intereses moratorios el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
												$monto_operacion+=$parcialidad->pago_total;
												if(isset($amortizacionesExtras) && !empty($amortizacionesExtras)){
													foreach ($amortizacionesExtras as $amortizacionE){
														foreach ($amortizaciones as $amortizacionPE){
															if($amortizacionPE['id']==$amortizacionE['id']){
																$amortizacion=$amortizacionPE;
															}
														}
														$parcialidad = new ParcialidadesAmortizaciones();
														$parcialidad->id_amortizacion = $amortizacionE["id"];
														$parcialidad->fecha_pago = $fecha;
														$parcialidad->status = "Condonado";
														$parcialidad->pago_moratorios = $amortizacionE['parcialidad'];
														$parcialidad->pago_comisiones = 0;
														$parcialidad->pago_interes = 0;
														$parcialidad->pago_capital = 0;
														$parcialidad->iva_capital = 0;
														$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
														$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
														$parcialidad->pago_con_garantia = $parcialidad->pago_total;
														$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
														$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$success = $parcialidad->save(false);
														if ($success) {
															if ($success) {
																$descripcion_operacion.= "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente a los intereses moratorios el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
																$monto_operacion+=$parcialidad->pago_total;
															} else {
																//No se pudieron generar las polizas de la condonación de comisiones
															}
														} else {
															//No se pudo generar la condonacion de comisiones
														}
													}
												}
												if ($success) {
													if ($success) {
														$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
														if (is_null($ultima_operacion) || empty($ultima_operacion)) {
															$ultimo_folio = 0;
														} else {
															$ultimo_folio = $ultima_operacion->folio;
														}
														$operacion = new Operaciones();
														$operacion->id_cliente = $solicitud->id_cliente;
														$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
														$operacion->id_solicitud = $solicitud->id;
														$operacion->monto = $monto_operacion;
														$operacion->id_moneda = null;//Una operacion de descuento no tiene moneda
														$operacion->id_canal = null;//Una operacion de descuento no tiene canal
														$operacion->referencia = null;
														$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
														$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
														$operacion->fecha = $fecha;
														$operacion->usuario=$id_usuario;
														$operacion->nombre_usuario=$nombreUsuario;
														$operacion->descripcion = $descripcion_operacion;
														$operacion->id_tipo_operacion = 0;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
														$operacion->id_localidad_pld = $empresa->id_localidad_pld;
														$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
														$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$operacion->folio = $ultimo_folio + 1;
														$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
														$operacion->monto_garantia_solicitud = 0;
														$success = $operacion->save();
														if (!$success) {
															//No se pudo generar la operación de la condonación de interes moratorio
														} else {
															$monto_condonado += $monto;
															$successed++;
														}
													} else {
														//No se pudieron generar las polizas de la condonación de interes moratorio
													}
												} else {
													//No se pudo generar la condonacion de interes moratorio
												}
												break;
											case "CN-012"://condonación de moratorios
												$monto_condonar=$amortizacion['pago_moratorios']-$amortizacion['parcial_moratorios'];
												if($monto_condonar<=0){
													//$errores_detalles .= "Condonación {$canal} fallida ({$this->clave},{$fecha},{$monto}}), No hay moratorios vencidos a condonar. <br>";
													//$failed++;
													continue;
												}
												$parcialidad = new ParcialidadesAmortizaciones();
												$parcialidad->id_amortizacion = $amortizacion["id"];
												$parcialidad->fecha_pago = $fecha;
												$parcialidad->status = "Condonado";
												$parcialidad->pago_moratorios = $monto_condonar;
												$parcialidad->pago_comisiones = 0;
												$parcialidad->pago_interes = 0;
												$parcialidad->pago_capital = 0;
												$parcialidad->iva_capital = 0;
												$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
												$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
												$parcialidad->pago_con_garantia = $parcialidad->pago_total;
												$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
												$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$success = $parcialidad->save(false);
												$monto_operacion=$parcialidad->pago_total;
												if ($success) {
													if ($success) {
														$operacion = new Operaciones();
														$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
														if (is_null($ultima_operacion) || empty($ultima_operacion)) {
															$ultimo_folio = 0;
														} else {
															$ultimo_folio = $ultima_operacion->folio;
														}
														$operacion = new Operaciones();
														$descripcion_operacion = "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente a los intereses moratorios el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").".";
														$operacion->id_cliente = $solicitud->id_cliente;
														$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
														$operacion->id_solicitud = $solicitud->id;
														$operacion->monto = $monto_operacion;
														$operacion->id_moneda = null;//Una operacion de descuento no tiene moneda
														$operacion->id_canal = null;//Una operacion de descuento no tiene canal
														$operacion->referencia = null;
														$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
														$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
														$operacion->fecha = $fecha;
														$operacion->usuario=$id_usuario;
														$operacion->nombre_usuario=$nombreUsuario;
														$operacion->descripcion = $descripcion_operacion;
														$operacion->id_tipo_operacion = 0;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
														$operacion->id_localidad_pld = $empresa->id_localidad_pld;
														$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
														$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$operacion->folio = $ultimo_folio + 1;
														$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
														$operacion->monto_garantia_solicitud = 0;
														$success = $operacion->save();
														if (!$success) {
															//No se pudo generar la operación de la condonación de comisiones
														} else {
															$monto_condonado += $monto;
															$successed++;
														}
													} else {
														//No se pudieron generar las polizas de la condonación de comisiones
													}
												} else {
													//No se pudo generar la condonacion de comisiones
												}
												break;
											case "CN-003"://condonación de interes ordinario
												if ($monto > ($amortizacion['pago_interes'] - $parcial_interes)) {
													$montoE=$monto-($amortizacion['pago_interes']-$parcial_moratorios);
													$montoExceso=$montoE;
													foreach ($amortizaciones as $amortizacionA){
														if($amortizacionA['id']==$amortizacion['id']){
															$registrar=true;
														}else if($registrar){
															if($fecha>=$amortizacionA['fecha_amortizacion'] && $montoE>0){
																if($montoE>($amortizacionA['pago_interes']-$amortizacionA['parcial_interes'])){
																	$montoParcial=$amortizacionA['pago_interes']-$amortizacionA['parcial_interes'];
																	$montoE-=$montoParcial;
																}else{
																	$montoParcial=$montoE;
																	$montoE=0;
																}
																$amortizacionesExtras[]=array(
																	'id'=>$amortizacionA['id'],
																	'parcialidad'=>$montoParcial
																);
																$exceso=true;
															}
														}
													}
													if($exceso){
														$monto = $amortizacion['pago_interes'] - $parcial_interes;
														$exceso=false;
													}else{
														$monto = $amortizacion['pago_interes'] - $parcial_interes;
													}
												}
												if ($monto <= 0 && $montoExceso <= 0) {
													continue;
												}
												$parcialidad = new ParcialidadesAmortizaciones();
												$parcialidad->id_amortizacion = $amortizacion["id"];
												$parcialidad->fecha_pago = $fecha;
												$parcialidad->status = "Condonado";
												$parcialidad->pago_moratorios = 0;
												$parcialidad->pago_comisiones = 0;
												$parcialidad->pago_interes = $monto;
												$parcialidad->pago_capital = 0;
												$parcialidad->iva_capital = 0;
												$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
												$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
												$parcialidad->pago_con_garantia = $parcialidad->pago_total;
												$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
												$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$success = $parcialidad->save(false);
												$descripcion_operacion.= "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente a los intereses ordinarios el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
												$monto_operacion+=$parcialidad->pago_total;
												if(isset($amortizacionesExtras) && !empty($amortizacionesExtras)){
													foreach ($amortizacionesExtras as $amortizacionE){
														foreach ($amortizaciones as $amortizacionPE){
															if($amortizacionPE['id']==$amortizacionE['id']){
																$amortizacion=$amortizacionPE;
															}
														}
														$parcialidad = new ParcialidadesAmortizaciones();
														$parcialidad->id_amortizacion = $amortizacionE["id"];
														$parcialidad->fecha_pago = $fecha;
														$parcialidad->status = "Condonado";
														$parcialidad->pago_moratorios = 0;
														$parcialidad->pago_comisiones = 0;
														$parcialidad->pago_interes = $amortizacionE['parcialidad'];
														$parcialidad->pago_capital = 0;
														$parcialidad->iva_capital = 0;
														$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
														$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
														$parcialidad->pago_con_garantia = $parcialidad->pago_total;
														$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
														$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$success = $parcialidad->save(false);
														if ($success) {
															if ($success) {
																$descripcion_operacion.= "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente a los intereses ordinarios el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
																$monto_operacion+=$parcialidad->pago_total;
															} else {
																//No se pudieron generar las polizas de la condonación de comisiones
															}
														} else {
															//No se pudo generar la condonacion de comisiones
														}
													}
												}
												if ($success) {
													if ($success) {
														$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
														if (is_null($ultima_operacion) || empty($ultima_operacion)) {
															$ultimo_folio = 0;
														} else {
															$ultimo_folio = $ultima_operacion->folio;
														}
														$operacion = new Operaciones();
														$operacion->id_cliente = $solicitud->id_cliente;
														$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
														$operacion->id_solicitud = $solicitud->id;
														$operacion->monto = $monto_operacion;
														$operacion->id_moneda = null;//Una operacion de descuento no tiene moneda
														$operacion->id_canal = null;//Una operacion de descuento no tiene canal
														$operacion->referencia = null;
														$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
														$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
														$operacion->fecha = $fecha;
														$operacion->usuario=$id_usuario;
														$operacion->nombre_usuario=$nombreUsuario;
														$operacion->descripcion = $descripcion_operacion;
														$operacion->id_tipo_operacion = 0;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
														$operacion->id_localidad_pld = $empresa->id_localidad_pld;
														$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
														$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$operacion->folio = $ultimo_folio + 1;
														$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
														$operacion->monto_garantia_solicitud = 0;
														$success = $operacion->save();
														if (!$success) {
															//No se pudo generar la operación de la condonación de interes ordinario
														} else {
															$monto_condonado += $monto;
															$successed++;
														}
													} else {
														//No se pudieron generar las polizas de la condonación de interes ordinario
													}
												} else {
													//No se pudo generar la condonacion de interes ordinario
												}
												break;
											case "CN-013"://condonación de interes ordinario
												$monto_condonar=$amortizacion['pago_interes']-$amortizacion['parcial_interes'];
												if($monto_condonar<=0){
													$errores_detalles = "Condonación {$canal} fallida ({$this->clave},{$fecha},{$monto}}), No hay intereses vencidos a condonar. <br>";
													$failed++;
													continue;
												}
												$liquidar=false;
												if($monto_condonar==$amortizacion['pago_interes']){
													$liquidar=true;
												}
												$parcialidad = new ParcialidadesAmortizaciones();
												$parcialidad->id_amortizacion = $amortizacion["id"];
												$parcialidad->fecha_pago = $fecha;
												$parcialidad->status = "Condonado";
												$parcialidad->pago_moratorios = 0;
												$parcialidad->pago_comisiones = 0;
												$parcialidad->pago_interes = $monto_condonar;
												$parcialidad->pago_capital = 0;
												$parcialidad->iva_capital = 0;
												$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
												$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
												$parcialidad->pago_con_garantia = $parcialidad->pago_total;
												$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
												$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$success = $parcialidad->save(false);
												$monto_operacion=$parcialidad->pago_total;
												if ($success) {
													if ($success) {
														$operacion = new Operaciones();
														$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
														if (is_null($ultima_operacion) || empty($ultima_operacion)) {
															$ultimo_folio = 0;
														} else {
															$ultimo_folio = $ultima_operacion->folio;
														}
														$operacion = new Operaciones();
														$descripcion_operacion = "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente a los intereses ordinarios el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").".";
														$operacion->id_cliente = $solicitud->id_cliente;
														$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
														$operacion->id_solicitud = $solicitud->id;
														$operacion->monto = $monto_operacion;
														$operacion->id_moneda = null;//Una operacion de descuento no tiene moneda
														$operacion->id_canal = null;//Una operacion de descuento no tiene canal
														$operacion->referencia = null;
														$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
														$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
														$operacion->fecha = $fecha;
														$operacion->usuario=$id_usuario;
														$operacion->nombre_usuario=$nombreUsuario;
														$operacion->descripcion = $descripcion_operacion;
														$operacion->id_tipo_operacion = 0;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
														$operacion->id_localidad_pld = $empresa->id_localidad_pld;
														$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
														$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$operacion->folio = $ultimo_folio + 1;
														$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
														$operacion->monto_garantia_solicitud = 0;
														$success = $operacion->save();
														if (!$success) {
															//No se pudo generar la operación de la condonación de comisiones
														} else {
															if($liquidar){
																$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
																foreach ($amortizacionesAUX as $amortizacionC) {
																	if ($seleccionado->id == $amortizacionC['id']) {
																		$amortizacionAUX = $amortizacionC;
																	}
																}
																$amortizacion = $amortizacionAUX;
																$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																//Arrendamiento
																$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																//----------------------
																$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																//End Arrendamiento
																$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"];
																$modelLiquidado->pago_restante = 0;
																$modelLiquidado->pago_total = $amortizacion["pago_total"];
																$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																$modelLiquidado->fecha_pago = $fecha;
																$modelLiquidado->status = "Registrado";
																$success = $modelLiquidado->save(false);
															}
															$monto_condonado += $monto;
															$successed++;
														}
													} else {
														//No se pudieron generar las polizas de la condonación de comisiones
													}
												} else {
													//No se pudo generar la condonacion de comisiones
												}
												break;
											case "CN-004"://condonación de capital
												$liquidado = false;
												if ($monto > ($amortizacion['pago_capital'] - $parcial_capital)) {
													$montoE=$monto-($amortizacion['pago_capital']-$parcial_moratorios);
													$montoExceso=$montoE;
													foreach ($amortizaciones as $amortizacionA){
														if($amortizacionA['id']==$amortizacion['id']){
															$registrar=true;
														}else if($registrar){
															if($fecha>=$amortizacionA['fecha_amortizacion'] && $montoE>0){
																if($montoE>($amortizacionA['pago_capital']-$amortizacionA['parcial_capital'])){
																	$montoParcial=$amortizacionA['pago_capital']-$amortizacionA['parcial_capital'];
																	$montoE-=$montoParcial;
																}else{
																	$montoParcial=$montoE;
																	$montoE=0;
																}
																$amortizacionesExtras[]=array(
																	'id'=>$amortizacionA['id'],
																	'parcialidad'=>$montoParcial
																);
																$exceso=true;
															}
														}
													}
													if($exceso){
														$monto = $amortizacion['pago_capital'] - $parcial_capital;
														$exceso=false;
													}else{
														$monto = $amortizacion['pago_capital'] - $parcial_capital;
													}
													$liquidado = true;
												} elseif ($monto == ($amortizacion['pago_capital'] - $parcial_capital)) {
													$liquidado = true;
												}
												if ($monto <= 0 && $montoExceso <= 0) {
													continue;
												}
												$parcialidad = new ParcialidadesAmortizaciones();
												$parcialidad->id_amortizacion = $amortizacion["id"];
												$parcialidad->fecha_pago = $fecha;
												$parcialidad->status = "Condonado";
												$parcialidad->pago_moratorios = 0;
												$parcialidad->pago_comisiones = 0;
												$parcialidad->pago_interes = 0;
												$parcialidad->pago_capital = $monto;
												$parcialidad->iva_capital = 0;
												$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
												$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
												$parcialidad->pago_con_garantia = $parcialidad->pago_total;
												$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
												$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$success = $parcialidad->save(false);
												if ($success) {
													if ($success) {
														$descripcion_operacion.= "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente al capital el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
														$monto_operacion+=$parcialidad->pago_total;
														if (!$success) {
															//No se pudo generar la operación de la condonación de capital
														} else {
															$monto_condonado += $monto;
															$successed++;
															if ($liquidado) {
																$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
																foreach ($amortizacionesAUX as $amortizacion) {
																	if ($seleccionado->id == $amortizacion['id']) {
																		$amortizacionAUX = $amortizacion;
																	}
																}
																$amortizacion = $amortizacionAUX;
																$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																$montoInteresDescontado = 0;
																if ($amortizacion["pago_interes"] - $parcial_interes > 0) {
																	$modelLiquidado->pago_interes = $parcial_interes;
																	$montoInteresDescontado = $amortizacion["pago_interes"] - $parcial_interes;
																} else {
																	$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																}
																$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																//Arrendamiento
																$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																//----------------------
																$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																//End Arrendamiento
																$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"];
																$modelLiquidado->pago_restante = 0;
																$modelLiquidado->pago_total = $amortizacion["pago_total"] - $montoInteresDescontado;
																$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																$modelLiquidado->fecha_pago = $fecha;
																$modelLiquidado->status = "Registrado";
																$success = $modelLiquidado->save(false);
															}
														}
													} else {
														//No se pudieron generar las polizas de la condonación de capital
													}
												} else {
													//No se pudo generar la condonacion de capital
												}
												if(isset($amortizacionesExtras) && !empty($amortizacionesExtras)){
													foreach ($amortizacionesExtras as $amortizacionE){
														foreach ($amortizaciones as $amortizacionPE){
															if($amortizacionPE['id']==$amortizacionE['id']){
																$amortizacion=$amortizacionPE;
															}
														}
														$pagoRestante=$amortizacion['pago_restante'];
														$parcialidad = new ParcialidadesAmortizaciones();
														$parcialidad->id_amortizacion = $amortizacionE["id"];
														$parcialidad->fecha_pago = $fecha;
														$parcialidad->status = "Condonado";
														$parcialidad->pago_moratorios = 0;
														$parcialidad->pago_comisiones = 0;
														$parcialidad->pago_interes = 0;
														$parcialidad->pago_capital = $amortizacionE['parcialidad'];
														$parcialidad->iva_capital = 0;
														$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
														$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
														$parcialidad->pago_con_garantia = $parcialidad->pago_total;
														$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
														$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
														$success = $parcialidad->save(false);
														if ($success) {
															if ($success) {
																$descripcion_operacion.= "Se condono una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave correspondiente al capital el cual fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
																$monto_operacion+=$parcialidad->pago_total;
																if (!$success) {
																	//No se pudo generar la operación de la condonación de comisiones
																} else {
																	$monto_condonado += $parcialidad->pago_total;
																	$successed++;
																	if($pagoRestante==$amortizacionE['parcialidad']){
																		$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
																		foreach ($amortizacionesAUX as $amortizacion) {
																			if ($seleccionado->id == $amortizacion['id']) {
																				$amortizacionAUX = $amortizacion;
																			}
																		}
																		$amortizacion = $amortizacionAUX;
																		$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																		$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																		$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																		$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																		$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																		$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																		$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																		$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																		$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																		$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																		$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																		$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																		$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																		//Arrendamiento
																		$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																		$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																		$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																		$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																		$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																		$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																		$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																		//----------------------
																		$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																		$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																		$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																		$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																		$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																		$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																		$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																		//End Arrendamiento
																		$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"];
																		$modelLiquidado->pago_restante = 0;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago = $fecha;
																		$modelLiquidado->status = "Registrado";
																		$success = $modelLiquidado->save(false);
																	}
																}
															} else {
																//No se pudieron generar las polizas de la condonación de comisiones
															}
														} else {
															//No se pudo generar la condonacion de comisiones
														}
													}
												}
												if($success){
													$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
													if (is_null($ultima_operacion) || empty($ultima_operacion)) {
														$ultimo_folio = 0;
													} else {
														$ultimo_folio = $ultima_operacion->folio;
													}
													$operacion = new Operaciones();
													$operacion->id_cliente = $solicitud->id_cliente;
													$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
													$operacion->id_solicitud = $solicitud->id;
													$operacion->monto = $monto_operacion;
													$operacion->id_moneda = null;//Una operacion de descuento no tiene moneda
													$operacion->id_canal = null;//Una operacion de descuento no tiene canal
													$operacion->referencia = null;
													$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
													$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
													$operacion->fecha = $fecha;
													$operacion->usuario=$id_usuario;
													$operacion->nombre_usuario=$nombreUsuario;
													$operacion->descripcion = $descripcion_operacion;
													$operacion->id_tipo_operacion = 0;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
													$operacion->id_localidad_pld = $empresa->id_localidad_pld;
													$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
													$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
													$operacion->folio = $ultimo_folio + 1;
													$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
													$operacion->monto_garantia_solicitud = 0;
													$success = $operacion->save();
												}
												break;
											case "AC-001":
												if ($monto <= 0) {
													continue;
												}
												$sobrepago = false;
												$liquidado = false;
												$incobrable = false;
												$parcial = false;
												unset($idamorprocesadas);
												//segmentacion de pagos
												if ($monto > ($amortizacion['pago_restante'])) {
													$liquidado = true;
													$sobrepago = true;
													if($amortizacion['pago_realizado']>0){
														$parcial = true;
													}
												} elseif ($monto == ($amortizacion['pago_restante'])){
													if($amortizacion['pago_realizado']>0){
														$parcial = true;
													}
													$liquidado=true;
												} elseif ($amortizacion['pago_interes']-$parcial_interes>0) {
													if (strtotime($amortizacion['fecha_amortizacion']) > strtotime($fecha)) {
														if($monto > ($amortizacion['pago_restante']-($amortizacion['pago_interes']-$parcial_interes))){
															$sobrepago = true;
															$parcial = true;
														}else{
															$parcial = true;
														}
													} else {
														$parcial = true;
													}
												} else {
													$parcial = true;
												}
												$pago_comisiones=0;
												$pago_moratorios=0;
												$pago_interes=0;
												$pago_capital=0;
												$capital_original=0;
												$monto_pago=$monto;
												//aplicacion de pagos
												if (!$incobrable) {
													if ($sobrepago) {
														$capital_original=$amortizacion['pago_capital'];
														if($monto_pago>0){
															$pago_comisiones=$amortizacion['pago_comisiones']-$parcial_comisiones;
															$monto_pago=$monto_pago-$pago_comisiones;
														}
														if($monto_pago>0){
															$pago_moratorios=$amortizacion['pago_moratorios']-$parcial_moratorios;
															$monto_pago=$monto_pago-$pago_moratorios;
														}
														if($monto_pago>0){
															if(!$liquidado){
																$pago_interes=0;
															}else{
																$pago_interes=$amortizacion['pago_interes']-$parcial_interes;
																$monto_pago=$monto_pago-$pago_interes;
															}
														}
														if($monto_pago>0){
															if($monto_pago>($amortizacion['pago_capital']-$parcial_capital)){
																$pago_capital=$monto_pago;
																$monto_pago=0;
															}else{
																$pago_capital=$amortizacion['pago_capital']-$parcial_capital;
																$monto_pago=$monto_pago-$pago_capital;
															}
														}
														//pago a capital con exceso
														if($liquidado){
															if($parcial){
																$parcialidad = new ParcialidadesAmortizaciones();
																$parcialidad->id_amortizacion = $amortizacion["id"];
																$parcialidad->fecha_pago = $fecha;
																$parcialidad->status = "Registrado";
																$parcialidad->pago_moratorios = $pago_moratorios;
																$parcialidad->pago_comisiones = $pago_comisiones;
																$parcialidad->pago_interes = $pago_interes;
																$parcialidad->pago_capital = $pago_capital;
																$parcialidad->iva_capital = 0;
																$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
																$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
																$parcialidad->pago_con_garantia = $parcialidad->pago_total;
																$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
																$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
																$success = $parcialidad->save(false);
																if ($success) {
																	$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
																	if (is_null($ultima_operacion) || empty($ultima_operacion)) {
																		$ultimo_folio = 0;
																	} else {
																		$ultimo_folio = $ultima_operacion->folio;
																	}
																	$operacion = new Operaciones();
																	$descripcion_operacion = "Se pago el saldo restante de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",");
																	$operacion->id_cliente = $solicitud->id_cliente;
																	$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
																	$operacion->id_solicitud = $solicitud->id;
																	$operacion->monto = $monto;
																	$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
																	$operacion->id_canal = null;//Una operacion de descuento no tiene canal
																	$operacion->referencia = null;
																	$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
																	$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
																	$operacion->fecha = $fecha;
																	$operacion->usuario=$id_usuario;
																	$operacion->nombre_usuario=$nombreUsuario;
																	$operacion->descripcion = $descripcion_operacion;
																	$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
																	$operacion->id_localidad_pld = $empresa->id_localidad_pld;
																	$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
																	$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
																	$operacion->folio = $ultimo_folio + 1;
																	$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
																	$operacion->monto_garantia_solicitud = 0;
																	$success = $operacion->save();
																	if (!$success) {
																		//No se pudo generar la operación de la condonación de capital
																	} else {
																		$successed++;
																		$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
																		foreach ($amortizacionesAUX as $amortizacion) {
																			if ($seleccionado->id == $amortizacion['id']) {
																				$amortizacionAUX = $amortizacion;
																			}
																		}
																		$amortizacion = $amortizacionAUX;
																		$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																		$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																		$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																		$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																		$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																		$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																		$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																		$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																		$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																		$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																		$modelLiquidado->pago_capital = $amortizacion["pago_capital"]+(($pago_capital-($capital_original-$parcial_interes))<0?0:$pago_capital-($capital_original-$parcial_interes));
																		$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																		$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																		//Arrendamiento
																		$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																		$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																		$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																		$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																		$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																		$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																		$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																		//----------------------
																		$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																		$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																		$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																		$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																		$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																		$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																		$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																		//End Arrendamiento
																		$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$monto;
																		$modelLiquidado->pago_restante = 0;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"]+(($pago_capital-($capital_original-$parcial_interes))<0?0:$pago_capital-($capital_original-$parcial_interes));;
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"]-(($pago_capital-($capital_original-$parcial_interes))<0?0:$pago_capital-($capital_original-$parcial_interes));
																		$modelLiquidado->fecha_pago = $fecha;
																		$modelLiquidado->status = "Registrado";
																		$success = $modelLiquidado->save(false);
																	}
																} else {
																	//No se pudo generar la condonacion de capital
																}
															}else{
																$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
																if (is_null($ultima_operacion) || empty($ultima_operacion)) {
																	$ultimo_folio = 0;
																} else {
																	$ultimo_folio = $ultima_operacion->folio;
																}
																$operacion = new Operaciones();
																$descripcion_operacion = "Se pago completamente la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($monto, 2, ".", ",");
																$operacion->id_cliente = $solicitud->id_cliente;
																$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
																$operacion->id_solicitud = $solicitud->id;
																$operacion->monto = $monto;
																$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
																$operacion->id_canal = null;//Una operacion de descuento no tiene canal
																$operacion->referencia = null;
																$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
																$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
																$operacion->fecha = $fecha;
																$operacion->usuario=$id_usuario;
																$operacion->nombre_usuario=$nombreUsuario;
																$operacion->descripcion = $descripcion_operacion;
																$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
																$operacion->id_localidad_pld = $empresa->id_localidad_pld;
																$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
																$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
																$operacion->folio = $ultimo_folio + 1;
																$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
																$operacion->monto_garantia_solicitud = 0;
																$success = $operacion->save();
																if (!$success) {
																	//No se pudo generar la operación de la condonación de capital
																} else {
																	$successed++;
																	$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
																	foreach ($amortizacionesAUX as $amortizacion) {
																		if ($seleccionado->id == $amortizacion['id']) {
																			$amortizacionAUX = $amortizacion;
																		}
																	}
																	$amortizacion = $amortizacionAUX;
																	$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																	$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																	$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																	$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																	$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																	$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																	$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																	$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																	$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																	$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																	$modelLiquidado->pago_capital = $amortizacion["pago_capital"]+(($pago_capital-($capital_original-$parcial_interes))<0?0:$pago_capital-($capital_original-$parcial_interes));
																	$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																	$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																	//Arrendamiento
																	$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																	$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																	$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																	$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																	$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																	$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																	$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																	//----------------------
																	$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																	$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																	$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																	$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																	$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																	$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																	$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																	//End Arrendamiento
																	$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$monto;
																	$modelLiquidado->pago_restante = 0;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"]+(($pago_capital-($capital_original-$parcial_interes))<0?0:$pago_capital-($capital_original-$parcial_interes));;
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"]-(($pago_capital-($capital_original-$parcial_interes))<0?0:$pago_capital-($capital_original-$parcial_interes));
																	$modelLiquidado->fecha_pago = $fecha;
																	$modelLiquidado->status = "Registrado";
																	$success = $modelLiquidado->save(false);
																}
															}
														} elseif ($parcial){
															$parcialidad = new ParcialidadesAmortizaciones();
															$parcialidad->id_amortizacion = $amortizacion["id"];
															$parcialidad->fecha_pago = $fecha;
															$parcialidad->status = "Registrado";
															$parcialidad->pago_moratorios = $pago_moratorios;
															$parcialidad->pago_comisiones = $pago_comisiones;
															$parcialidad->pago_interes = $pago_interes;
															$parcialidad->pago_capital = $pago_capital;
															$parcialidad->iva_capital = 0;
															$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
															$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
															$parcialidad->pago_con_garantia = $parcialidad->pago_total;
															$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
															$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
															$success = $parcialidad->save(false);
															if ($success) {
																$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
																if (is_null($ultima_operacion) || empty($ultima_operacion)) {
																	$ultimo_folio = 0;
																} else {
																	$ultimo_folio = $ultima_operacion->folio;
																}
																$operacion = new Operaciones();
																$descripcion_operacion = "Se pago una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",");
																$operacion->id_cliente = $solicitud->id_cliente;
																$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
																$operacion->id_solicitud = $solicitud->id;
																$operacion->monto = $monto;
																$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
																$operacion->id_canal = null;//Una operacion de descuento no tiene canal
																$operacion->referencia = null;
																$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
																$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
																$operacion->fecha = $fecha;
																$operacion->usuario=$id_usuario;
																$operacion->nombre_usuario=$nombreUsuario;
																$operacion->descripcion = $descripcion_operacion;
																$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
																$operacion->id_localidad_pld = $empresa->id_localidad_pld;
																$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
																$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
																$operacion->folio = $ultimo_folio + 1;
																$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
																$operacion->monto_garantia_solicitud = 0;
																$success = $operacion->save(false);
	
																if (!$success) {
																	//No se pudo generar la operación de la condonación de capital
																} else {
																	$successed++;
																	$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
																	foreach ($amortizacionesAUX as $amortizacion) {
																		if ($seleccionado->id == $amortizacion['id']) {
																			$amortizacionAUX = $amortizacion;
																		}
																	}
																	$amortizacion = $amortizacionAUX;
																	$modelCapital = Amortizaciones::model()->findByPk($amortizacion["id"]);
																	$modelCapital->referencia_operacion=$operacion->referencia_operacion;
																	$modelCapital->pago_capital = $amortizacion["pago_capital"] + (($pago_capital - ($capital_original - $parcial_interes)) < 0 ? 0 : $pago_capital - ($capital_original - $parcial_interes));
																	$modelCapital->pago_realizado = $amortizacion["pago_realizado"]+$monto;
																	$modelCapital->pago_total = $amortizacion["pago_total"] + (($pago_capital - ($capital_original - $parcial_interes)) < 0 ? 0 : $pago_capital - ($capital_original - $parcial_interes));;
																	$modelCapital->saldo_final = $amortizacion["saldo_final"] - (($pago_capital - ($capital_original - $parcial_interes)) < 0 ? 0 : $pago_capital - ($capital_original - $parcial_interes));
																	$success = $modelCapital->save(false);
																}
															} else {
																//No se pudo generar la condonacion de capital
															}
														}
													} else {
														if($monto_pago>$amortizacion['pago_restante']){
															$monto_pago=$amortizacion['pago_restante'];
															$monto=$monto_pago;
														}
														if($monto_pago>0){
															$pago_comisiones=$amortizacion['pago_comisiones']-$parcial_comisiones;
															$monto_pago=$monto_pago-$pago_comisiones;
														}
														if($monto_pago>0){
															$pago_moratorios=$amortizacion['pago_moratorios']-$parcial_moratorios;
															$monto_pago=$monto_pago-$pago_moratorios;
														}
														if($monto_pago>0){
															if(!$liquidado){
																$pago_interes=0;
															}else{
																$pago_interes=$amortizacion['pago_interes']-$parcial_interes;
																$monto_pago=$monto_pago-$pago_interes;
															}
														}
														if($monto_pago>0){
															$pago_capital=$amortizacion['pago_capital']-$parcial_capital;
															$monto_pago=0;
														}
														if ($liquidado) {
															if($parcial){
																$parcialidad = new ParcialidadesAmortizaciones();
																$parcialidad->id_amortizacion = $amortizacion["id"];
																$parcialidad->fecha_pago = $fecha;
																$parcialidad->status = "Registrado";
																$parcialidad->pago_moratorios = $pago_moratorios;
																$parcialidad->pago_comisiones = $pago_comisiones;
																$parcialidad->pago_interes = $pago_interes;
																$parcialidad->pago_capital = $pago_capital;
																$parcialidad->iva_capital = 0;
																$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
																$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
																$parcialidad->pago_con_garantia = $parcialidad->pago_total;
																$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
																$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
																$success = $parcialidad->save(false);
																if ($success) {
																	$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
																	if (is_null($ultima_operacion) || empty($ultima_operacion)) {
																		$ultimo_folio = 0;
																	} else {
																		$ultimo_folio = $ultima_operacion->folio;
																	}
																	$operacion = new Operaciones();
																	$descripcion_operacion = "Se pago el saldo restante de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",");
																	$operacion->id_cliente = $solicitud->id_cliente;
																	$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
																	$operacion->id_solicitud = $solicitud->id;
																	$operacion->monto = $monto;
																	$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
																	$operacion->id_canal = null;//Una operacion de descuento no tiene canal
																	$operacion->referencia = null;
																	$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
																	$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
																	$operacion->fecha = $fecha;
																	$operacion->usuario=$id_usuario;
																	$operacion->nombre_usuario=$nombreUsuario;
																	$operacion->descripcion = $descripcion_operacion;
																	$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
																	$operacion->id_localidad_pld = $empresa->id_localidad_pld;
																	$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
																	$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
																	$operacion->folio = $ultimo_folio + 1;
																	$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
																	$operacion->monto_garantia_solicitud = 0;
																	$success = $operacion->save();
																	if (!$success) {
																		//No se pudo generar la operación de la condonación de capital
																	} else {
																		$successed++;
																		$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
																		foreach ($amortizacionesAUX as $amortizacion) {
																			if ($seleccionado->id == $amortizacion['id']) {
																				$amortizacionAUX = $amortizacion;
																			}
																		}
																		$amortizacion = $amortizacionAUX;
																		$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																		$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																		$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																		$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																		$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																		$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																		$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																		$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																		$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																		$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																		$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																		$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																		$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																		//Arrendamiento
																		$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																		$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																		$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																		$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																		$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																		$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																		$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																		//----------------------
																		$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																		$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																		$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																		$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																		$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																		$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																		$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																		//End Arrendamiento
																		$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"];
																		$modelLiquidado->pago_restante = 0;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago = $fecha;
																		$modelLiquidado->status = "Registrado";
																		$success = $modelLiquidado->save(false);
																	}
																} else {
																	//No se pudo generar la condonacion de capital
																}
															}else{
																$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
																if (is_null($ultima_operacion) || empty($ultima_operacion)) {
																	$ultimo_folio = 0;
																} else {
																	$ultimo_folio = $ultima_operacion->folio;
																}
																$operacion = new Operaciones();
																$descripcion_operacion = "Se pago completamente la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($monto, 2, ".", ",");
																$operacion->id_cliente = $solicitud->id_cliente;
																$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
																$operacion->id_solicitud = $solicitud->id;
																$operacion->monto = $monto;
																$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
																$operacion->id_canal = null;//Una operacion de descuento no tiene canal
																$operacion->referencia = null;
																$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
																$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
																$operacion->fecha = $fecha;
																$operacion->usuario=$id_usuario;
																$operacion->nombre_usuario=$nombreUsuario;
																$operacion->descripcion = $descripcion_operacion;
																$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
																$operacion->id_localidad_pld = $empresa->id_localidad_pld;
																$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
																$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
																$operacion->folio = $ultimo_folio + 1;
																$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
																$operacion->monto_garantia_solicitud = 0;
																$success = $operacion->save();
																if (!$success) {
																	//No se pudo generar la operación de la condonación de capital
																} else {
																	$successed++;
																	$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
																	foreach ($amortizacionesAUX as $amortizacion) {
																		if ($seleccionado->id == $amortizacion['id']) {
																			$amortizacionAUX = $amortizacion;
																		}
																	}
																	$amortizacion = $amortizacionAUX;
																	$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																	$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																	$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																	$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																	$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																	$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																	$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																	$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																	$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																	$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																	$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																	$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																	$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																	//Arrendamiento
																	$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																	$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																	$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																	$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																	$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																	$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																	$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																	//----------------------
																	$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																	$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																	$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																	$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																	$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																	$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																	$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																	//End Arrendamiento
																	$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"];
																	$modelLiquidado->pago_restante = 0;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"];
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																	$modelLiquidado->fecha_pago = $fecha;
																	$modelLiquidado->status = "Registrado";
																	$success = $modelLiquidado->save(false);
																}
															}
														} elseif ($parcial) {
															$parcialidad = new ParcialidadesAmortizaciones();
															$parcialidad->id_amortizacion = $amortizacion["id"];
															$parcialidad->fecha_pago = $fecha;
															$parcialidad->status = "Registrado";
															$parcialidad->pago_moratorios = $pago_moratorios;
															$parcialidad->pago_comisiones = $pago_comisiones;
															$parcialidad->pago_interes = $pago_interes;
															$parcialidad->pago_capital = $pago_capital;
															$parcialidad->iva_capital = 0;
															$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"] - $monto_condonado;
															$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
															$parcialidad->pago_con_garantia = $parcialidad->pago_total;
															$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
															$parcialidad->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
															$success = $parcialidad->save(false);
															if ($success) {
																$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
																if (is_null($ultima_operacion) || empty($ultima_operacion)) {
																	$ultimo_folio = 0;
																} else {
																	$ultimo_folio = $ultima_operacion->folio;
																}
																$operacion = new Operaciones();
																$descripcion_operacion = "Se pago una parte de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",");
																$operacion->id_cliente = $solicitud->id_cliente;
																$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
																$operacion->id_solicitud = $solicitud->id;
																$operacion->monto = $monto;
																$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
																$operacion->id_canal = null;//Una operacion de descuento no tiene canal
																$operacion->referencia = null;
																$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
																$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
																$operacion->fecha = $fecha;
																$operacion->usuario=$id_usuario;
																$operacion->nombre_usuario=$nombreUsuario;
																$operacion->descripcion = $descripcion_operacion;
																$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
																$operacion->id_localidad_pld = $empresa->id_localidad_pld;
																$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
																$operacion->referencia_operacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
																$operacion->folio = $ultimo_folio + 1;
																$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
																$operacion->monto_garantia_solicitud = 0;
																$success = $operacion->save();
															}
														}
													}
												} else {
													//no se pueden realizar pagos a capital si se deben moratorios o comisiones
												}
												break;
											case "AC-002":
												if ($monto <= 0) {
													continue;
												}
												if($monto>=($amortizacion['saldo_capital']-$amortizacion['parcial_capital'])){
													$monto=($amortizacion['saldo_capital']-$amortizacion['parcial_capital']);
												}
												$liquidado = false;
												$parcial = false;
												//segmentacion de pagos
												if ($monto >= ($amortizacion['pago_restante'])){
													if($amortizacion['pago_realizado']>0){
														$parcial = true;
													}
													$interesRestante=$amortizacion['pago_interes']-$amortizacion['parcial_interes'];
													$moraRestante=$amortizacion['pago_moratorios']-$amortizacion['parcial_moratorios'];
													$comisionRestante=$amortizacion['pago_comisiones']-$amortizacion['parcial_comisiones'];
													if($interesRestante+$moraRestante+$comisionRestante>0){
														$parcial=true;
													}else{
														$liquidado=true;
													}
												} else {
													$parcial = true;
												}
												//aplicacion de pagos
												$pago_capital=$monto;
												$referenciaOperacion="u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												if($parcial){
													$parcialidad = new ParcialidadesAmortizaciones();
													$parcialidad->id_amortizacion = $amortizacion["id"];
													$parcialidad->fecha_pago = $fecha;
													$parcialidad->status = "Registrado";
													$parcialidad->pago_moratorios = 0;
													$parcialidad->pago_comisiones = 0;
													$parcialidad->pago_interes = 0;
													$parcialidad->pago_capital = $pago_capital;
													$parcialidad->iva_capital = 0;
													$parcialidad->saldo_inicial = $amortizacion["saldo_inicial"] + $amortizacion["iva_capital"] + $amortizacion["interes_generado"] + $amortizacion["iva_interes_generado"] - $amortizacion["descuento_interes_generado"] + $amortizacion["pago_moratorios"] + $amortizacion["pago_comisiones"];
													$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
													$parcialidad->pago_con_garantia = $parcialidad->pago_total;
													$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
													$parcialidad->referencia_operacion = $referenciaOperacion;
													$success = $parcialidad->save(false);
													if ($liquidado) {
														$descripcion_operacion = "Se pago el saldo restante de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",");
													} else {
														$descripcion_operacion .= "Se pago una parte de la amortización " . $amortizacionActual['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",");
													}
												}else{
													$descripcion_operacion .= "Se pago completamente la amortización " . $amortizacionActual['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($monto, 2, ".", ",");
												}
												if($liquidado){
													if($amortizacion['parcial_capital']>0){
														$montoTotal=$monto+$amortizacion['parcial_capital'];
													}
													$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion['id']);
													$modelLiquidado->referencia_operacion=$referenciaOperacion;
													$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
													$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
													$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
													$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
													$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
													$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
													$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
													$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
													$modelLiquidado->pago_capital = $montoTotal;
													$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
													$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
													//Arrendamiento
													$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
													$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
													$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
													$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
													$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
													$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
													$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
													//----------------------
													$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
													$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
													$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
													$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
													$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
													$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
													$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
													//End Arrendamiento
													$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
													$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$monto;
													$modelLiquidado->pago_restante = 0;
													$modelLiquidado->pago_total = $amortizacion["pago_total"];
													$modelLiquidado->saldo_final = $amortizacion["saldo_final"]-($montoTotal-$amortizacion['pago_capital']);
													$modelLiquidado->fecha_pago = $fecha;
													$modelLiquidado->status = "Registrado";
													$success = $modelLiquidado->save(false);
													$liquidada=true;
												}
												$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
												if (is_null($ultima_operacion) || empty($ultima_operacion)) {
													$ultimo_folio = 0;
												} else {
													$ultimo_folio = $ultima_operacion->folio;
												}
												$operacion = new Operaciones();
												$operacion->id_cliente = $solicitud->id_cliente;
												$operacion->id_instrumento_monetario = $instrumentoMonetario->id;//Una operacion de descuento no tiene instrumento
												$operacion->id_solicitud = $solicitud->id;
												$operacion->monto = $monto;
												$operacion->id_moneda = $solicitud->id_moneda;//Una operacion de descuento no tiene moneda
												$operacion->id_canal = null;//Una operacion de descuento no tiene canal
												$operacion->referencia = $referenciaOperacion;
												$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
												$operacion->monto_mxn = 0;//Una operacion de descuento no requiere el dato de monto mxn
												$operacion->fecha = $fecha;
												$operacion->usuario=$id_usuario;
												$operacion->nombre_usuario=$nombreUsuario;
												$operacion->descripcion = $descripcion_operacion;
												$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
												$operacion->id_localidad_pld = $empresa->id_localidad_pld;
												$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
												$operacion->referencia_operacion = $referenciaOperacion;
												$operacion->folio = $ultimo_folio + 1;
												$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
												$operacion->monto_garantia_solicitud = 0;
												$success = $operacion->save();
												$monto=0;
												break;
											case "PE-001":
												if ($monto <= 0) {
													continue;
												}
												$amortizacionesPagoEsp = Amortizaciones::model()->getAmortizaciones($solicitud, array(), array(), array(), $monto, $seleccionado->id, $fecha);
												$registrar=false;
												$montoAux=$monto;
												foreach ($amortizacionesPagoEsp as $amortizacionPE){
													if ($seleccionado->id == $amortizacionPE['id']) {
														$amortizacionesPagarEsp[] = $amortizacionPE;
														$montoAux-=$amortizacionPE['pago_restante'];
														$registrar=true;
													}elseif($registrar){
														$fechaAmortizacionE=date('Y-m-d',strtotime($amortizacionPE['fecha_amortizacion']));
														if(strtotime($fecha)>=strtotime($fechaAmortizacionE)){
															$amortizacionesPagarEsp[] = $amortizacionPE;
															$montoAux-=$amortizacionPE['pago_restante'];
														}else{
															$registrar=false;
															break;
														}
													}
												}
												$amortizacionesPagar2=array();
												if($montoAux>0){
													foreach ($amortizacionesPagoEsp as $amortizacionPE){
														if(in_array($amortizacionPE,$amortizacionesPagarEsp) ){
															continue;
														}
														if($amortizacionPE['status']=='Calculado'){
															$amortizacionesPagar2[] = $amortizacionPE;
															$montoAux-=$amortizacionPE['pago_restante'];
															if($montoAux<0){
																break;
															}
														}
													}
												}
												$operacionesAR=array();
												$j=1;
												foreach ($amortizacionesPagarEsp as $amortizacionP){
													$operacionesAR[1][$j]['id']=$amortizacionP['id'];
													$operacionesAR[1][$j]['amortizacion']=$amortizacionP['numero_amortizacion'];
													$operacionesAR[1][$j]['monto']=$amortizacionP['pago_comisiones']-$amortizacionP['parcial_comisiones'];
													$operacionesAR[1][$j]['pago']=$amortizacionP['pago_comisiones']-$amortizacionP['parcial_comisiones'];
													$operacionesAR[1][$j]['realizado']=$amortizacionP['pago_realizado'];
													$operacionesAR[1][$j]['status']='Registrar';
													$operacionesAR[2][$j]['id']=$amortizacionP['id'];
													$operacionesAR[2][$j]['amortizacion']=$amortizacionP['numero_amortizacion'];
													$operacionesAR[2][$j]['monto']=$amortizacionP['pago_moratorios']-$amortizacionP['parcial_moratorios'];
													$operacionesAR[2][$j]['pago']=$amortizacionP['pago_moratorios']-$amortizacionP['parcial_moratorios'];
													$operacionesAR[2][$j]['realizado']=$amortizacionP['pago_realizado'];
													$operacionesAR[2][$j]['status']='Registrar';
													$operacionesAR[3][$j]['id']=$amortizacionP['id'];
													$operacionesAR[3][$j]['amortizacion']=$amortizacionP['numero_amortizacion'];
													$operacionesAR[3][$j]['monto']=$amortizacionP['pago_interes']-$amortizacionP['parcial_interes'];
													$operacionesAR[3][$j]['pago']=$amortizacionP['pago_interes']-$amortizacionP['parcial_interes'];
													$operacionesAR[3][$j]['realizado']=$amortizacionP['pago_realizado'];
													$operacionesAR[3][$j]['status']='Registrar';
													$operacionesAR[4][$j]['id']=$amortizacionP['id'];
													$operacionesAR[4][$j]['amortizacion']=$amortizacionP['numero_amortizacion'];
													$operacionesAR[4][$j]['monto']=$amortizacionP['pago_capital']-$amortizacionP['parcial_capital'];
													$operacionesAR[4][$j]['pago']=$amortizacionP['pago_capital']-$amortizacionP['parcial_capital'];
													$operacionesAR[4][$j]['realizado']=$amortizacionP['pago_realizado'];
													$operacionesAR[4][$j]['status']='Registrar';
													$j++;
												}
												$amortizacionesList=array();
												$liquidacionParcial=false;
												foreach ($operacionesAR as $keyC => $concepto){
													foreach ($concepto as $keyP => $pago){
														if(!isset($amortizacionesList[$pago['id']])){
															$amortizacionesList[$pago['id']]['status']='Parcial';
														}
														if($monto>0){
															if($monto>=$pago['pago']){
																if($keyC==4){
																	$amortizacionesList[$pago['id']]['status']='Liquidada';
																	if($pago['realizado']>0){
																		$liquidacionParcial=true;
																	}
																}
																$amortizacionesList[$pago['id']][$keyC]=$pago['pago'];
																$monto-=$pago['pago'];
															}else{
																$operacionesAR[$keyC][$keyP]['pago']=$monto;
																$amortizacionesList[$pago['id']][$keyC]=$monto;
																$monto=0;
															}
														}else{
															$operacionesAR[$keyC][$keyP]['pago']=0;
															if($keyC==1){
																$amortizacionesList[$pago['id']][$keyC]=0;
																$amortizacionesList[$pago['id']]['status']='No pagada';
															}
														}
													}
												}
												$montoAux=0;
												if($monto>0){
													$montoAux=$monto;
													$monto=0;
												}
												$referenciaOperacion = "t" . round(microtime(true) * 1000);
												$referenciaOperacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$descripcion_operacion="";
												foreach ($amortizacionesList as $amortizacionL => $dataL) {
													if($dataL['status']=='No pagada'){
														continue;
													}
													foreach ($amortizacionesPagarEsp as $amortizacionP){
														if($amortizacionP['id']==$amortizacionL){
															$amortizacionActual=$amortizacionP;
														}
													}
													if($dataL['status']=='Parcial'){
														$parcialidad = new ParcialidadesAmortizaciones();
														$parcialidad->id_amortizacion = $amortizacionL;
														$parcialidad->fecha_pago = $fecha;
														$parcialidad->status = "Registrado";
														$parcialidad->pago_moratorios = $dataL[2];
														$parcialidad->pago_comisiones = $dataL[1];
														$parcialidad->pago_interes = $dataL[3];
														$parcialidad->pago_capital = $dataL[4];
														$parcialidad->iva_capital = 0;
														$parcialidad->saldo_inicial = $amortizacionActual["saldo_inicial"] + $amortizacionActual["iva_capital"] + $amortizacionActual["interes_generado"] + $amortizacionActual["iva_interes_generado"] - $amortizacionActual["descuento_interes_generado"] + $amortizacionActual["pago_moratorios"] + $amortizacionActual["pago_comisiones"];
														$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
														$parcialidad->pago_con_garantia = $parcialidad->pago_total;
														$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
														$parcialidad->referencia_operacion = $referenciaOperacion;
														$success = $parcialidad->save(false);
														if ($success) {
															$descripcion_operacion .= "Se pago una parte de la amortización " . $amortizacionActual['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
															$monto=$monto+$parcialidad->pago_total;
														}
													}else{
														$montoAmortizacion=$dataL[2]+$dataL[1]+$dataL[3]+$dataL[4];
														$monto=$monto+$montoAmortizacion;
														$amortizacion = $amortizacionActual;
														$modelLiquidado = Amortizaciones::model()->findByPk($amortizacionL);
														if($modelLiquidado['pago_realizado']>0 || $liquidacionParcial){
															$parcialidad = new ParcialidadesAmortizaciones();
															$parcialidad->id_amortizacion = $amortizacionL;
															$parcialidad->fecha_pago = $fecha;
															$parcialidad->status = "Registrado";
															$parcialidad->pago_moratorios = $dataL[2];
															$parcialidad->pago_comisiones = $dataL[1];
															$parcialidad->pago_interes = $dataL[3];
															$parcialidad->pago_capital = $dataL[4];
															$parcialidad->iva_capital = 0;
															$parcialidad->saldo_inicial = $amortizacionActual["saldo_inicial"] + $amortizacionActual["iva_capital"] + $amortizacionActual["interes_generado"] + $amortizacionActual["iva_interes_generado"] - $amortizacionActual["descuento_interes_generado"] + $amortizacionActual["pago_moratorios"] + $amortizacionActual["pago_comisiones"];
															$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
															$parcialidad->pago_con_garantia = $parcialidad->pago_total;
															$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
															$parcialidad->referencia_operacion = $referenciaOperacion;
															$success = $parcialidad->save(false);
															$descripcion_operacion .= "Se pago el saldo restante de la amortización " . $amortizacionActual['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($montoAmortizacion, 2, ".", ",").". ";
														}else{
															$descripcion_operacion .= "Se pago completamente la amortización " . $amortizacionActual['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($montoAmortizacion, 2, ".", ",").". ";
														}
														$modelLiquidado->referencia_operacion=$referenciaOperacion;
														$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
														$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
														$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
														$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
														$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
														$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
														$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
														$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
														$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
														$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
														$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
														//Arrendamiento
														$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
														$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
														$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
														$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
														$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
														$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
														$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
														//----------------------
														$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
														$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
														$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
														$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
														$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
														$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
														$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
														//End Arrendamiento
														$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
														$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$montoAmortizacion;
														$modelLiquidado->pago_restante = 0;
														$modelLiquidado->pago_total = $amortizacion["pago_total"];
														$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
														$modelLiquidado->fecha_pago = $fecha;
														$modelLiquidado->status = "Registrado";
														$success = $modelLiquidado->save(false);
													}
												}
												if(!empty($amortizacionesPagar2)){
													foreach ($amortizacionesPagar2 as $amortizacion2){
														if($montoAux>$amortizacion2['pago_restante']){
															$montoAmortizacion=$amortizacion2['pago_restante'];
															$monto=$monto+$montoAmortizacion;
															$montoAux-=$montoAmortizacion;
															$amortizacion = $amortizacion2;
															$modelLiquidado = Amortizaciones::model()->findByPk($amortizacionL);
															if($modelLiquidado['pago_realizado']>0){
																$parcialidad = new ParcialidadesAmortizaciones();
																$parcialidad->id_amortizacion = $amortizacionL;
																$parcialidad->fecha_pago = $fecha;
																$parcialidad->status = "Registrado";
																$parcialidad->pago_moratorios = $dataL[2];
																$parcialidad->pago_comisiones = $dataL[1];
																$parcialidad->pago_interes = $dataL[3];
																$parcialidad->pago_capital = $dataL[4];
																$parcialidad->iva_capital = 0;
																$parcialidad->saldo_inicial = $amortizacionActual["saldo_inicial"] + $amortizacionActual["iva_capital"] + $amortizacionActual["interes_generado"] + $amortizacionActual["iva_interes_generado"] - $amortizacionActual["descuento_interes_generado"] + $amortizacionActual["pago_moratorios"] + $amortizacionActual["pago_comisiones"];
																$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
																$parcialidad->pago_con_garantia = $parcialidad->pago_total;
																$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
																$parcialidad->referencia_operacion = $referenciaOperacion;
																$success = $parcialidad->save(false);
																$descripcion_operacion .= "Se pago el saldo restante de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($montoAmortizacion, 2, ".", ",").". ";
															}else{
																$descripcion_operacion .= "Se pago completamente la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($montoAmortizacion, 2, ".", ",").". ";
															}
															$modelLiquidado->referencia_operacion=$referenciaOperacion;
															$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
															$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
															$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
															$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
															$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
															$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
															$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
															$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
															$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
															$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
															$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
															//Arrendamiento
															$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
															$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
															$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
															$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
															$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
															$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
															$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
															//----------------------
															$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
															$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
															$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
															$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
															$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
															$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
															$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
															//End Arrendamiento
															$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
															$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$montoAmortizacion;
															$modelLiquidado->pago_restante = 0;
															$modelLiquidado->pago_total = $amortizacion["pago_total"];
															$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
															$modelLiquidado->fecha_pago = $fecha;
															$modelLiquidado->status = "Registrado";
															$success = $modelLiquidado->save(false);
														}else if($montoAux==$amortizacion2['pago_restante']){
															$montoAmortizacion=$amortizacion2['pago_restante'];
															$monto=$monto+$montoAmortizacion;
															$montoAux=0;
															$amortizacion = $amortizacion2;
															$modelLiquidado = Amortizaciones::model()->findByPk($amortizacionL);
															if($modelLiquidado['pago_realizado']>0){
																$parcialidad = new ParcialidadesAmortizaciones();
																$parcialidad->id_amortizacion = $amortizacionL;
																$parcialidad->fecha_pago = $fecha;
																$parcialidad->status = "Registrado";
																$parcialidad->pago_moratorios = $dataL[2];
																$parcialidad->pago_comisiones = $dataL[1];
																$parcialidad->pago_interes = $dataL[3];
																$parcialidad->pago_capital = $dataL[4];
																$parcialidad->iva_capital = 0;
																$parcialidad->saldo_inicial = $amortizacionActual["saldo_inicial"] + $amortizacionActual["iva_capital"] + $amortizacionActual["interes_generado"] + $amortizacionActual["iva_interes_generado"] - $amortizacionActual["descuento_interes_generado"] + $amortizacionActual["pago_moratorios"] + $amortizacionActual["pago_comisiones"];
																$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
																$parcialidad->pago_con_garantia = $parcialidad->pago_total;
																$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
																$parcialidad->referencia_operacion = $referenciaOperacion;
																$success = $parcialidad->save(false);
																$descripcion_operacion .= "Se pago el saldo restante de la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($montoAmortizacion, 2, ".", ",").". ";
															}else{
																$descripcion_operacion .= "Se pago completamente la amortización " . $amortizacion['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($montoAmortizacion, 2, ".", ",").". ";
															}
															$modelLiquidado->referencia_operacion=$referenciaOperacion;
															$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
															$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
															$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
															$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
															$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
															$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
															$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
															$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
															$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
															$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
															$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
															//Arrendamiento
															$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
															$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
															$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
															$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
															$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
															$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
															$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
															//----------------------
															$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
															$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
															$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
															$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
															$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
															$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
															$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
															//End Arrendamiento
															$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
															$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$montoAmortizacion;
															$modelLiquidado->pago_restante = 0;
															$modelLiquidado->pago_total = $amortizacion["pago_total"];
															$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
															$modelLiquidado->fecha_pago = $fecha;
															$modelLiquidado->status = "Registrado";
															$success = $modelLiquidado->save(false);
														}else{
															if($montoAux>=($amortizacion2['pago_moratorios']-($amortizacion2['parcial_moratorios']))){
																$pagoMora=$amortizacion2['pago_moratorios']-$amortizacion2['parcial_moratorios'];
																$montoAux-=$pagoMora;
															}else{
																$pagoMora=$montoAux;
																$montoAux=0;
															}
															if($montoAux>=($amortizacion2['pago_comisiones']-($amortizacion2['parcial_comisiones']))){
																$pagoComisiones=$amortizacion2['pago_comisiones']-$amortizacion2['parcial_comisiones'];
																$montoAux-=$pagoComisiones;
															}else{
																$pagoComisiones=$montoAux;
																$montoAux=0;
															}
															if($montoAux>=($amortizacion2['pago_interes']-($amortizacion2['parcial_interes']))){
																$pagoInteres=$amortizacion2['pago_interes']-$amortizacion2['parcial_interes'];
																$montoAux-=$pagoInteres;
															}else{
																$pagoInteres=$montoAux;
																$montoAux=0;
															}
															if($montoAux>=($amortizacion2['pago_capital']-($amortizacion2['parcial_capital']))){
																$pagoCapital=$amortizacion2['pago_capital']-$amortizacion2['parcial_capital'];
																$montoAux-=$pagoCapital;
															}else{
																$pagoCapital=$montoAux;
																$montoAux=0;
															}
															$parcialidad = new ParcialidadesAmortizaciones();
															$parcialidad->id_amortizacion = $amortizacion2['id'];
															$parcialidad->fecha_pago = $fecha;
															$parcialidad->status = "Registrado";
															$parcialidad->pago_moratorios = $pagoMora;
															$parcialidad->pago_comisiones = $pagoComisiones;
															$parcialidad->pago_interes = $pagoInteres;
															$parcialidad->pago_capital = $pagoCapital;
															$parcialidad->iva_capital = 0;
															$parcialidad->saldo_inicial = $amortizacionActual["saldo_inicial"] + $amortizacionActual["iva_capital"] + $amortizacionActual["interes_generado"] + $amortizacionActual["iva_interes_generado"] - $amortizacionActual["descuento_interes_generado"] + $amortizacionActual["pago_moratorios"] + $amortizacionActual["pago_comisiones"];
															$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios;
															$parcialidad->pago_con_garantia = $parcialidad->pago_total;
															$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
															$parcialidad->referencia_operacion = $referenciaOperacion;
															$success = $parcialidad->save(false);
															if ($success) {
																$descripcion_operacion .= "Se pago una parte de la amortización " . $amortizacionActual['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
																$monto=$monto+$parcialidad->pago_total;
															}
														}
														//pagos normales
													}
												}
												$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
												if (is_null($ultima_operacion) || empty($ultima_operacion)) {
													$ultimo_folio = 0;
												} else {
													$ultimo_folio = $ultima_operacion->folio;
												}
												$operacion = new Operaciones();
												$operacion->id_cliente = $solicitud->id_cliente;
												$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
												$operacion->id_solicitud = $solicitud->id;
												$operacion->monto = $monto;
												$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
												$operacion->id_canal = null;//Una operacion de descuento no tiene canal
												$operacion->referencia = null;
												$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
												$operacion->monto_mxn = $monto;//Una operacion de descuento no requiere el dato de monto mxn
												$operacion->fecha = $fecha;
												$operacion->usuario=$id_usuario;
												$operacion->nombre_usuario=$nombreUsuario;
												$operacion->descripcion = $descripcion_operacion;
												$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
												$operacion->id_localidad_pld = $empresa->id_localidad_pld;
												$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
												$operacion->referencia_operacion = $referenciaOperacion;
												$operacion->folio = $ultimo_folio + 1;
												$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
												$operacion->monto_garantia_solicitud = 0;
												$success = $operacion->save();
												if($success){
													$successed++;
												}
												$monto=$monto-$operacion->monto;
												break;
											case "PE-002":
												if ($monto <= 0) {
													continue;
												}
												$amortizacionesPagoEsp = $amortizacionesAux;
												$registrar=false;
												$montoAux=$monto;
												$excedente_pago=0;
												$montoExtra=0;
												$adeudo_inicial=0;
												$realizado_inicial=0;
												$pago_parcial=false;
												$parcial_liquidado=false;
												$liquidado=false;
												$limiteSeguro=10;
												foreach ($amortizacionesPagoEsp as $keyApe => $amortizacionPE){
													if ($seleccionado->id == $amortizacionPE['id']) {
														$adeudo_inicial=$amortizacionPE['pago_restante'];
														$realizado_inicial=$amortizacionPE['pago_realizado'];
														if($monto>$adeudo_inicial){
															$excedente_pago=$monto-$adeudo_inicial;
														}
														$amortizacionActual=$amortizacionPE;
														if($amortizacionActual['numero_amortizacion']>1){
															if($excedente_pago>0 && $excedente_pago>$amortizacionesPagoEsp[$keyApe-1]['pago_seguro']){
																$montoExtra=$excedente_pago-$amortizacionesPagoEsp[$keyApe-1]['pago_seguro'];
																$excedente_pago=$excedente_pago-$montoExtra;
																$monto=$monto-$montoExtra;
															}
														}
														break;
													}
												}
												if($monto>$adeudo_inicial){
													$excedente_pago=$monto-$adeudo_inicial;
												}
												$amortizacionActual=$amortizacion;
												//verificación de tipo de pago, parcial, parcial liquidante, pago completo
												if(($adeudo_inicial-$monto)>0){
													$pago_parcial=true;
												}else{
													if($realizado_inicial>0){
														$pago_parcial=true;
														$parcial_liquidado=true;
														$liquidado=true;
													}else{
														$liquidado=true;
													}
												}
												if($excedente_pago<0){
													$excedente_pago=0;
												}
												if($excedente_pago>$limiteSeguro){
													$montoExtra+=($excedente_pago-$limiteSeguro);
													$monto-=($excedente_pago-$limiteSeguro);
													$excedente_pago=$limiteSeguro;
												}
												//aplicacion de pago
												$referenciaOperacion = "t" . round(microtime(true) * 1000);
												$referenciaOperacion = "u" . $id_usuario . "s" . $solicitud->id . "c" . $solicitud->id_cliente . $referenciaOperacion;
												$descripcion_operacion="";
												if($segunda_aplicacion){
													$referenciaOperacion=$operacion->referencia_operacion;
												}
												if($pago_parcial){
													$parcialidad = new ParcialidadesAmortizaciones();
													$parcialidad->id_amortizacion = $amortizacionActual['id'];
													$parcialidad->fecha_pago = $fecha;
													$parcialidad->status = "Registrado";
													if($monto>=($amortizacionActual['pago_comisiones']-$amortizacionActual['parcial_comisiones'])){
														$parcialidad->pago_comisiones=$amortizacionActual['pago_comisiones']-$amortizacionActual['parcial_comisiones'];
														$monto=$monto-($amortizacionActual['pago_comisiones']-$amortizacionActual['parcial_comisiones']);
													}else{
														$parcialidad->pago_comisiones=$monto;
														$monto=0;
													}
													if($monto>=($amortizacionActual['pago_moratorios']-$amortizacionActual['parcial_moratorios'])){
														$parcialidad->pago_moratorios=$amortizacionActual['pago_moratorios']-$amortizacionActual['parcial_moratorios'];
														$monto=$monto-($amortizacionActual['pago_moratorios']-$amortizacionActual['parcial_moratorios']);
													}else{
														$parcialidad->pago_moratorios=$monto;
														$monto=0;
													}
													if($monto>=($amortizacionActual['pago_interes']-$amortizacionActual['parcial_interes'])){
														$parcialidad->pago_interes=$amortizacionActual['pago_interes']-$amortizacionActual['parcial_interes'];
														$monto=$monto-($amortizacionActual['pago_interes']-$amortizacionActual['parcial_interes']);
													}else{
														$parcialidad->pago_interes=$monto;
														$monto=0;
													}
													if($monto>=($amortizacionActual['pago_capital']-$amortizacionActual['parcial_capital'])){
														$parcialidad->pago_capital=$amortizacionActual['pago_capital']-$amortizacionActual['parcial_capital'];
														$monto=$monto-($amortizacionActual['pago_capital']-$amortizacionActual['parcial_capital']);
													}else{
														$parcialidad->pago_capital=$monto;
														$monto=0;
													}
													$parcialidad->pago_seguro=$excedente_pago;
													if($parcialidad->pago_seguro>0 && $monto>0){
														if($parcialidad->pago_seguro>$monto){
															$monto=0;
														}else{
															$monto-=$parcialidad->pago_seguro;
														}
													}
													$parcialidad->iva_capital = 0;
													$parcialidad->saldo_inicial = $amortizacionActual["saldo_inicial"] + $amortizacionActual["iva_capital"] + $amortizacionActual["interes_generado"] + $amortizacionActual["iva_interes_generado"] - $amortizacionActual["descuento_interes_generado"] + $amortizacionActual["pago_moratorios"] + $amortizacionActual["pago_comisiones"];
													$parcialidad->pago_total = $parcialidad->pago_capital + $parcialidad->iva_capital + $parcialidad->pago_interes + $parcialidad->pago_comisiones + $parcialidad->pago_moratorios+$parcialidad->pago_seguro;
													$parcialidad->pago_con_garantia = $parcialidad->pago_total;
													$parcialidad->saldo_final = $parcialidad->saldo_inicial - $parcialidad->pago_total;
													$parcialidad->referencia_operacion = $referenciaOperacion;
													$parcialidad->fechacobro=$fechacobro;
													$success = $parcialidad->save(false);
													if ($success) {
														if($parcial_liquidado){
															$descripcion_operacion .= "Se pago el saldo restante de la amortización " . $amortizacionActual['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($montoAmortizacion, 2, ".", ",").". ";
															$monto=$monto+$parcialidad->pago_total;
														}else{
															$descripcion_operacion .= "Se pago una parte de la amortización " . $amortizacionActual['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",").". ";
															$monto=$monto+$parcialidad->pago_total;
														}
													}
												}else{
													$montoAmortizacion=$amortizacionActual['pago_restante']+$excedente_pago;
													$amortizacionActual['pago_seguro']=$excedente_pago;
													$amortizacionActual['pago_realizado']=$amortizacionActual['pago_restante']+$excedente_pago;
													$amortizacionActual['pago_restante']=0;
													$amortizacionActual['pago_total']=$amortizacionActual['pago_total']+$excedente_pago;
													$descripcion_operacion .= "Se pago completamente la amortización " . $amortizacionActual['numero_amortizacion'] . " de la solicitud $solicitud->clave que fue un monto de " . number_format($montoAmortizacion, 2, ".", ",").". ";
												}
	
												$ultima_operacion = Operaciones::model()->find(array('order' => 'folio DESC'));
												if (is_null($ultima_operacion) || empty($ultima_operacion)) {
													$ultimo_folio = 0;
												} else {
													$ultimo_folio = $ultima_operacion->folio;
												}
												if(isset($montoExtra) && $montoExtra>0){
													$segunda_aplicacion=true;
													$operacion = new Operaciones();
													$operacion->id_cliente = $solicitud->id_cliente;
													$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
													$operacion->id_solicitud = $solicitud->id;
													$operacion->monto = $monto;
													$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
													$operacion->id_canal = null;//Una operacion de descuento no tiene canal
													$operacion->referencia = null;
													$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
													$operacion->monto_mxn = $monto;//Una operacion de descuento no requiere el dato de monto mxn
													$operacion->fecha = $fecha;
													$operacion->usuario=$id_usuario;
													$operacion->nombre_usuario=$nombreUsuario;
													$operacion->descripcion = $descripcion_operacion;
													$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
													$operacion->id_localidad_pld = $empresa->id_localidad_pld;
													$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
													$operacion->referencia_operacion = $referenciaOperacion;
													$operacion->folio = $ultimo_folio + 1;
													$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
													$operacion->monto_garantia_solicitud = 0;
													$operacion->monto_garantia_solicitud = 0;
													if(get_class(Yii::app()) == "CConsoleApplication" || $pago['opImportacion']==1){
														$operacion->importado = ($masivo) ? 1:0;
													}
												}else{
													if($segunda_aplicacion){
														$operacion->monto += $monto;
														$operacion->descripcion .= $descripcion_operacion;
														$success = $operacion->save(false);
														$segunda_aplicacion=false;
													}else{
														$operacion = new Operaciones();
														$operacion->id_cliente = $solicitud->id_cliente;
														$operacion->id_instrumento_monetario = null;//Una operacion de descuento no tiene instrumento
														$operacion->id_solicitud = $solicitud->id;
														$operacion->monto = $monto;
														$operacion->id_moneda = 1;//Una operacion de descuento no tiene moneda
														$operacion->id_canal = null;//Una operacion de descuento no tiene canal
														$operacion->referencia = null;
														$operacion->monto_usd = 0;//Una operacion de descuento no requiere el dato de monto usd
														$operacion->monto_mxn = $monto;//Una operacion de descuento no requiere el dato de monto mxn
														$operacion->fecha = $fecha;
														$operacion->usuario=$id_usuario;
														$operacion->nombre_usuario=$nombreUsuario;
														$operacion->descripcion = $descripcion_operacion;
														$operacion->id_tipo_operacion = 2;//Una operacion de descuento no requiere un tipo de operacion, se coloca 0 para evitar el null
														$operacion->id_localidad_pld = $empresa->id_localidad_pld;
														$operacion->codigo_postal = $empresa->id_codigo_postal0->codigo_postal;
														$operacion->referencia_operacion = $referenciaOperacion;
														$operacion->folio = $ultimo_folio + 1;
														$operacion->id_garantia_solicitud = null;//Una operación de descuento no tiene garantia relacionada
														$operacion->monto_garantia_solicitud = 0;
														$operacion->monto_garantia_solicitud = 0;
														if(get_class(Yii::app()) == "CConsoleApplication" || $pago['opImportacion']==1){
															$operacion->importado = ($masivo) ? 1:0;
														}
														$success = $operacion->save(false);
														$segunda_aplicacion=false;
													}
												}
	
												if($liquidado){
													$modelLiquidado = Amortizaciones::model()->findByPk($amortizacionActual["id"]);
													$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
													$modelLiquidado->saldo_capital = $amortizacionActual["saldo_capital"];
													$modelLiquidado->saldo_inicial = $amortizacionActual["saldo_inicial"];
													$modelLiquidado->interes_generado = $amortizacionActual["interes_generado"];
													$modelLiquidado->descuento_interes_generado = $amortizacionActual["descuento_interes_generado"];
													$modelLiquidado->descuento_moratorios = $amortizacionActual["descuento_moratorios"];
													$modelLiquidado->interes_real_generado = $amortizacionActual["interes_real_generado"];
													$modelLiquidado->iva_interes_generado = $amortizacionActual["iva_interes_generado"];
													$modelLiquidado->iva_moratorios = $amortizacionActual["iva_moratorios"];
													$modelLiquidado->pago_capital = $amortizacionActual["pago_capital"];
													$modelLiquidado->pago_interes = $amortizacionActual["pago_interes"];
													$modelLiquidado->pago_comisiones = $amortizacionActual["pago_comisiones"];
													//Arrendamiento
													$modelLiquidado->pago_gastos_iniciales = $amortizacionActual["pago_gastos_iniciales"];
													$modelLiquidado->pago_comisiones_iniciales = $amortizacionActual["pago_comisiones_iniciales"];
													$modelLiquidado->pago_garantia_extendida = $amortizacionActual["pago_garantia_extendida"];
													$modelLiquidado->pago_seguro = $amortizacionActual["pago_seguro"];
													$modelLiquidado->pago_accesorios = $amortizacionActual["pago_accesorios"];
													$modelLiquidado->pago_tenencia = $amortizacionActual["pago_tenencia"];
													$modelLiquidado->pago_otros_gastos = $amortizacionActual["pago_otros_gastos"];
													//----------------------
													$modelLiquidado->iva_gastos_iniciales = $amortizacionActual["iva_gastos_iniciales"];
													$modelLiquidado->iva_comisiones_iniciales = $amortizacionActual["iva_comisiones_iniciales"];
													$modelLiquidado->iva_garantia_extendida = $amortizacionActual["iva_garantia_extendida"];
													$modelLiquidado->iva_seguro = $amortizacionActual["iva_seguro"];
													$modelLiquidado->iva_accesorios = $amortizacionActual["iva_accesorios"];
													$modelLiquidado->iva_tenencia = $amortizacionActual["iva_tenencia"];
													$modelLiquidado->iva_otros_gastos = $amortizacionActual["iva_otros_gastos"];
													//End Arrendamiento
													$modelLiquidado->pago_moratorios = $amortizacionActual["pago_moratorios"];
	
													$modelLiquidado->pago_realizado = $amortizacionActual["pago_realizado"];
													if($pago_parcial){
														$modelLiquidado->pago_realizado=$modelLiquidado->pago_realizado+$monto;
														$modelLiquidado->pago_seguro=$excedente_pago;
													}
													$modelLiquidado->pago_restante = 0;
													$modelLiquidado->pago_total = $amortizacionActual["pago_total"];
													$modelLiquidado->saldo_final = $amortizacionActual["saldo_final"];
													$modelLiquidado->fecha_pago =$fecha;
													$modelLiquidado->fechacobro=$fechacobro;
													
													$modelLiquidado->status = "Registrado";
													$success = $modelLiquidado->save(false);
												}
												if($success){
													$successed++;
												}
												$monto=0;
												if(isset($montoExtra) && $montoExtra>0){
													$monto=$monto+$montoExtra;
												}
												break;
											case "PA-001":
												$montoExcedente=$monto;
												if($montoExcedente>0){
	
													//╔═══╗ ♪
													//║███║ ♫
													//║(●)║ ♫
													//╚═══╝♪♪
													// Empieza la musica, limpiamos el siguiente pago. Pues en esta seccion se distribuye Todo
													$monto = 0; // Limpiamos para que no se cicle el programa
												 
													// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º>
													// aqui se aplica el excedente sobre capital Recursivamente 
													// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º>
	
													//*********************************ATACAMOS EL PRIMER ABONO**************************************/
													//──▀▀▀▀▀▀▀▀▀▀▀▄▄▀▀▀▀▀▀▀▀▀▀▀
													//────────────█▀▀█
													//───────────█▓▓▓▓█
													//───────══▄▀█▓▓▓▓█▀▄══
													//──▄▄▄▄▄▄▄█▒█▓▓▓▓█▒█▄▄▄▄▄▄▄
													//──█▀▀▀▀█▀███▄▓▓▄███▀█▀▀▀▀█
													//─▄█▄──▄█▄───▀██▀───▄█▄──▄█▄
													//─█▒█──█▒█──────────█▒█──█▒█
													//─▀▀▀──▀▀▀──────────▀▀▀──▀▀▀
	
													$amortizaciones_decendentes = Amortizaciones::model()->findAll("id_solicitud=".$solicitud->id." order by id ASC");
													$amortTemp=$amortizacion;
													if(count($amortizaciones_decendentes)>0){
														foreach($amortizaciones_decendentes as $ad){
															$bvalidador=false;
															$abonoefectuado=false;
															$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud);
															foreach ($amortizacionesAUX as $amortizacion) {
																if ($amortizacion["id"] == $ad['id']
																&& floatval($amortizacion['pago_restante'])>0) {
																	$bvalidador=true;
																	break;
																}else{
																	continue;
																}
																
															}
	
															if($bvalidador==false)continue;
														
														//╔═══════════════════╗
														//║ Tomamos capital   ║
														//╚═══════════════════╝
													
														$montocapital = $amortizacion["pago_capital"];
														
														// ............(0 0)
														//╔═══════════════════╗
														//║ Tomamos parciales ║
														//╚═══════════════════╝
														// ............(0 0)
	
														$montoparcial=0;
														$parciales = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=".$amortizacion["id"]);
														$bparciales=false;
														if(count($parciales)>0){
															$bparciales=true;
															foreach($parciales as $p){
																$montoparcial+=$p->pago_capital;
															}
														}
	
														// ............(0 0)
														//╔═══════════════════╗
														//║ Ajustamos Capital ║
														//╚═══════════════════╝
														// ............(0 0)
	
														$montocapital -= $montoparcial;
														$pagocapitalito=0;
	
													
	
														if($montocapital>0 && $montoExcedente>0){
	
	
															if($montoExcedente>$montocapital){
																$montoExcedente-=$montocapital;
																$pagocapitalito=$montocapital;
															}else{
																$pagocapitalito=$montoExcedente;
																$montoExcedente=0;
															}
	
															// Aqui Disparamos los pagos hacia el capital abonando o liquidando 
															// Segun sea es el caso
															//....._|\____________________,,_____________
															//..../ `--|||||||||||----------------------_]
															//.../_==o __________________________________|
															//.....),---.(_(__) /
															//....// (\) ),------
															//...//__-_//
															//../-----/ ...
															//./____ / ... . 
															
															if($bparciales || ($amortizacion["pago_restante"]-$pagocapitalito)>0){
	
																
																
																// *********************************************************
																// Aqui fueron varios disparos (Tiene Parcialidades)  ︻╦̵̵͇̿̿̿̿╤──
																// *********************************************************
																$referenciaOperacion="t".round(microtime(true) * 1000);
																$parcialidad=new ParcialidadesAmortizaciones();
																$parcialidad->id_amortizacion=$amortizacion["id"];
																$parcialidad->fecha_pago=$fecha;
																$parcialidad->status="Registrado";
																$parcialidad->pago_comisiones=0;
																$parcialidad->pago_moratorios=0;
																$parcialidad->pago_interes=0;
																$parcialidad->pago_capital=$pagocapitalito;
	
																$parcialidad->saldo_inicial=$amortizacion["saldo_inicial"]+
																$amortizacion["interes_generado"]+$amortizacion["iva_interes_generado"]-
																$amortizacion["descuento_interes_generado"]+$amortizacion["pago_moratorios"]+$amortizacion["pago_comisiones"]-
																$amortizacion['parcial_capital']-$amortizacion['parcial_interes']-$amortizacion['parcial_comisiones']-
																$amortizacion['parcial_moratorios'];
	
																$parcialidad->pago_total=$pagocapitalito;
																$parcialidad->pago_con_garantia=0;
																$parcialidad->saldo_final=$parcialidad->saldo_inicial-$parcialidad->pago_total;
																$parcialidad->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																$parcialidad->instrumento=$instrumentoMonetario->id;
																$parcialidad->idCanal=$canalCobranza->id;
																$parcialidad->save(false);
	
																$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																$amortizacion['numero_amortizacion'] . 
																" de la solicitud $solicitud->clave que fue un monto de " . 
																number_format($parcialidad->pago_total, 2, ".", ",");
													
																$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																if(is_null($model_folio) || empty($model_folio)){
																	$folio=1;
																}else{
																	$folio=$model_folio->folio+1;
																}
																$operacion=new Operaciones();
																$operacion->fecha=$fecha;
																$operacion->id_moneda=$this->id_moneda;
																$operacion->folio=$folio;
																$operacion->id_cliente=$this->id_cliente;
																$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																$operacion->id_solicitud=$this->id;
																$operacion->monto=$pagocapitalito;
																$operacion->id_moneda=$this->id_moneda;
																$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																$operacion->id_canal=$canalCobranza->id;
																$operacion->referencia='';
																$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																$operacion->monto_mxn=$pagocapitalito;
																$operacion->usuario=$id_usuario;
																$operacion->nombre_usuario=$nombreUsuario;
																$operacion->descripcion=$descripcion_operacion;
																if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																	$operacion->id_tipo_operacion=3;
																}else{
																	$operacion->id_tipo_operacion=2;
																}
																$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																$operacion->save(false);
	
																$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																//Arrendamiento
																$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																//----------------------
																$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																//End Arrendamiento
																$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																if(
																	($amortizacion["pago_restante"]-$pagocapitalito)==0 ||
																	($amortizacion["pago_restante"]-$pagocapitalito)<1 
																	
																){
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																	$modelLiquidado->pago_restante = 0;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"];
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																	$modelLiquidado->fecha_pago =$fecha;
																	$modelLiquidado->status = "Registrado";
																	$success = $modelLiquidado->save(false);
																}else{
	
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																	$modelLiquidado->pago_restante = $amortizacion["pago_total"]-$modelLiquidado->pago_realizado;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"];
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																	$modelLiquidado->fecha_pago =null;
																	$modelLiquidado->status = "Calculado";
																	$success = $modelLiquidado->save(false);
																}
	
																
	
																
	
																}else{
	
																	// ******************************************
																	// Aqui Liquidamos de un solo Disparo ︻┳═ 一
																	// ******************************************
	
																	if(($amortizacion["pago_restante"]-$pagocapitalito)<=0){ 
	
																		$referenciaOperacion="t".round(microtime(true) * 1000);
																		$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																		$amortizacion['numero_amortizacion'] . 
																		" de la solicitud $solicitud->clave que fue un monto de " . 
																		number_format($pagocapitalito, 2, ".", ",");
															
	
																		$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																		if(is_null($model_folio) || empty($model_folio)){
																			$folio=1;
																		}else{
																			$folio=$model_folio->folio+1;
																		}
																		$operacion=new Operaciones();
																		$operacion->fecha=$fecha;
																		$operacion->id_moneda=$this->id_moneda;
																		$operacion->folio=$folio;
																		$operacion->id_cliente=$this->id_cliente;
																		$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																		$operacion->id_solicitud=$this->id;
																		$operacion->monto=$pagocapitalito;
																		$operacion->id_moneda=$this->id_moneda;
																		$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																		$operacion->id_canal=$canalCobranza->id;
																		$operacion->referencia='';
																		$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																		$operacion->monto_mxn=$pagocapitalito;
																		$operacion->usuario=$id_usuario;
																		$operacion->nombre_usuario=$nombreUsuario;
																		$operacion->descripcion=$descripcion_operacion;
																		if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																			$operacion->id_tipo_operacion=3;
																		}else{
																			$operacion->id_tipo_operacion=2;
																		}
																		$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																		$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																		$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																		$operacion->save(false);
	
	
																		$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																		$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																		$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																		$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																		$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																		$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																		$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																		$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																		$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																		$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																		$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																		$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																		$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																		//Arrendamiento
																		$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																		$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																		$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																		$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																		$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																		$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																		$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																		//----------------------
																		$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																		$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																		$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																		$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																		$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																		$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																		$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																		//End Arrendamiento
																		$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																		
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																		$modelLiquidado->pago_restante = 0;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago =$fecha;
																		$modelLiquidado->status = "Registrado";
																		$success = $modelLiquidado->save(false);
																	
																	}
	
																}
															}
																break;
															}	
													}
													//***********************************************************************/
	
													$amortizaciones_decendentes = Amortizaciones::model()->findAll("id_solicitud=".$solicitud->id." order by id DESC");
													$amortTemp=$amortizacion;
													if(count($amortizaciones_decendentes)>0){
													foreach($amortizaciones_decendentes as $ad){
														$bvalidador=false;
														$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud);
														foreach ($amortizacionesAUX as $amortizacion) {
															if ($amortizacion["id"] == $ad['id'] 
															&& floatval($amortizacion['pago_restante'])>0) {
																$bvalidador=true;
																break;
															}else{
																continue;
															}
														}
	
													
														if($bvalidador==false)continue;
	
														
														//╔═══════════════════╗
														//║ Tomamos capital   ║
														//╚═══════════════════╝
													
														$montocapital = $amortizacion["pago_capital"];
														
														// ............(0 0)
														//╔═══════════════════╗
														//║ Tomamos parciales ║
														//╚═══════════════════╝
														// ............(0 0)
	
														$montoparcial=0;
														$parciales = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=".$amortizacion["id"]);
														$bparciales=false;
														if(count($parciales)>0){
															$bparciales=true;
															foreach($parciales as $p){
																$montoparcial+=$p->pago_capital;
															}
														}
	
														// ............(0 0)
														//╔═══════════════════╗
														//║ Ajustamos Capital ║
														//╚═══════════════════╝
														// ............(0 0)
	
														$montocapital -= $montoparcial;
														$pagocapitalito=0;
	
													
	
														if($montocapital>0 && $montoExcedente>0){
	
	
															if($montoExcedente>$montocapital){
																$montoExcedente-=$montocapital;
																$pagocapitalito=$montocapital;
															}else{
																$pagocapitalito=$montoExcedente;
																$montoExcedente=0;
															}
	
															// Aqui Disparamos los pagos hacia el capital abonando o liquidando 
															// Segun sea es el caso
															//....._|\____________________,,_____________
															//..../ `--|||||||||||----------------------_]
															//.../_==o __________________________________|
															//.....),---.(_(__) /
															//....// (\) ),------
															//...//__-_//
															//../-----/ ...
															//./____ / ... . 
															
															if($bparciales || ($amortizacion["pago_restante"]-$pagocapitalito)>0){
	
																
																
																// *********************************************************
																// Aqui fueron varios disparos (Tiene Parcialidades)  ︻╦̵̵͇̿̿̿̿╤──
																// *********************************************************
																$referenciaOperacion="t".round(microtime(true) * 1000);
																$parcialidad=new ParcialidadesAmortizaciones();
																$parcialidad->id_amortizacion=$amortizacion["id"];
																$parcialidad->fecha_pago=$fecha;
																$parcialidad->status="Registrado";
																$parcialidad->pago_comisiones=0;
																$parcialidad->pago_moratorios=0;
																$parcialidad->pago_interes=0;
																$parcialidad->pago_capital=$pagocapitalito;
	
																$parcialidad->saldo_inicial=$amortizacion["saldo_inicial"]+
																$amortizacion["interes_generado"]+$amortizacion["iva_interes_generado"]-
																$amortizacion["descuento_interes_generado"]+$amortizacion["pago_moratorios"]+$amortizacion["pago_comisiones"]-
																$amortizacion['parcial_capital']-$amortizacion['parcial_interes']-$amortizacion['parcial_comisiones']-
																$amortizacion['parcial_moratorios'];
	
																$parcialidad->pago_total=$pagocapitalito;
																$parcialidad->pago_con_garantia=0;
																$parcialidad->saldo_final=$parcialidad->saldo_inicial-$parcialidad->pago_total;
																$parcialidad->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																$parcialidad->instrumento=$instrumentoMonetario->id;
																$parcialidad->idCanal=$canalCobranza->id;
																$parcialidad->save(false);
	
																$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																$amortizacion['numero_amortizacion'] . 
																" de la solicitud $solicitud->clave que fue un monto de " . 
																number_format($parcialidad->pago_total, 2, ".", ",");
													
																$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																if(is_null($model_folio) || empty($model_folio)){
																	$folio=1;
																}else{
																	$folio=$model_folio->folio+1;
																}
																$operacion=new Operaciones();
																$operacion->fecha=$fecha;
																$operacion->id_moneda=$this->id_moneda;
																$operacion->folio=$folio;
																$operacion->id_cliente=$this->id_cliente;
																$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																$operacion->id_solicitud=$this->id;
																$operacion->monto=$pagocapitalito;
																$operacion->id_moneda=$this->id_moneda;
																$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																$operacion->id_canal=$canalCobranza->id;
																$operacion->referencia='';
																$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																$operacion->monto_mxn=$pagocapitalito;
																$operacion->usuario=$id_usuario;
																$operacion->nombre_usuario=$nombreUsuario;
																$operacion->descripcion=$descripcion_operacion;
																if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																	$operacion->id_tipo_operacion=3;
																}else{
																	$operacion->id_tipo_operacion=2;
																}
																$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																$operacion->save(false);
	
																$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																//Arrendamiento
																$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																//----------------------
																$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																//End Arrendamiento
																$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																if(
																	($amortizacion["pago_restante"]-$pagocapitalito)==0 ||
																	($amortizacion["pago_restante"]-$pagocapitalito)<1 
																	
																){
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																	$modelLiquidado->pago_restante = 0;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"];
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																	$modelLiquidado->fecha_pago =$fecha;
																	$modelLiquidado->status = "Registrado";
																	$success = $modelLiquidado->save(false);
																}else{
	
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																	$modelLiquidado->pago_restante = $amortizacion["pago_total"]-$modelLiquidado->pago_realizado;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"];
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																	$modelLiquidado->fecha_pago =null;
																	$modelLiquidado->status = "Calculado";
																	$success = $modelLiquidado->save(false);
																}
	
																
	
																
	
																}else{
	
																	// ******************************************
																	// Aqui Liquidamos de un solo Disparo ︻┳═ 一
																	// ******************************************
	
																	if(($amortizacion["pago_restante"]-$pagocapitalito)<=0){ 
	
																		$referenciaOperacion="t".round(microtime(true) * 1000);
																		$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																		$amortizacion['numero_amortizacion'] . 
																		" de la solicitud $solicitud->clave que fue un monto de " . 
																		number_format($pagocapitalito, 2, ".", ",");
															
	
																		$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																		if(is_null($model_folio) || empty($model_folio)){
																			$folio=1;
																		}else{
																			$folio=$model_folio->folio+1;
																		}
																		$operacion=new Operaciones();
																		$operacion->fecha=$fecha;
																		$operacion->id_moneda=$this->id_moneda;
																		$operacion->folio=$folio;
																		$operacion->id_cliente=$this->id_cliente;
																		$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																		$operacion->id_solicitud=$this->id;
																		$operacion->monto=$pagocapitalito;
																		$operacion->id_moneda=$this->id_moneda;
																		$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																		$operacion->id_canal=$canalCobranza->id;
																		$operacion->referencia='';
																		$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																		$operacion->monto_mxn=$pagocapitalito;
																		$operacion->usuario=$id_usuario;
																		$operacion->nombre_usuario=$nombreUsuario;
																		$operacion->descripcion=$descripcion_operacion;
																		if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																			$operacion->id_tipo_operacion=3;
																		}else{
																			$operacion->id_tipo_operacion=2;
																		}
																		$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																		$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																		$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																		$operacion->save(false);
	
	
																		$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																		$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																		$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																		$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																		$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																		$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																		$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																		$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																		$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																		$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																		$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																		$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																		$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																		//Arrendamiento
																		$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																		$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																		$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																		$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																		$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																		$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																		$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																		//----------------------
																		$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																		$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																		$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																		$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																		$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																		$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																		$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																		//End Arrendamiento
																		$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																		
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																		$modelLiquidado->pago_restante = 0;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago =$fecha;
																		$modelLiquidado->status = "Registrado";
																		$success = $modelLiquidado->save(false);
																	
																	}
	
																}
	
														  
															}
	
														}
	
	
													}
													// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º>
													//aqui se aplica el excedente sobre capital Recursivamente 
													// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º> 
													
												}
												$amortTemp=$amortizacion;
												break;
											case "PA-002":
												$montoExcedente=$monto;
												if($montoExcedente>0){
													//aqui se aplica el excedente sobre interes
													//╔═══╗ ♪
													//║███║ ♫
													//║(●)║ ♫
													//╚═══╝♪♪
													// Empieza la musica, limpiamos el siguiente pago. Pues en esta seccion se distribuye Todo
													$monto = 0; // Limpiamos para que no se cicle el programa
												 
													// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º>
													// aqui se aplica el excedente sobre interes Recursivamente 
													// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º>
	
													//*********************************ATACAMOS EL PRIMER ABONO**************************************/
													//──▀▀▀▀▀▀▀▀▀▀▀▄▄▀▀▀▀▀▀▀▀▀▀▀
													//────────────█▀▀█
													//───────────█▓▓▓▓█
													//───────══▄▀█▓▓▓▓█▀▄══
													//──▄▄▄▄▄▄▄█▒█▓▓▓▓█▒█▄▄▄▄▄▄▄
													//──█▀▀▀▀█▀███▄▓▓▄███▀█▀▀▀▀█
													//─▄█▄──▄█▄───▀██▀───▄█▄──▄█▄
													//─█▒█──█▒█──────────█▒█──█▒█
													//─▀▀▀──▀▀▀──────────▀▀▀──▀▀▀
	
													$amortizaciones_decendentes = Amortizaciones::model()->findAll("id_solicitud=".$solicitud->id." order by id ASC");
													$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud);
													$amortTemp=$amortizacion;
													if(count($amortizaciones_decendentes)>0){
														foreach($amortizaciones_decendentes as $ad){
															$bvalidador=false;
															$abonoefectuado=false;
															foreach ($amortizacionesAUX as $amortizacion) {
																if ($amortizacion["id"] == $ad['id'] 
																&& floatval($amortizacion['pago_restante'])>0) {
																	$bvalidador=true;
																	break;
																}else{
																	continue;
																}
																
															}
	
															if($bvalidador==false)continue;
														
														//╔═══════════════════╗
														//║ Tomamos Interes   ║
														//╚═══════════════════╝
													
														$montocapital = $amortizacion["pago_interes"];
														
														// ............(0 0)
														//╔═══════════════════╗
														//║ Tomamos parciales ║
														//╚═══════════════════╝
														// ............(0 0)
	
														$montoparcial=0;
														$parciales = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=".$amortizacion["id"]);
														$bparciales=false;
														if(count($parciales)>0){
															$bparciales=true;
															foreach($parciales as $p){
																$montoparcial+=$p->pago_interes;
															}
														}
	
														// ............(0 0)
														//╔═══════════════════╗
														//║ Ajustamos Interes ║
														//╚═══════════════════╝
														// ............(0 0)
	
														$montocapital -= $montoparcial;
														$pagocapitalito=0;
	
													
	
														if($montocapital>0 && $montoExcedente>0){
	
	
															if($montoExcedente>$montocapital){
																$montoExcedente-=$montocapital;
																$pagocapitalito=$montocapital;
															}else{
																$pagocapitalito=$montoExcedente;
																$montoExcedente=0;
															}
	
															// Aqui Disparamos los pagos hacia el interes abonando o liquidando 
															// Segun sea es el caso
															//....._|\____________________,,_____________
															//..../ `--|||||||||||----------------------_]
															//.../_==o __________________________________|
															//.....),---.(_(__) /
															//....// (\) ),------
															//...//__-_//
															//../-----/ ...
															//./____ / ... . 
															
															if($bparciales || ($amortizacion["pago_restante"]-$pagocapitalito)>0){
	
																
																
																// *********************************************************
																// Aqui fueron varios disparos (Tiene Parcialidades)  ︻╦̵̵͇̿̿̿̿╤──
																// *********************************************************
																$referenciaOperacion="t".round(microtime(true) * 1000);
																$parcialidad=new ParcialidadesAmortizaciones();
																$parcialidad->id_amortizacion=$amortizacion["id"];
																$parcialidad->fecha_pago=$fecha;
																$parcialidad->status="Registrado";
																$parcialidad->pago_comisiones=0;
																$parcialidad->pago_moratorios=0;
																$parcialidad->pago_interes=$pagocapitalito;
																$parcialidad->pago_capital=0;
	
																$parcialidad->saldo_inicial=$amortizacion["saldo_inicial"]+
																$amortizacion["interes_generado"]+$amortizacion["iva_interes_generado"]-
																$amortizacion["descuento_interes_generado"]+$amortizacion["pago_moratorios"]+$amortizacion["pago_comisiones"]-
																$amortizacion['parcial_capital']-$amortizacion['parcial_interes']-$amortizacion['parcial_comisiones']-
																$amortizacion['parcial_moratorios'];
	
																$parcialidad->pago_total=$pagocapitalito;
																$parcialidad->pago_con_garantia=0;
																$parcialidad->saldo_final=$parcialidad->saldo_inicial-$parcialidad->pago_total;
																$parcialidad->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																$parcialidad->instrumento=$instrumentoMonetario->id;
																$parcialidad->idCanal=$canalCobranza->id;
																$parcialidad->save(false);
	
																$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																$amortizacion['numero_amortizacion'] . 
																" de la solicitud $solicitud->clave que fue un monto de " . 
																number_format($parcialidad->pago_total, 2, ".", ",");
													
																$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																if(is_null($model_folio) || empty($model_folio)){
																	$folio=1;
																}else{
																	$folio=$model_folio->folio+1;
																}
																$operacion=new Operaciones();
																$operacion->fecha=$fecha;
																$operacion->id_moneda=$this->id_moneda;
																$operacion->folio=$folio;
																$operacion->id_cliente=$this->id_cliente;
																$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																$operacion->id_solicitud=$this->id;
																$operacion->monto=$pagocapitalito;
																$operacion->id_moneda=$this->id_moneda;
																$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																$operacion->id_canal=$canalCobranza->id;
																$operacion->referencia='';
																$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																$operacion->monto_mxn=$pagocapitalito;
																$operacion->usuario=$id_usuario;
																$operacion->nombre_usuario=$nombreUsuario;
																$operacion->descripcion=$descripcion_operacion;
																if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																	$operacion->id_tipo_operacion=3;
																}else{
																	$operacion->id_tipo_operacion=2;
																}
																$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																$operacion->save(false);
	
																$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																//Arrendamiento
																$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																//----------------------
																$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																//End Arrendamiento
																$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
	
															
																if(
																	($amortizacion["pago_restante"]-$pagocapitalito)==0 ||
																	($amortizacion["pago_restante"]-$pagocapitalito)<1 
																){
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																	$modelLiquidado->pago_restante = 0;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"];
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																	$modelLiquidado->fecha_pago =$fecha;
																	$modelLiquidado->status = "Registrado";
																	$success = $modelLiquidado->save(false);
																}else{
	
								
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																	$modelLiquidado->pago_restante = $amortizacion["pago_total"]-$modelLiquidado->pago_realizado;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"];
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																	$modelLiquidado->fecha_pago =null;
																	$modelLiquidado->status = "Calculado";
																	$success = $modelLiquidado->save(false);
																}
	
																
	
																
	
																}else{
	
																	// ******************************************
																	// Aqui Liquidamos de un solo Disparo ︻┳═ 一
																	// ******************************************
	
																	if(($amortizacion["pago_restante"]-$pagocapitalito)<=0){ 
	
																		$referenciaOperacion="t".round(microtime(true) * 1000);
																		$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																		$amortizacion['numero_amortizacion'] . 
																		" de la solicitud $solicitud->clave que fue un monto de " . 
																		number_format($pagocapitalito, 2, ".", ",");
															
	
																		$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																		if(is_null($model_folio) || empty($model_folio)){
																			$folio=1;
																		}else{
																			$folio=$model_folio->folio+1;
																		}
																		$operacion=new Operaciones();
																		$operacion->fecha=$fecha;
																		$operacion->id_moneda=$this->id_moneda;
																		$operacion->folio=$folio;
																		$operacion->id_cliente=$this->id_cliente;
																		$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																		$operacion->id_solicitud=$this->id;
																		$operacion->monto=$pagocapitalito;
																		$operacion->id_moneda=$this->id_moneda;
																		$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																		$operacion->id_canal=$canalCobranza->id;
																		$operacion->referencia='';
																		$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																		$operacion->monto_mxn=$pagocapitalito;
																		$operacion->usuario=$id_usuario;
																		$operacion->nombre_usuario=$nombreUsuario;
																		$operacion->descripcion=$descripcion_operacion;
																		if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																			$operacion->id_tipo_operacion=3;
																		}else{
																			$operacion->id_tipo_operacion=2;
																		}
																		$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																		$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																		$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																		$operacion->save(false);
	
	
																		$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																		$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																		$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																		$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																		$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																		$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																		$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																		$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																		$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																		$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																		$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																		$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																		$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																		//Arrendamiento
																		$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																		$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																		$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																		$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																		$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																		$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																		$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																		//----------------------
																		$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																		$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																		$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																		$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																		$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																		$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																		$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																		//End Arrendamiento
																		$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																		
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																		$modelLiquidado->pago_restante = 0;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago =$fecha;
																		$modelLiquidado->status = "Registrado";
																		$success = $modelLiquidado->save(false);
																	
																	}
	
																}
															}
																break;
															}	
													}
													//***********************************************************************/
	
													$amortizaciones_decendentes = Amortizaciones::model()->findAll("id_solicitud=".$solicitud->id." order by id ASC");
													$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud);
													$amortTemp=$amortizacion;
													if(count($amortizaciones_decendentes)>0){
													foreach($amortizaciones_decendentes as $ad){
														$bvalidador=false;
														foreach ($amortizacionesAUX as $amortizacion) {
															if ($amortizacion["id"] == $ad['id'] 
															&& floatval($amortizacion['pago_restante'])>0) {
																$bvalidador=true;
																break;
															}else{
																continue;
															}
														}
	
													
														if($bvalidador==false)continue;
	
														
														//╔═══════════════════╗
														//║ Tomamos interes   ║
														//╚═══════════════════╝
													
														$montocapital = $amortizacion["pago_interes"];
														
														// ............(0 0)
														//╔═══════════════════╗
														//║ Tomamos parciales ║
														//╚═══════════════════╝
														// ............(0 0)
	
														$montoparcial=0;
														$parciales = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=".$amortizacion["id"]);
														$bparciales=false;
														if(count($parciales)>0){
															$bparciales=true;
															foreach($parciales as $p){
																$montoparcial+=$p->pago_interes;
															}
														}
	
														// ............(0 0)
														//╔═══════════════════╗
														//║ Ajustamos interes ║
														//╚═══════════════════╝
														// ............(0 0)
	
														$montocapital -= $montoparcial;
														$pagocapitalito=0;
	
													
	
														if($montocapital>0 && $montoExcedente>0){
	
	
															if($montoExcedente>$montocapital){
																$montoExcedente-=$montocapital;
																$pagocapitalito=$montocapital;
															}else{
																$pagocapitalito=$montoExcedente;
																$montoExcedente=0;
															}
	
															// Aqui Disparamos los pagos hacia el interes abonando o liquidando 
															// Segun sea es el caso
															//....._|\____________________,,_____________
															//..../ `--|||||||||||----------------------_]
															//.../_==o __________________________________|
															//.....),---.(_(__) /
															//....// (\) ),------
															//...//__-_//
															//../-----/ ...
															//./____ / ... . 
															
															if($bparciales || ($amortizacion["pago_restante"]-$pagocapitalito)>0){
	
																
																
																// *********************************************************
																// Aqui fueron varios disparos (Tiene Parcialidades)  ︻╦̵̵͇̿̿̿̿╤──
																// *********************************************************
																$referenciaOperacion="t".round(microtime(true) * 1000);
																$parcialidad=new ParcialidadesAmortizaciones();
																$parcialidad->id_amortizacion=$amortizacion["id"];
																$parcialidad->fecha_pago=$fecha;
																$parcialidad->status="Registrado";
																$parcialidad->pago_comisiones=0;
																$parcialidad->pago_moratorios=0;
																$parcialidad->pago_interes=$pagocapitalito;
																$parcialidad->pago_capital=0;
	
																$parcialidad->saldo_inicial=$amortizacion["saldo_inicial"]+
																$amortizacion["interes_generado"]+$amortizacion["iva_interes_generado"]-
																$amortizacion["descuento_interes_generado"]+$amortizacion["pago_moratorios"]+$amortizacion["pago_comisiones"]-
																$amortizacion['parcial_capital']-$amortizacion['parcial_interes']-$amortizacion['parcial_comisiones']-
																$amortizacion['parcial_moratorios'];
	
																$parcialidad->pago_total=$pagocapitalito;
																$parcialidad->pago_con_garantia=0;
																$parcialidad->saldo_final=$parcialidad->saldo_inicial-$parcialidad->pago_total;
																$parcialidad->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																$parcialidad->instrumento=$instrumentoMonetario->id;
																$parcialidad->idCanal=$canalCobranza->id;
																$parcialidad->save(false);
	
																$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																$amortizacion['numero_amortizacion'] . 
																" de la solicitud $solicitud->clave que fue un monto de " . 
																number_format($parcialidad->pago_total, 2, ".", ",");
													
																$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																if(is_null($model_folio) || empty($model_folio)){
																	$folio=1;
																}else{
																	$folio=$model_folio->folio+1;
																}
																$operacion=new Operaciones();
																$operacion->fecha=$fecha;
																$operacion->id_moneda=$this->id_moneda;
																$operacion->folio=$folio;
																$operacion->id_cliente=$this->id_cliente;
																$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																$operacion->id_solicitud=$this->id;
																$operacion->monto=$pagocapitalito;
																$operacion->id_moneda=$this->id_moneda;
																$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																$operacion->id_canal=$canalCobranza->id;
																$operacion->referencia='';
																$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																$operacion->monto_mxn=$pagocapitalito;
																$operacion->usuario=$id_usuario;
																$operacion->nombre_usuario=$nombreUsuario;
																$operacion->descripcion=$descripcion_operacion;
																if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																	$operacion->id_tipo_operacion=3;
																}else{
																	$operacion->id_tipo_operacion=2;
																}
																$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																$operacion->save(false);
	
																$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																//Arrendamiento
																$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																//----------------------
																$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																//End Arrendamiento
																$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																if(
																	($amortizacion["pago_restante"]-$pagocapitalito)==0 ||
																	($amortizacion["pago_restante"]-$pagocapitalito)<1 
																	
																){
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																	$modelLiquidado->pago_restante = 0;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"];
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																	$modelLiquidado->fecha_pago =$fecha;
																	$modelLiquidado->status = "Registrado";
																	$success = $modelLiquidado->save(false);
																}else{
																	$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																	$modelLiquidado->pago_restante = $amortizacion["pago_total"]-$modelLiquidado->pago_realizado;
																	$modelLiquidado->pago_total = $amortizacion["pago_total"];
																	$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																	$modelLiquidado->fecha_pago =null;
																	$modelLiquidado->status = "Calculado";
																	$success = $modelLiquidado->save(false);
																}
	
																}else{
	
																	// ******************************************
																	// Aqui Liquidamos de un solo Disparo ︻┳═ 一
																	// ******************************************
	
																	if(($amortizacion["pago_restante"]-$pagocapitalito)<=0){ 
	
																		$referenciaOperacion="t".round(microtime(true) * 1000);
																		$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																		$amortizacion['numero_amortizacion'] . 
																		" de la solicitud $solicitud->clave que fue un monto de " . 
																		number_format($pagocapitalito, 2, ".", ",");
															
	
																		$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																		if(is_null($model_folio) || empty($model_folio)){
																			$folio=1;
																		}else{
																			$folio=$model_folio->folio+1;
																		}
																		$operacion=new Operaciones();
																		$operacion->fecha=$fecha;
																		$operacion->id_moneda=$this->id_moneda;
																		$operacion->folio=$folio;
																		$operacion->id_cliente=$this->id_cliente;
																		$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																		$operacion->id_solicitud=$this->id;
																		$operacion->monto=$pagocapitalito;
																		$operacion->id_moneda=$this->id_moneda;
																		$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																		$operacion->id_canal=$canalCobranza->id;
																		$operacion->referencia='';
																		$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																		$operacion->monto_mxn=$pagocapitalito;
																		$operacion->usuario=$id_usuario;
																		$operacion->nombre_usuario=$nombreUsuario;
																		$operacion->descripcion=$descripcion_operacion;
																		if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																			$operacion->id_tipo_operacion=3;
																		}else{
																			$operacion->id_tipo_operacion=2;
																		}
																		$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																		$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																		$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																		$operacion->save(false);
	
	
																		$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																		$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																		$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																		$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																		$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																		$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																		$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																		$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																		$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																		$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																		$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																		$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																		$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																		//Arrendamiento
																		$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																		$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																		$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																		$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																		$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																		$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																		$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																		//----------------------
																		$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																		$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																		$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																		$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																		$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																		$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																		$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																		//End Arrendamiento
																		$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																		
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																		$modelLiquidado->pago_restante = 0;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago =$fecha;
																		$modelLiquidado->status = "Registrado";
																		$success = $modelLiquidado->save(false);
																	
																	}
	
																}
	
														  
															}
	
														}
	
	
													}
													// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º>
													//aqui se aplica el excedente sobre capital Recursivamente 
													// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º> 
													
												}
												$amortTemp=$amortizacion;
												break;
												case "PA-003":
													$montoExcedente=$monto;
													if($montoExcedente>0){
														//aqui se aplica el excedente sobre capital
														//╔═══╗ ♪
														//║███║ ♫
														//║(●)║ ♫
														//╚═══╝♪♪
														// Empieza la musica, limpiamos el siguiente pago. Pues en esta seccion se distribuye Todo
														$monto = 0; // Limpiamos para que no se cicle el programa
													 
														// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º>
														// aqui se aplica el excedente sobre capital Recursivamente 
														// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º>
		
														//*********************************ATACAMOS EL PRIMER ABONO**************************************/
														//──▀▀▀▀▀▀▀▀▀▀▀▄▄▀▀▀▀▀▀▀▀▀▀▀
														//────────────█▀▀█
														//───────────█▓▓▓▓█
														//───────══▄▀█▓▓▓▓█▀▄══
														//──▄▄▄▄▄▄▄█▒█▓▓▓▓█▒█▄▄▄▄▄▄▄
														//──█▀▀▀▀█▀███▄▓▓▄███▀█▀▀▀▀█
														//─▄█▄──▄█▄───▀██▀───▄█▄──▄█▄
														//─█▒█──█▒█──────────█▒█──█▒█
														//─▀▀▀──▀▀▀──────────▀▀▀──▀▀▀
		
														$amortizaciones_decendentes = Amortizaciones::model()->findAll("id_solicitud=".$solicitud->id." order by id ASC");
														$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud);
														$amortTemp=$amortizacion;
														if(count($amortizaciones_decendentes)>0){
															foreach($amortizaciones_decendentes as $ad){
																$bvalidador=false;
																$abonoefectuado=false;
																foreach ($amortizacionesAUX as $amortizacion) {
																	if ($amortizacion["id"] == $ad['id'] 
																	&& floatval($amortizacion['pago_restante'])>0) {
																		$bvalidador=true;
																		break;
																	}else{
																		continue;
																	}
																	
																}
		
																if($bvalidador==false)continue;
															
															//╔═══════════════════╗
															//║ Tomamos Capital   ║
															//╚═══════════════════╝
														
															$montocapital = $amortizacion["pago_capital"];
															
															// ............(0 0)
															//╔═══════════════════╗
															//║ Tomamos parciales ║
															//╚═══════════════════╝
															// ............(0 0)
		
															$montoparcial=0;
															$parciales = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=".$amortizacion["id"]);
															$bparciales=false;
															if(count($parciales)>0){
																$bparciales=true;
																foreach($parciales as $p){
																	$montoparcial+=$p->pago_capital;
																}
															}
		
															// ............(0 0)
															//╔═══════════════════╗
															//║ Ajustamos Capital ║
															//╚═══════════════════╝
															// ............(0 0)
		
															$montocapital -= $montoparcial;
															$pagocapitalito=0;
		
														
		
															if($montocapital>0 && $montoExcedente>0){
		
		
																if($montoExcedente>$montocapital){
																	$montoExcedente-=$montocapital;
																	$pagocapitalito=$montocapital;
																}else{
																	$pagocapitalito=$montoExcedente;
																	$montoExcedente=0;
																}
		
																// Aqui Disparamos los pagos hacia el capital abonando o liquidando 
																// Segun sea es el caso
																//....._|\____________________,,_____________
																//..../ `--|||||||||||----------------------_]
																//.../_==o __________________________________|
																//.....),---.(_(__) /
																//....// (\) ),------
																//...//__-_//
																//../-----/ ...
																//./____ / ... . 
																
																if($bparciales || ($amortizacion["pago_restante"]-$pagocapitalito)>0){
		
																	
																	
																	// *********************************************************
																	// Aqui fueron varios disparos (Tiene Parcialidades)  ︻╦̵̵͇̿̿̿̿╤──
																	// *********************************************************
																	$referenciaOperacion="t".round(microtime(true) * 1000);
																	$parcialidad=new ParcialidadesAmortizaciones();
																	$parcialidad->id_amortizacion=$amortizacion["id"];
																	$parcialidad->fecha_pago=$fecha;
																	$parcialidad->status="Registrado";
																	$parcialidad->pago_comisiones=0;
																	$parcialidad->pago_moratorios=0;
																	$parcialidad->pago_interes=0;
																	$parcialidad->pago_capital=$pagocapitalito;
		
																	$parcialidad->saldo_inicial=$amortizacion["saldo_inicial"]+
																	$amortizacion["interes_generado"]+$amortizacion["iva_interes_generado"]-
																	$amortizacion["descuento_interes_generado"]+$amortizacion["pago_moratorios"]+$amortizacion["pago_comisiones"]-
																	$amortizacion['parcial_capital']-$amortizacion['parcial_interes']-$amortizacion['parcial_comisiones']-
																	$amortizacion['parcial_moratorios'];
		
																	$parcialidad->pago_total=$pagocapitalito;
																	$parcialidad->pago_con_garantia=0;
																	$parcialidad->saldo_final=$parcialidad->saldo_inicial-$parcialidad->pago_total;
																	$parcialidad->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																	$parcialidad->instrumento=$instrumentoMonetario->id;
																	$parcialidad->idCanal=$canalCobranza->id;
																	$parcialidad->save(false);
		
																	$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																	$amortizacion['numero_amortizacion'] . 
																	" de la solicitud $solicitud->clave que fue un monto de " . 
																	number_format($parcialidad->pago_total, 2, ".", ",");
														
																	$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																	if(is_null($model_folio) || empty($model_folio)){
																		$folio=1;
																	}else{
																		$folio=$model_folio->folio+1;
																	}
																	$operacion=new Operaciones();
																	$operacion->fecha=$fecha;
																	$operacion->id_moneda=$this->id_moneda;
																	$operacion->folio=$folio;
																	$operacion->id_cliente=$this->id_cliente;
																	$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																	$operacion->id_solicitud=$this->id;
																	$operacion->monto=$pagocapitalito;
																	$operacion->id_moneda=$this->id_moneda;
																	$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																	$operacion->id_canal=$canalCobranza->id;
																	$operacion->referencia='';
																	$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																	$operacion->monto_mxn=$pagocapitalito;
																	$operacion->usuario=$id_usuario;
																	$operacion->nombre_usuario=$nombreUsuario;
																	$operacion->descripcion=$descripcion_operacion;
																	if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																		$operacion->id_tipo_operacion=3;
																	}else{
																		$operacion->id_tipo_operacion=2;
																	}
																	$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																	$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																	$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																	$operacion->save(false);
		
																	$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																	$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																	$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																	$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																	$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																	$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																	$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																	$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																	$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																	$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																	$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																	$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																	$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																	//Arrendamiento
																	$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																	$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																	$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																	$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																	$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																	$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																	$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																	//----------------------
																	$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																	$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																	$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																	$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																	$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																	$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																	$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																	//End Arrendamiento
																	$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
	
																	
	
																	if(
																		($amortizacion["pago_restante"]-$pagocapitalito)==0 ||
																		($amortizacion["pago_restante"]-$pagocapitalito)<1 	
																	){
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																		$modelLiquidado->pago_restante = 0;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago =$fecha;
																		$modelLiquidado->status = "Registrado";
																		$success = $modelLiquidado->save(false);
																	}else{
		
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																		$modelLiquidado->pago_restante = $amortizacion["pago_total"]-$modelLiquidado->pago_realizado;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago =null;
																		$modelLiquidado->status = "Calculado";
																		$success = $modelLiquidado->save(false);
																	}
		
																	
		
																	
		
																	}else{
		
																		// ******************************************
																		// Aqui Liquidamos de un solo Disparo ︻┳═ 一
																		// ******************************************
		
																		if(($amortizacion["pago_restante"]-$pagocapitalito)<=0){ 
		
																			$referenciaOperacion="t".round(microtime(true) * 1000);
																			$descripcion_operacion = "Se pago el saldo restante de la amortización " . 
																			$amortizacion['numero_amortizacion'] . 
																			" de la solicitud $solicitud->clave que fue un monto de " . 
																			number_format($pagocapitalito, 2, ".", ",");
																
		
																			$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																			if(is_null($model_folio) || empty($model_folio)){
																				$folio=1;
																			}else{
																				$folio=$model_folio->folio+1;
																			}
																			$operacion=new Operaciones();
																			$operacion->fecha=$fecha;
																			$operacion->id_moneda=$this->id_moneda;
																			$operacion->folio=$folio;
																			$operacion->id_cliente=$this->id_cliente;
																			$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																			$operacion->id_solicitud=$this->id;
																			$operacion->monto=$pagocapitalito;
																			$operacion->id_moneda=$this->id_moneda;
																			$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																			$operacion->id_canal=$canalCobranza->id;
																			$operacion->referencia='';
																			$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																			$operacion->monto_mxn=$pagocapitalito;
																			$operacion->usuario=$id_usuario;
																			$operacion->nombre_usuario=$nombreUsuario;
																			$operacion->descripcion=$descripcion_operacion;
																			if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																				$operacion->id_tipo_operacion=3;
																			}else{
																				$operacion->id_tipo_operacion=2;
																			}
																			$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																			$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																			$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																			$operacion->save(false);
		
		
																			$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																			$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																			$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																			$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																			$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																			$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																			$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																			$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																			$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																			$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																			$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																			$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																			$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																			//Arrendamiento
																			$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																			$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																			$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																			$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																			$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																			$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																			$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																			//----------------------
																			$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																			$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																			$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																			$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																			$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																			$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																			$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																			//End Arrendamiento
																			$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																			
																			$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																			$modelLiquidado->pago_restante = 0;
																			$modelLiquidado->pago_total = $amortizacion["pago_total"];
																			$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																			$modelLiquidado->fecha_pago =$fecha;
																			$modelLiquidado->status = "Registrado";
																			$success = $modelLiquidado->save(false);
																		
																		}
		
																	}
																}
																	break;
																}	
														}
														//***********************************************************************/
		
														$amortizaciones_decendentes = Amortizaciones::model()->findAll("id_solicitud=".$solicitud->id." order by id ASC");
														$amortizacionesAUX = Amortizaciones::model()->getAmortizaciones($solicitud);
	
														if(count($amortizaciones_decendentes)>0){
														foreach($amortizaciones_decendentes as $ad){
															$bvalidador=false;
															foreach ($amortizacionesAUX as $amortizacion) {
																if ($amortizacion["id"] == $ad['id'] 
																&& floatval($amortizacion['pago_restante'])>0) {
																	$bvalidador=true;
																	break;
																}else{
																	continue;
																}
															}
		
														
															if($bvalidador==false)continue;
		
															
															//╔═══════════════════╗
															//║ Tomamos capital   ║
															//╚═══════════════════╝
														
															$montocapital = $amortizacion["pago_capital"];
															
															// ............(0 0)
															//╔═══════════════════╗
															//║ Tomamos parciales ║
															//╚═══════════════════╝
															// ............(0 0)
		
															$montoparcial=0;
															$parciales = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=".$amortizacion["id"]);
															$bparciales=false;
															if(count($parciales)>0){
																$bparciales=true;
																foreach($parciales as $p){
																	$montoparcial+=$p->pago_capital;
																}
															}
		
															// ............(0 0)
															//╔═══════════════════╗
															//║ Ajustamos interes ║
															//╚═══════════════════╝
															// ............(0 0)
		
															$montocapital -= $montoparcial;
															$pagocapitalito=0;
		
														
		
															if($montocapital>0 && $montoExcedente>0){
		
		
																if($montoExcedente>$montocapital){
																	$montoExcedente-=$montocapital;
																	$pagocapitalito=$montocapital;
																}else{
																	$pagocapitalito=$montoExcedente;
																	$montoExcedente=0;
																}
		
																// Aqui Disparamos los pagos hacia el interes abonando o liquidando 
																// Segun sea es el caso
																//....._|\____________________,,_____________
																//..../ `--|||||||||||----------------------_]
																//.../_==o __________________________________|
																//.....),---.(_(__) /
																//....// (\) ),------
																//...//__-_//
																//../-----/ ...
																//./____ / ... . 
																
																if($bparciales || ($amortizacion["pago_restante"]-$pagocapitalito)>0){
		
																	
																	
																	// *********************************************************
																	// Aqui fueron varios disparos (Tiene Parcialidades)  ︻╦̵̵͇̿̿̿̿╤──
																	// *********************************************************
																	$referenciaOperacion="t".round(microtime(true) * 1000);
																	$parcialidad=new ParcialidadesAmortizaciones();
																	$parcialidad->id_amortizacion=$amortizacion["id"];
																	$parcialidad->fecha_pago=$fecha;
																	$parcialidad->status="Registrado";
																	$parcialidad->pago_comisiones=0;
																	$parcialidad->pago_moratorios=0;
																	$parcialidad->pago_interes=0;
																	$parcialidad->pago_capital=$pagocapitalito;
		
																	$parcialidad->saldo_inicial=$amortizacion["saldo_inicial"]+
																	$amortizacion["interes_generado"]+$amortizacion["iva_interes_generado"]-
																	$amortizacion["descuento_interes_generado"]+$amortizacion["pago_moratorios"]+$amortizacion["pago_comisiones"]-
																	$amortizacion['parcial_capital']-$amortizacion['parcial_interes']-$amortizacion['parcial_comisiones']-
																	$amortizacion['parcial_moratorios'];
		
																	$parcialidad->pago_total=$pagocapitalito;
																	$parcialidad->pago_con_garantia=0;
																	$parcialidad->saldo_final=$parcialidad->saldo_inicial-$parcialidad->pago_total;
																	$parcialidad->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																	$parcialidad->instrumento=$instrumentoMonetario->id;
																	$parcialidad->idCanal=$canalCobranza->id;
																	$parcialidad->save(false);
		
																	$descripcion_operacion = "Se pago el saldo restante de la amortización " .
																		$amortizacionAux['numero_amortizacion'] .
																	" de la solicitud $solicitud->clave que fue un monto de " . 
																	number_format($parcialidad->pago_total, 2, ".", ",");
														
																	$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																	if(is_null($model_folio) || empty($model_folio)){
																		$folio=1;
																	}else{
																		$folio=$model_folio->folio+1;
																	}
																	$operacion=new Operaciones();
																	$operacion->fecha=$fecha;
																	$operacion->id_moneda=$this->id_moneda;
																	$operacion->folio=$folio;
																	$operacion->id_cliente=$this->id_cliente;
																	$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																	$operacion->id_solicitud=$this->id;
																	$operacion->monto=$pagocapitalito;
																	$operacion->id_moneda=$this->id_moneda;
																	$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																	$operacion->id_canal=$canalCobranza->id;
																	$operacion->referencia='';
																	$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																	$operacion->monto_mxn=$pagocapitalito;
																	$operacion->usuario=$id_usuario;
																	$operacion->nombre_usuario=$nombreUsuario;
																	$operacion->descripcion=$descripcion_operacion;
																	if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																		$operacion->id_tipo_operacion=3;
																	}else{
																		$operacion->id_tipo_operacion=2;
																	}
																	$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																	$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																	$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																	$operacion->save(false);
		
																	$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																	$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																	$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																	$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																	$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																	$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																	$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																	$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																	$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																	$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																	$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																	$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																	$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																	//Arrendamiento
																	$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																	$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																	$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																	$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																	$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																	$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																	$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																	//----------------------
																	$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																	$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																	$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																	$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																	$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																	$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																	$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																	//End Arrendamiento
	
	
	
																	$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
	
	
																	
	
																	if(
																		($amortizacion["pago_restante"]-$pagocapitalito)==0 ||
																		($amortizacion["pago_restante"]-$pagocapitalito)<1
																		
																	){
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																		$modelLiquidado->pago_restante = 0;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago =$fecha;
																		$modelLiquidado->status = "Registrado";
																		$success = $modelLiquidado->save(false);
																	}else{
	
																		$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																		$modelLiquidado->pago_restante = $amortizacion["pago_total"]-$modelLiquidado->pago_realizado;
																		$modelLiquidado->pago_total = $amortizacion["pago_total"];
																		$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																		$modelLiquidado->fecha_pago =null;
																		$modelLiquidado->status = "Calculado";
																		$success = $modelLiquidado->save(false);
																	}
		
																	}else{
		
																		// ******************************************
																		// Aqui Liquidamos de un solo Disparo ︻┳═ 一
																		// ******************************************
		
																		if(($amortizacion["pago_restante"]-$pagocapitalito)<=0){
		
																			$referenciaOperacion="t".round(microtime(true) * 1000);
																			$descripcion_operacion = "Se pago el saldo restante de la amortización " .
																			$amortizacion['numero_amortizacion'] .
																			" de la solicitud $solicitud->clave que fue un monto de " . 
																			number_format($pagocapitalito, 2, ".", ",");
																
		
																			$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
																			if(is_null($model_folio) || empty($model_folio)){
																				$folio=1;
																			}else{
																				$folio=$model_folio->folio+1;
																			}
																			$operacion=new Operaciones();
																			$operacion->fecha=$fecha;
																			$operacion->id_moneda=$this->id_moneda;
																			$operacion->folio=$folio;
																			$operacion->id_cliente=$this->id_cliente;
																			$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
																			$operacion->id_solicitud=$this->id;
																			$operacion->monto=$pagocapitalito;
																			$operacion->id_moneda=$this->id_moneda;
																			$canalCobranza=CanalesCobranza::model()->find("nombre='".$instrumento."'");
																			$operacion->id_canal=$canalCobranza->id;
																			$operacion->referencia='';
																			$operacion->monto_usd=$pagocapitalito*$operacion->id_moneda0->equivalencia_dolar;
																			$operacion->monto_mxn=$pagocapitalito;
																			$operacion->usuario=$id_usuario;
																			$operacion->nombre_usuario=$nombreUsuario;
																			$operacion->descripcion=$descripcion_operacion;
																			if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
																				$operacion->id_tipo_operacion=3;
																			}else{
																				$operacion->id_tipo_operacion=2;
																			}
																			$operacion->id_localidad_pld=$empresa->id_localidad_pld;
																			$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
																			$operacion->referencia_operacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
																			$operacion->save(false);
		
		
																			$modelLiquidado = Amortizaciones::model()->findByPk($amortizacion["id"]);
																			$modelLiquidado->referencia_operacion=$operacion->referencia_operacion;
																			$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
																			$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
																			$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
																			$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
																			$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
																			$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
																			$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
																			$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
																			$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
																			$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
																			$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
																			//Arrendamiento
																			$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
																			$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
																			$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
																			$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
																			$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
																			$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
																			$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
																			//----------------------
																			$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
																			$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
																			$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
																			$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
																			$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
																			$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
																			$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
																			//End Arrendamiento
																			$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
																			
																			$modelLiquidado->pago_realizado = $amortizacion["pago_realizado"]+$pagocapitalito;
																			$modelLiquidado->pago_restante = 0;
																			$modelLiquidado->pago_total = $amortizacion["pago_total"];
																			$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
																			$modelLiquidado->fecha_pago =$fecha;
																			$modelLiquidado->status = "Registrado";
																			$success = $modelLiquidado->save(false);
																		
																		}
		
																	}
		
															  
																}
		
															}
		
		
														}
														// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º>
														//aqui se aplica el excedente sobre capital Recursivamente 
														// ><((((º> ><((((º> ><((((º> ><((((º> ><((((º> 
														
													}
													$amortTemp=$amortizacion;
													break;
										}
									} else {
										if (is_null($solicitud) || empty($solicitud)) {
											$errores_detalles .= "Condonación {$canal} fallida ({$this->clave},{$fecha},{$monto}}), la clave de solicitud {$this->clave} no fue encontrada. <br>";
										} elseif (is_null($amortizacion) || empty($amortizacion)) {
											if (is_null($amortizaciones) || empty($amortizaciones) || $amortizacion['id'] <= 0) {
												$errores_detalles .= "Condonación {$canal} fallida ({$this->clave},{$fecha},{$monto}}), la solicitud {$this->clave} no se encuentra dispuesta aun. <br>";
											} elseif (is_null($seleccionado) || empty($seleccionado)) {
												$errores_detalles .= "Condonación {$canal} fallida ({$this->clave},{$fecha},{$monto}}), la solicitud {$this->clave} ya no tiene pagos por realizar. <br>";
											}
										}
										if (empty($monto) || $monto <= 0) {
											$errores_detalles .= "Condonación {$canal} fallida ({$this->clave},{$fecha},{$monto}}), El monto no puede 0 o menor. <br>";
										}
										if ($fecha < $fecha_ultimo_pago) {
											$errores_detalles .= "Condonación {$canal} fallida ({$this->clave},{$fecha},{$monto}}), Existen pagos anteriores en la solicitud con fechas mayores a {$fecha}. <br>";
										}
										$failed++;
										if((is_null($errores_detalles) || empty($errores_detalles)) && $errores_detalles!=""){
											$result=array(
												'id'=>$pago['id'],
												'mensaje'=>$errores_detalles,
											);
											if($cola!="openpay"){
												return $result;
											}else{
												return false;
											}
										}
									}
								} else{
									$montoAuxC=$monto;
									$amortizacionesAuxC=$amortizaciones;
									$c=0;
									foreach ($amortizacionesAuxC as $amort){
										if($montoAuxC>=round($amort['pago_restante'],2) && $amort['status']=='Calculado'){
											$amortPagar[$c]['numero']=$amort['numero_amortizacion'];
											$amortPagar[$c]['monto']=$amort['pago_restante'];
											if($amort['pago_realizado']>0){
												$amortPagar[$c]['status']="Liquidado-Parcial";
											}else{
												$amortPagar[$c]['status']="Liquidado";
											}
											$montoAuxC-=$amort['pago_restante'];
											$montoAuxC=round($montoAuxC,2);
										}else if($montoAuxC>0 && $amort['status']=='Calculado'){
											$amortPagar[$c]['numero']=$amort['numero_amortizacion'];
											$amortPagar[$c]['monto']=$montoAuxC;
											$amortPagar[$c]['status']="Parcial";
											$montoAuxC=0;
										}
										$c++;
										if($montoAuxC<=0){
											break;
										}
									}
									$referenciaOperacion="u".$id_usuario."s".$this->id."c".$this->id_cliente.$referenciaOperacion;
									$liquidada=false;
									$montoAplicar=$monto;
									$descripcion_operacion="";
									foreach ($amortizacionesAuxC as $amortC){
										foreach ($amortPagar as $key => $amortP){
											if($amortP['numero']==$amortC['numero_amortizacion']){
												if($amortP['status']=='Liquidado'){
													//amortizacion
													$amortizacionP=Amortizaciones::model()->findByPk($amortC['id']);
													$amortizacionP->interes_generado=$amortC['interes_generado'];
													$amortizacionP->pago_capital=$amortC['pago_capital'];
													$amortizacionP->pago_interes=$amortC['pago_interes'];
													$amortizacionP->interes_real_generado=$amortC['interes_real_generado'];
													$amortizacionP->pago_moratorios=$amortC['pago_moratorios'];
													$amortizacionP->iva_moratorios=$amortC['iva_moratorios'];
													$amortizacionP->pago_comisiones=$amortC['pago_comisiones'];
													$amortizacionP->pago_seguro=$amortC['pago_seguro'];
													$amortizacionP->pago_realizado=$amortC['pago_realizado']+$amortP['monto'];
													$amortizacionP->pago_restante=0;
													$amortizacionP->pago_total=$amortC['pago_realizado']+$amortP['monto'];
													$amortizacionP->status_pago=$statuspago;
													$amortizacionP->referencia_operacion=$referenciaOperacion;
													$amortizacionP->fecha_pago=$fecha;
													$amortizacionP->status='Registrado';
													$amortizacionP->idCanal=$canalCobranza->id;
													$amortizacionP->save(false);
													$success = ($masivo) ? $masivo : $amortizacionP->createPolizaDiario();
													$liquidada=true;
													$textoDisp="";
													if(isset($disposicion)){
														$textoDisp.=" de la disposición ".$disposicion->clave;
													}
													$descripcion_operacion.= "Se pago completamente la amortización " . $amortC['numero_amortizacion'] . $textoDisp . " de la solicitud $this->clave que fue un monto de " . number_format($amortP['monto'], 2, ".", ",")." ";
													if($cola!="openpay" && get_class(Yii::app()) == "CConsoleApplication"){
														echo "[".$this->wsTime()."] ".gethostname().$this->charTS()." / ".$database." ".$cola." - Amortizacion ".$amortC['numero_amortizacion']." pagada. \n";
													}
													$liquidacionAnterior=true;
													$montoAplicar-=$amortP['monto'];
												}else if($amortP['status']=='Liquidado-Parcial'){
													//Parcialidad
													$parcialidad=new ParcialidadesAmortizaciones();
													$parcialidad->id_amortizacion=$amortC["id"];
													$parcialidad->fecha_pago=$fecha;
													$parcialidad->status="Registrado";
													$parcialidad->pago_comisiones=($amortC['pago_comisiones']-$amortC['parcial_comisiones'])<0?0:($amortC['pago_comisiones']-$amortC['parcial_comisiones']);
													$parcialidad->pago_moratorios=($amortC['pago_moratorios']-$amortC['parcial_moratorios'])<0?0:($amortC['pago_moratorios']-$amortC['parcial_moratorios']);
													$parcialidad->pago_interes=($amortC['pago_interes']-$amortC['parcial_interes'])<0?0:($amortC['pago_interes']-$amortC['parcial_interes']);
													$parcialidad->pago_capital=($amortC['pago_capital']-$amortC['parcial_capital'])<0?0:($amortC['pago_capital']-$amortC['parcial_capital']);
													$parcialidad->pago_seguro=($amortC['pago_seguro']-$amortC['pago_seguro'])<0?0:($amortC['pago_seguro']-$amortC['parcial_seguro']);
													$parcialidad->saldo_inicial=$amortC["saldo_inicial"]+$amortC["interes_generado"]+$amortC["iva_interes_generado"]-$amortC["descuento_interes_generado"]+$amortC["pago_moratorios"]+$amortC["pago_comisiones"]-$amortC['parcial_capital']-$amortC['parcial_interes']-$amortC['parcial_comisiones']-$amortC['parcial_moratorios']+$amortC['pago_seguro']-$amortC['parcial_seguro'];
													$parcialidad->pago_total=$parcialidad->pago_capital+$parcialidad->pago_interes+$parcialidad->pago_comisiones+$parcialidad->pago_moratorios+$parcialidad->pago_seguro;
													$parcialidad->pago_con_garantia=$parcialidad->pago_total;
													$parcialidad->saldo_final=$parcialidad->saldo_inicial-$parcialidad->pago_total;
													$parcialidad->referencia_operacion=$referenciaOperacion;
													$parcialidad->instrumento=$instrumentoMonetario->id;
													$parcialidad->idCanal=$canalCobranza->id;
													$parcialidad->save(false);
													$success = ($masivo) ? $masivo : $parcialidad->createPolizaDiario();
													//amortizacion
													$amortizacionP=Amortizaciones::model()->findByPk($amortC['id']);
													$amortizacionP->interes_generado=$amortC['interes_generado'];
													$amortizacionP->pago_capital=$amortC['pago_capital'];
													$amortizacionP->pago_interes=$amortC['pago_interes'];
													$amortizacionP->interes_real_generado=$amortC['interes_real_generado'];
													$amortizacionP->pago_moratorios=$amortC['pago_moratorios'];
													$amortizacionP->iva_moratorios=$amortC['iva_moratorios'];
													$amortizacionP->pago_comisiones=$amortC['pago_comisiones'];
													$amortizacionP->pago_seguro=$amortC['pago_seguro'];
													$amortizacionP->pago_realizado=$amortC['pago_realizado']+$parcialidad->pago_total;
													$amortizacionP->pago_restante=0;
													$amortizacionP->pago_total=$amortC['pago_realizado']+$parcialidad->pago_total;
													$amortizacionP->status_pago=$statuspago;
													$amortizacionP->referencia_operacion=$referenciaOperacion;
													$amortizacionP->fecha_pago=$fecha;
													$amortizacionP->status='Registrado';
													$amortizacionP->save(false);
													//$amortizacionP->createPolizaDiario();
													$liquidada=true;
													$textoDisp="";
													if(isset($disposicion)){
														$textoDisp.=" de la disposición ".$disposicion->clave;
													}
													$descripcion_operacion.= "Se pago el saldo restante de la amortización " . $amortC['numero_amortizacion'] . $textoDisp . " de la solicitud $this->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",")." ";
													if($cola!="openpay" && get_class(Yii::app()) == "CConsoleApplication"){
														echo "[".$this->wsTime()."] ".gethostname().$this->charTS()." / ".$database." ".$cola. " - Amortizacion ".$amortC['numero_amortizacion']." pagada. \n";
													}
													$liquidacionAnterior=true;
													$montoAplicar-=$amortP['monto'];
												}else if($amortP['status']=='Parcial'){
													//Parcialidad
													$montoParcialidad=$montoAplicar;
													$parcialComisiones=0;
													$parcialMoratorios=0;
													$parcialInteres=0;
													$parcialCapital=0;
													if($montoParcialidad>($amortC['pago_comisiones']-$amortC['parcial_comisiones'])){
														$parcialComisiones=($amortC['pago_comisiones']-$amortC['parcial_comisiones']);
														$montoParcialidad-=$parcialComisiones;
													}else{
														$parcialComisiones=$montoParcialidad;
														$montoParcialidad=0;
													}
													if($montoParcialidad>($amortC['pago_seguro']-$amortC['parcial_seguro'])){
														$parcialSeguro=($amortC['pago_seguro']-$amortC['parcial_seguro']);
														$montoParcialidad-=$parcialSeguro;
													}else{
														$parcialSeguro=$montoParcialidad;
														$montoParcialidad=0;
													}
													if($montoParcialidad>($amortC['pago_moratorios']-$amortC['parcial_moratorios'])){
														$parcialMoratorios=($amortC['pago_moratorios']-$amortC['parcial_moratorios']);
														$montoParcialidad-=$parcialMoratorios;
													}else{
														$parcialMoratorios=$montoParcialidad;
														$montoParcialidad=0;
													}
													if($montoParcialidad>($amortC['pago_interes']-$amortC['parcial_interes'])){
														$parcialInteres=($amortC['pago_interes']-$amortC['parcial_interes']);
														$montoParcialidad-=$parcialInteres;
													}else{
														$parcialInteres=$montoParcialidad;
														$montoParcialidad=0;
													}
													if($montoParcialidad>($amortC['pago_capital']-$amortC['parcial_capital'])){
														$parcialCapital=($amortC['pago_capital']-$amortC['parcial_capital']);
														$montoParcialidad-=$parcialCapital;
													}else{
														$parcialCapital=$montoParcialidad;
														$montoParcialidad=0;
													}
													$parcialidad=new ParcialidadesAmortizaciones();
													$parcialidad->id_amortizacion=$amortC["id"];
													$parcialidad->fecha_pago=$fecha;
													$parcialidad->status="Registrado";
													$parcialidad->pago_comisiones=$parcialComisiones;
													$parcialidad->pago_moratorios=$parcialMoratorios;
													$parcialidad->pago_interes=$parcialInteres;
													$parcialidad->pago_capital=$parcialCapital;
													$parcialidad->pago_seguro=$parcialSeguro;
													$parcialidad->saldo_inicial=$amortC["saldo_inicial"]+$amortC["interes_generado"]+$amortC["iva_interes_generado"]-$amortC["descuento_interes_generado"]+$amortC["pago_moratorios"]+$amortC["pago_comisiones"]-$amortC['parcial_capital']-$amortC['parcial_interes']-$amortC['parcial_comisiones']-$amortC['parcial_moratorios']+$amortC['pago_seguro']-$amortC['parcial_seguro'];
													$parcialidad->pago_total=$parcialidad->pago_capital+$parcialidad->pago_interes+$parcialidad->pago_comisiones+$parcialidad->pago_moratorios+$parcialidad->pago_seguro;
													$parcialidad->pago_con_garantia=$parcialidad->pago_total;
													$parcialidad->saldo_final=$parcialidad->saldo_inicial-$parcialidad->pago_total;
													$parcialidad->referencia_operacion=$referenciaOperacion;
													$parcialidad->instrumento=$instrumentoMonetario->id;
													$parcialidad->idCanal=$canalCobranza->id;
													$parcialidad->save(false);
													//amortizacion
													$amortizacionP=Amortizaciones::model()->findByPk($amortC['id']);
													$amortizacionP->interes_generado=$amortC['interes_generado'];
													$amortizacionP->pago_capital=$amortC['pago_capital'];
													$amortizacionP->pago_interes=$amortC['pago_interes'];
													$amortizacionP->interes_real_generado=$amortC['interes_real_generado'];
													$amortizacionP->pago_moratorios=$amortC['pago_moratorios'];
													$amortizacionP->iva_moratorios=$amortC['iva_moratorios'];
													$amortizacionP->pago_comisiones=$amortC['pago_comisiones'];
													$amortizacionP->pago_seguro=$amortC['pago_seguro'];
													$amortizacionP->pago_realizado=$amortC['pago_realizado']+$parcialidad->pago_total;
													$amortizacionP->pago_total=$amortC['pago_realizado']+$parcialidad->pago_total;
													$amortizacionP->pago_restante=$amortC["pago_total"]-$amortC["pago_realizado"];
													$amortizacionP->save(false);
													$success = ($masivo) ? $masivo : $parcialidad->createPolizaDiario();
													$textoDisp="";
													if(isset($disposicion)){
														$textoDisp.=" de la disposición ".$disposicion->clave;
													}
													$descripcion_operacion.= "Se pago una parte de la amortización " . $amortC['numero_amortizacion'] . $textoDisp . " de la solicitud $this->clave que fue un monto de " . number_format($parcialidad->pago_total, 2, ".", ",")." ";
													$montoAplicar-=$amortP['monto'];
												}
												if($evaluar_fechaPrimerIncumplimiento AND $this->fechaPrimerIncumplimiento==$amortC['fecha_amortizacion'] ){
													$this->fechaPrimerIncumplimiento = Null;
												}
												unset($amortPagar[$key]);
											}
										}
										if(!isset($amortP) || empty($amortP)){
	
										}
									}
									//operacion
									$model_folio = Operaciones::model ()->find(array('order'=>'folio DESC'));
									if(is_null($model_folio) || empty($model_folio)){
										$folio=1;
									}else{
										$folio=$model_folio->folio+1;
									}
									$operacion=new Operaciones();
									$operacion->fecha=$fecha;
									$operacion->id_moneda=$this->id_moneda;
									$operacion->folio=$folio;
									$operacion->id_cliente=$this->id_cliente;
									$operacion->id_instrumento_monetario=$instrumentoMonetario->id;
									$operacion->id_solicitud=$this->id;
									if(isset($disposicion)){
										$operacion->id_disposicion=$disposicion->id;
									}
									$operacion->monto=$monto;
									$operacion->id_moneda=$this->id_moneda;
									$canalCobranza=CanalesCobranza::model()->find("nombre='".$canal."'");
									$operacion->id_canal=$canalCobranza->id;
									$operacion->referencia=$referenciaOperacion;
									$operacion->monto_usd=$operacion->monto*$operacion->id_moneda0->equivalencia_dolar;
									$operacion->monto_mxn=$monto;
									$operacion->usuario=$id_usuario;
									$operacion->nombre_usuario=$nombreUsuario;
									$operacion->descripcion=$descripcion_operacion;
									if($this->id_producto0->id_tipo_producto==8){//Arrendamiento puro
										$operacion->id_tipo_operacion=3;
									}else{
										$operacion->id_tipo_operacion=2;
									}
									$operacion->id_localidad_pld=$empresa->id_localidad_pld;
									$operacion->codigo_postal=$empresa->id_codigo_postal0->codigo_postal;
									$operacion->referencia_operacion=$referenciaOperacion;
									if(get_class(Yii::app()) == "CConsoleApplication" || $pago['opImportacion']==1){
										$operacion->importado = ($masivo) ? 1:0;
									}
									$operacion->save(false);
									$success = ($masivo) ? $operacion->createPolizaDiario() : $masivo;
									$monto=0;
								}
							}else{
								$id_reg=$pago['id'];
								$msj="No se puede procesar este registro: ".$id_reg." por la columna tipo: ".$tipo.", no existe.";
									$result=array(
										'estado'=>false,
										'id'=>$id_reg,
										'mensaje'=>$msj,
									);
									return $result;
							}
						}else{
							$result=array(
								'id'=>$pago['id'],
								'mensaje'=>"No hay amortizaciones por pagar",
								'pago_no_aplicado' => $pagos[$puntero]
							);
							return $result;
						}
						if(isset($operacion->id)){
							$success = ($masivo) ? $operacion->createPolizaDiario() : $masivo;
						}
                        $pagos[$puntero]['monto']=$monto;
                        if($pagos[$puntero]['monto']==0){
                            if($cola!="openpay" && get_class(Yii::app()) == "CConsoleApplication"){
                                echo "[".$this->wsTime()."] ".gethostname().$this->charTS()." / ".$database." ".$cola. " - Pago ".($puntero+1)." finalizado. \n";
                            }
                            $puntero++;
                        }
                        if(is_null($pagos[$puntero]) || empty($pagos[$puntero])){
                            $pagar=false;
                            $liquidada=true;
                            $finalizado=true;
                        }
                    }else{
                        $liquidada=true;
                    }
                } #regresar
                if($liquidacionAnterior==false){
                    if($cola!="openpay" && get_class(Yii::app()) == "CConsoleApplication"){
                        echo "[".$this->wsTime()."] ".gethostname().$this->charTS()." / ".$database." ".$cola. " - Amortizacion ".$amortizacion['numero_amortizacion']." pagada. \n";
                    }
                }
            }
            if($cola!="openpay" && get_class(Yii::app()) == "CConsoleApplication"){
                echo "[".$this->wsTime()."] ".gethostname().$this->charTS()." / ".$database." ".$cola. " - ".($puntero+1)." Pagos procesados correctamente. \n";
            }
            $result=array();
            foreach ($pagos as $pago){
                if($pago['monto']>0){
                    $result=array(
                        'id'=>$pago['id'],
                        'mensaje'=>'No se pueden realizar mas pagos en esta solicitud.',
                    );
                    if($cola!="openpay"){
                        return $result;
                    }else{
                        return false;
                    }
                }
            }
			}catch (Exception $e) {
				//posibilidad de cambio			
				$result=array(
					'estado'=>false,
					'mensaje'=>'Rcd ->'.$pago['id']."Error \n".$e->getTraceAsString() ." ".$e->getMessage(),
				);
				return $result;
			}
			
		}else{			
            return false;
        }
        return true;
	}

    function wsTime() {
        try {
            $step=0;
            try1:
            \Carbon\Carbon::setUTF8(true);
            $newLocale = setlocale(LC_TIME, 'Spanish');
            $now = Carbon::instance(DateTime::createFromFormat('U.u', microtime(true)));
            $dateLRun = new \Carbon\Carbon($now->format('Y-m-d H:i:s.u'), 'UTC');
            $dateLRun->setTimezone('America/Merida');
            return $dateLRun->formatLocalized('%A  %d %h %Y %H:%M:%S.').substr($now->format('u'), 0, 4).$dateLRun->formatLocalized(' %z %Z');
        } catch (Exception $e) {
            $step=$step+1;
            sleep(1);
            if ($step > 2) {
                throw new \Error('Test exception outside of control Solicitudes 6304.');
            }
            goto try1;
        }
    }

    function charTS ()
    {
        if (gethostname() == 'host.financialgroup.mx') {
            return chr(9).chr(9) ;
        } else {
            return chr(9).chr(9);
        }
    }

	public function getCalificacionCalculada(){
		$modelProducto=Productos::model()->findByPk($this->id_producto);
		$modelDataClientes=new DatosClientes();
		$modelDataClientes->id_solicitud=$this->id;
		$criteriaCualitativos=new CDbCriteria();
		$criteriaCualitativos->alias='pcl';
		$criteriaCualitativos->join="LEFT JOIN valores v ON(pcl.id_valor=v.id) LEFT JOIN rangos r ON(pcl.id_rango=r.id) LEFT JOIN variables var ON(r.id_variable=var.id or v.id_variable=var.id) LEFT JOIN clases_variables cv ON(var.id_clase_variable=cv.id)";
		$criteriaCualitativos->order="cv.nombre,var.nombre,pcl.id ASC";
		$criteriaCualitativos->condition="pcl.id_parametrico=".$this->id_parametrico;
		$criteriaCualitativos->select=array('pcl.*','v.valor AS nombre_valor','pcl.id_valor AS id_valor','CONCAT(r.comparador1,r.valor1,\' y \',r.comparador2,r.valor2,\' \',r.unidad) AS nombre_rango','r.id AS id_rango','cv.nombre AS nombre_clase_variable','cv.id AS id_clase_variable');
		$modelCualitativos = PuntajesCualitativos::model()->findAll($criteriaCualitativos);

		$modelCuantitativos=PuntajesCuantitativos::model()->findAllByAttributes(array('id_parametrico'=>$this->id_parametrico));
		$modelCuantitativosI=$modelDataClientes->getVariablesCuantitativas();//Utiliza la solicitud de la session, obtiene las variables cuantitativas que se debieron capturar, la variable anterior obtiene las variables cuantitativas que se capturaron
		$modelDatosCliente=DatosClientes::model()->findAllByAttributes(array('id_solicitud'=>$this->id));

		if(!isset($this->fecha_aceptacion) || $this->fecha_aceptacion==0){
			$this->fecha_aceptacion=date("Y-m-d H:i:s");
		}
		$modelSolicitud=$this;

		$i=0;
		$restringir=false;
		foreach ($modelCualitativos as $opcion){
			$clase_actual=($opcion->id_valor)?$opcion->id_valor0->id_variable0->id_clase_variable:$opcion->id_rango0->id_variable0->id_clase_variable;
			$clase_actual_nombre=($opcion->id_valor)?$opcion->id_valor0->id_variable0->id_clase_variable0->nombre:$opcion->id_rango0->id_variable0->id_clase_variable0->nombre;
			$variable_actual=($opcion->id_valor)?$opcion->id_valor0->id_variable:$opcion->id_rango0->id_variable;
			$variable_actual_nombre=($opcion->id_valor)?$opcion->id_valor0->id_variable0->nombre:$opcion->id_rango0->id_variable0->nombre;
			if($i>0){
				if($clase_actual!==$clase_anterior){
					$finClase=true;
				};
				if($variable_actual!==$variable_anterior){
					if(!$respondido){//Si no se respondio la variable
						$dato=new DatosClientes();
						$dato->id_solicitud=$modelSolicitud->id;
						$dato->id_variable=$variable_anterior;
						$dato->nombre_variable=$variable_anterior_nombre;
						$dato->respuesta=DatosClientes::model()->findByAttributes(array('id_solicitud'=>$modelSolicitud->id,'id_variable'=>$variable_anterior))->respuesta;
						if($dato->id_variable0->tipo_variable=="Cualitativo por valor"){
							$max=$dato->dbConnection->createCommand("SELECT MAX(puntos) FROM puntajes_cualitativos p LEFT JOIN valores v ON(p.id_valor=v.id) WHERE p.id_parametrico='$modelSolicitud->id_parametrico' AND v.id_variable='{$dato->id_variable}'")->queryScalar();
							$min=$dato->dbConnection->createCommand("SELECT MIN(puntos) FROM puntajes_cualitativos p LEFT JOIN valores v ON(p.id_valor=v.id) WHERE p.id_parametrico='$modelSolicitud->id_parametrico' AND v.id_variable='{$dato->id_variable}'")->queryScalar();

						}elseif($dato->id_variable0->tipo_variable=="Cualitativo por rango"){//Si es por rango
							$max=$dato->dbConnection->createCommand("SELECT MAX(puntos) FROM puntajes_cualitativos p LEFT JOIN rangos r ON(p.id_rango=r.id) WHERE p.id_parametrico='$modelSolicitud->id_parametrico' AND r.id_variable='{$dato->id_variable}'")->queryScalar();
							$min=$dato->dbConnection->createCommand("SELECT MIN(puntos) FROM puntajes_cualitativos p LEFT JOIN rangos r ON(p.id_rango=r.id) WHERE p.id_parametrico='$modelSolicitud->id_parametrico' AND r.id_variable='{$dato->id_variable}'")->queryScalar();
						}
					}
					$respondido=false;//Si hay un dato del cliente capturado para la variable

					//Sumar los puntos de la variable a los puntos de la clase
					$pts_cls_cl=$pts_cls_cl+$pts_var_cl;
					//Reiniciar los puntos de la variable
					$pts_var_cl=0;
					//Sumar los puntos maximo y minimo de la variable a los puntos maximo y minimo de la clase
					$pts_max_cls_cl=$pts_max_cls_cl+$pts_max_var_cl;
					$pts_min_cls_cl=$pts_min_cls_cl+$pts_min_var_cl;
					//Reiniciar los puntos maximo y minimo de la variable con el primer valor del rango o valor
					$pts_max_var_cl=$opcion->puntos;
					$pts_min_var_cl=$opcion->puntos;
					//Reiniciar html de opciones
					if($finClase){
						//Sumar los puntos de la clase obtenidos
						$pts_cl=$pts_cl+$pts_cls_cl;
						//Reiniciar los puntos de la clase
						$pts_cls_cl=0;

						$pts_max_cl=$pts_max_cl+$pts_max_cls_cl;
						$pts_min_cl=$pts_min_cl+$pts_min_cls_cl;
						//Reiniciar los puntos maximo y minimo de la clase
						$pts_max_cls_cl=0;
						$pts_min_cls_cl=0;
						//Reiniciar html de variables
						$finClase=false;
					}
				};
			}
			foreach ($modelDatosCliente as $dato){//Recorrer las respuestas para ver cuantos puntos se van a sumar
				if($dato->id_variable==$variable_actual){//Si el dato es del mismo tipo de variable que la variable actual
					if(isset($opcion->id_valor)){//Si es por valor
						$max=$dato->dbConnection->createCommand("SELECT MAX(puntos) FROM puntajes_cualitativos p LEFT JOIN valores v ON(p.id_valor=v.id) WHERE p.id_parametrico='$opcion->id_parametrico' AND v.id_variable='{$opcion->id_valor0->id_variable}'")->queryScalar();
						$min=$dato->dbConnection->createCommand("SELECT MIN(puntos) FROM puntajes_cualitativos p LEFT JOIN valores v ON(p.id_valor=v.id) WHERE p.id_parametrico='$opcion->id_parametrico' AND v.id_variable='{$opcion->id_valor0->id_variable}'")->queryScalar();
						if($opcion->id_valor0->valor==$dato->respuesta){
							if($opcion->id_valor0->restringir==1){
								$restringir=true;
							}
							$pts_var_cl=$pts_var_cl+$opcion->puntos;

							$respondido=true;
							break;
						}
					}elseif(isset($opcion->id_rango)){//Si es por rango
						$max=$dato->dbConnection->createCommand("SELECT MAX(puntos) FROM puntajes_cualitativos p LEFT JOIN rangos r ON(p.id_rango=r.id) WHERE p.id_parametrico='$opcion->id_parametrico' AND r.id_variable='{$opcion->id_rango0->id_variable}'")->queryScalar();
						$min=$dato->dbConnection->createCommand("SELECT MIN(puntos) FROM puntajes_cualitativos p LEFT JOIN rangos r ON(p.id_rango=r.id) WHERE p.id_parametrico='$opcion->id_parametrico' AND r.id_variable='{$opcion->id_rango0->id_variable}'")->queryScalar();
						try {
						    @eval('$resultado=('.$dato->respuesta.$opcion->id_rango0->comparador1.$opcion->id_rango0->valor1.' AND '.$dato->respuesta.$opcion->id_rango0->comparador2.$opcion->id_rango0->valor2.');');
						} catch (ParseError $e) {
						    $resultado=0;
						}
						if($resultado){
							$pts_var_cl=$pts_var_cl+$opcion->puntos;
							if($opcion->id_rango0->restringir==1){
								$restringir=true;
							}
							$respondido=true;
							break;
						}
					}
				}
			}

			if($i==0){
				$pts_max_var_cl=$opcion->puntos;
				$pts_min_var_cl=$opcion->puntos;
			}else{
				if($pts_max_var_cl<$opcion->puntos){
					$pts_max_var_cl=$opcion->puntos;
				}elseif($pts_min_var_cl>$opcion->puntos){
					$pts_min_var_cl=$opcion->puntos;
				}
			}

			$variable_anterior=$variable_actual;
			$variable_anterior_nombre=$variable_actual_nombre;
			$clase_anterior=$clase_actual;
			$clase_anterior_nombre=$clase_actual_nombre;
			$i=$i+1;

			if($i==count($modelCualitativos)){
				if(!$respondido){//Si no se respondio la variable
					$dato=new DatosClientes();
					$dato->id_solicitud=$modelSolicitud->id;
					$dato->id_variable=$variable_anterior;
					$dato->nombre_variable=$variable_anterior_nombre;
					if($dato->id_variable0->tipo_variable=="Cualitativo por valor"){
						$max=$dato->dbConnection->createCommand("SELECT MAX(puntos) FROM puntajes_cualitativos p LEFT JOIN valores v ON(p.id_valor=v.id) WHERE p.id_parametrico='$modelSolicitud->id_parametrico' AND v.id_variable='{$dato->id_variable}'")->queryScalar();
						$min=$dato->dbConnection->createCommand("SELECT MIN(puntos) FROM puntajes_cualitativos p LEFT JOIN valores v ON(p.id_valor=v.id) WHERE p.id_parametrico='$modelSolicitud->id_parametrico' AND v.id_variable='{$dato->id_variable}'")->queryScalar();
					}elseif($dato->id_variable0->tipo_variable=="Cualitativo por rango"){//Si es por rango
						$max=$dato->dbConnection->createCommand("SELECT MAX(puntos) FROM puntajes_cualitativos p LEFT JOIN rangos r ON(p.id_rango=r.id) WHERE p.id_parametrico='$modelSolicitud->id_parametrico' AND r.id_variable='{$dato->id_variable}'")->queryScalar();
						$min=$dato->dbConnection->createCommand("SELECT MIN(puntos) FROM puntajes_cualitativos p LEFT JOIN rangos r ON(p.id_rango=r.id) WHERE p.id_parametrico='$modelSolicitud->id_parametrico' AND r.id_variable='{$dato->id_variable}'")->queryScalar();
					}
				}
				$respondido=false;//Si hay un dato del cliente capturado para la variable
				//Sumar los puntos de la variable a los puntos de la clase
				$pts_cls_cl=$pts_cls_cl+$pts_var_cl;
				//Sumar los puntos maximo y minimo de la variable a los puntos maximo y minimo de la clase
				$pts_max_cls_cl=$pts_max_cls_cl+$pts_max_var_cl;
				$pts_min_cls_cl=$pts_min_cls_cl+$pts_min_var_cl;

				//--------------Agregar la ultima clase
				//Sumar los puntos de la clase a los puntos del tipo de variable
				$pts_cl=$pts_cl+$pts_cls_cl;
				//Sumar los puntos maximo y minimo de la clase a los puntos maximo y minimo del tipo de variable
				$pts_max_cl=$pts_max_cl+$pts_max_cls_cl;
				$pts_min_cl=$pts_min_cl+$pts_min_cls_cl;
				//---------------------------------------
			}
		}

		$nCuantitativos=0;
		foreach ($modelCuantitativosI as $variableI){//I de input, es una variable que se debe ingresar, es decir un input
			$nCuantitativos++;
			$respondido=false;
			foreach ($modelDatosCliente as $dato){
				if($variableI->tipo_variable=='Cuantitativo'){
					if($dato->id_variable==$variableI->id){
						$respondido=true;
					}
				}
			}
			if(!$respondido){
				$dato=new DatosClientes();
				$dato->id_solicitud=$modelSolicitud->id;
				$dato->id_variable=$variableI->id;
				$dato->nombre_variable=$variableI->nombre;
			}
		}

		//Mostrar las formulas de los puntajes
		$i=0;
		foreach ($modelCuantitativos as $key=>$expresion){
			$clase_actual=$expresion->id_clase_variable;
			$clase_actual_nombre=$expresion->id_clase_variable0->nombre;
			if($i>0){
				if($clase_actual!==$clase_anterior){
					//Sumar los puntos de la clase a los puntos del tipo de variable
					$pts_ct=$pts_ct+$pts_cls_ct;
					//Reiniciar los puntos de la clase
					$pts_cls_ct=0;
					//Sumar los puntos maximo y minimo de la clase a los puntos maximo y minimo del tipo de variable
					$pts_max_ct=$pts_max_ct+$pts_max_cls_ct;
					$pts_min_ct=$pts_min_ct+$pts_min_cls_ct;
					//Reiniciar los puntos maximo y minimo de la clase
					$pts_max_cls_ct=0;
					$pts_min_cls_ct=0;
				};
			}

			$exp=$expresion->expresion;
			$formulas=PuntajesCuantitativos::model()->getFormulas();
			$reemplazos=array();
			foreach ($formulas as $formula){
				$reemplazos[$formula->nombre]="({$formula->formula})";
			}
			foreach ($modelDatosCliente as $dato){
				if(isset($dato->id_variable0->nombre) and $dato->id_variable0->nombre!=""){
					$reemplazos[$dato->id_variable0->nombre]="$dato->respuesta";
				}
			}
			foreach ($modelCuantitativosI as $dato2){
				if(isset($dato2->nombre) and $dato2->nombre!=""){
					if(!isset($reemplazos[$dato2->nombre])){
						$reemplazos[$dato2->nombre]=0;//Por defecto las que no se capturaron tienen valor cero
					}
				}
			}

			$contador=0;
			do{
				$contador++;
				$expOld=$exp;
				$exp=strtr($exp, $reemplazos);
			}while($exp!=$expOld && $contador<1000);
			/*foreach ($modelDatosCliente as $dato){
				if($dato->id_variable0->tipo_variable=="Cuantitativo"){
					$exp=str_replace($dato->id_variable0->nombre, $dato->respuesta, $exp);
				}
			}*/
			//Comprobar que no exp no tenga caracteres que no sean numeros u operadores
			$permitidos = " 0123456789+-*/().><=";
			for ($j=0; $j<strlen($exp); $j++){
				if (strpos($permitidos, substr($exp,$j,1))===false){
					$exp="false";//Para que lo valide como que no cumple
				}
			}

			if($expresion->puntos_si<$expresion->puntos_no){
				$max=$expresion->puntos_no;
				$min=$expresion->puntos_si;
			}else{
				$max=$expresion->puntos_si;
				$min=$expresion->puntos_no;
			}
			$resultado;
			if($exp!=""){
				@eval('$resultado=('.$exp.');');
			}else{
				$resultado=0;
			}
			if($resultado){
				$puntos=$expresion->puntos_si;
			}else{
				$puntos=$expresion->puntos_no;
			}

			if($resultado){
				$pts_cls_ct=$pts_cls_ct+$expresion->puntos_si;
			}else{
				$pts_cls_ct=$pts_cls_ct+$expresion->puntos_no;
			}

			if($expresion->puntos_si>$expresion->puntos_no){
				$pts_max_cls_ct=$pts_max_cls_ct+$expresion->puntos_si;
				$pts_min_cls_ct=$pts_min_cls_ct+$expresion->puntos_no;
			}else{
				$pts_max_cls_ct=$pts_max_cls_ct+$expresion->puntos_no;
				$pts_min_cls_ct=$pts_min_cls_ct+$expresion->puntos_si;
			}


			$clase_anterior=$clase_actual;
			$clase_anterior_nombre=$clase_actual_nombre;
			$i=$i+1;
			if($i==count($modelCuantitativos)){
				//Sumar los puntos maximo y minimo de la clase a los puntos maximo y minimo del tipo de variable
				$pts_ct=$pts_ct+$pts_cls_ct;
				//Sumar los puntos maximo y minimo de la clase a los puntos maximo y minimo del tipo de variable
				$pts_max_ct=$pts_max_ct+$pts_max_cls_ct;
				$pts_min_ct=$pts_min_ct+$pts_min_cls_ct;
				//---------------------------------------
			}
		}

		//Calcular calificaciones
		$pts_max=$modelSolicitud->id_parametrico0->ponderacion_cualitativo*$pts_max_cl+$modelSolicitud->id_parametrico0->ponderacion_cuantitativo*$pts_max_ct;
		$pts_min=$modelSolicitud->id_parametrico0->ponderacion_cualitativo*$pts_min_cl+$modelSolicitud->id_parametrico0->ponderacion_cuantitativo*$pts_min_ct;
		$pts_gris=$modelSolicitud->id_parametrico0->zona_gris_cualitativo*$modelSolicitud->id_parametrico0->ponderacion_cualitativo*$pts_max_cl+$modelSolicitud->id_parametrico0->zona_gris_cuantitativo*$modelSolicitud->id_parametrico0->ponderacion_cuantitativo*$pts_max_ct;
		$pts_aprobacion=$modelSolicitud->id_parametrico0->zona_aprobacion_cualitativo*$modelSolicitud->id_parametrico0->ponderacion_cualitativo*$pts_max_cl+$modelSolicitud->id_parametrico0->zona_aprobacion_cuantitativo*$modelSolicitud->id_parametrico0->ponderacion_cuantitativo*$pts_max_ct;
		$pts=$modelSolicitud->id_parametrico0->ponderacion_cualitativo*$pts_cl+$modelSolicitud->id_parametrico0->ponderacion_cuantitativo*$pts_ct;

		$status="";
		if($restringir){
			$status="Rechazado";
		}else{
			if($pts>=$pts_aprobacion){
				$status="Aceptado";
			}elseif($pts>=$pts_gris){
				$status="Zona Gris";
			}else{
				$status="Rechazado";
			}
		}

		return $status;
	}

	public function getAutorizadores(){
		$usuarios=Usuarios::model()->findAll('mesa_control=1');

		return CHtml::listData($usuarios,'id','fullName');
	}

	public function setAutorizador($autorizador){
		$this->_autorizador=$autorizador;
	}

	public function getAutorizador(){
		if(!isset($this->_autorizador)){
			$autorizadores=SolicitudesAceptaciones::model()->findAll("id_solicitud=:solicitud AND status='Aceptada'",array(':solicitud'=>$this->id));
			$arrayAutorizadores=array();
			foreach ($autorizadores as $autorizador) {
				$arrayAutorizadores[]=$autorizador->id_usuario0->fullName;
			}
			$this->_autorizador=implode(", ",$arrayAutorizadores);
		}

		return $this->_autorizador;
	}

	public function getAplicacionMoratorios(){
		$aplicacion=$this->aplicacion_moratorios;
		if(!isset($aplicacion)){
			//Solo si no esta definido la aplicacion de moratorios se toma el del producto
			//Si aplicacion es cero se considera que ya esta definido (con cero dias de gracia).
			$aplicacion=$this->id_producto0->aplicacion_moratorios;
		}

		return $aplicacion;
	}

	public function getMontoComisionesFinanciadas(){
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0.id_grupo_solidario0","id_amortizacion0.id_disposicion0"))->find("IFNULL(id_grupo_solidario0.id_solicitud,IFNULL(id_disposicion0.id_solicitud,id_amortizacion0.id_solicitud))=:solicitud AND id_amortizacion0.numero_amortizacion=:inicial",array(':solicitud'=>$this->id,':inicial'=>'0'));
		$monto=0;
		foreach ($comisiones as $comision) {
			$monto+=$comision->monto-$comision->iva;
		}
		return $monto;
	}
	public function getIvaComisionesFinanciadas(){
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0.id_grupo_solidario0","id_amortizacion0.id_disposicion0"))->find("IFNULL(id_grupo_solidario0.id_solicitud,IFNULL(id_disposicion0.id_solicitud,id_amortizacion0.id_solicitud))=:solicitud AND id_amortizacion0.numero_amortizacion=:inicial",array(':solicitud'=>$this->id,':inicial'=>'0'));
		$monto=0;
		foreach ($comisiones as $comision) {
			$monto+=$comision->iva;
		}
		return $monto;
	}

	public function getMontoComisionesFinanciadasPrincipal(){
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0"))->findAll("id_amortizacion0.id_solicitud=:solicitud AND id_amortizacion0.numero_amortizacion=:inicial AND t.financiado=:financiado",array(':solicitud'=>$this->id,':inicial'=>'0',':financiado'=>1));
		$monto=0;
		foreach ($comisiones as $comision) {
			$monto+=$comision->monto-$comision->iva;
		}
		return $monto;
	}
	public function getIvaComisionesFinanciadasPrincipal(){
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0"))->findAll("id_amortizacion0.id_solicitud=:solicitud AND id_amortizacion0.numero_amortizacion=:inicial AND t.financiado=:financiado",array(':solicitud'=>$this->id,':inicial'=>'0',':financiado'=>1));
		$monto=0;
		foreach ($comisiones as $comision) {
			$monto+=$comision->iva;
		}
		return $monto;
	}

	public function getMontoComisionesPoliza(){
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0"))->findAll("id_amortizacion0.id_solicitud=:solicitud AND 
		id_amortizacion0.numero_amortizacion=:inicial AND 
		t.descontar_dispocision!=:descontar_dispocision",
		array(':solicitud'=>$this->id,':inicial'=>'0',':descontar_dispocision'=>1));
		$monto=0;
		foreach ($comisiones as $comision) {
			$monto+=$comision->monto_comision-$comision->monto_impuesto;
		}
		return $monto;
	}

	public function getMontoComisionesDeducible(){
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0"))->findAll("id_amortizacion0.id_solicitud=:solicitud AND 
		id_amortizacion0.numero_amortizacion=:inicial AND 
		t.descontar_dispocision=:descontar_dispocision",
		array(':solicitud'=>$this->id,':inicial'=>'0',':descontar_dispocision'=>1));
		$monto=0;
		foreach ($comisiones as $comision) {
			$monto+=$comision->monto_comision-$comision->monto_impuesto;
		}
		return $monto;
	}
	public function getIvaComisionesDeducible(){
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0"))->findAll("id_amortizacion0.id_solicitud=:solicitud AND 
		id_amortizacion0.numero_amortizacion=:inicial AND 
		t.descontar_dispocision!=:descontar_dispocision",
		array(':solicitud'=>$this->id,':inicial'=>'0',':descontar_dispocision'=>1));
		$monto=0;
		foreach ($comisiones as $comision) {
			$monto+=$comision->monto_impuesto;
		}
		return $monto;
	}

	public function getIvaComisionesPoliza(){
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0"))->findAll("id_amortizacion0.id_solicitud=:solicitud AND 
		id_amortizacion0.numero_amortizacion=:inicial ",array(':solicitud'=>$this->id,':inicial'=>'0'));
		$monto=0;
		foreach ($comisiones as $comision) {
			$monto+=$comision->monto_impuesto;
		}
		return $monto;
	}

	private function sumaMontosParaPagoEdoCuenta($amortizaciones, $fecha) {
		$pagoRestanteA=0;
		foreach($amortizaciones as $amortizacion){
	        if(strtotime($amortizacion["fecha_amortizacion"])>strtotime($fecha)){
                continue;
            }
            $idAmortizacion=$amortizacion["id"];
            if($amortizacion["status"]=="Calculado"){
                $pagoRestante=$amortizacion["pago_total"];
            }else{
                if(strtotime($amortizacion["fecha_pago"])<=strtotime($fecha)){
                    continue;
                }
                $modelAmortizacion=Amortizaciones::model()->findByPk($idAmortizacion);
                $pagoTotal=$amortizacion["pago_total"]-$amortizacion["pago_moratorios"];
                $pagoMoratorios=$modelAmortizacion->getMontosMora($fecha)["mora"];
                $pagoRestante=$pagoTotal+$pagoMoratorios;
            }
            $parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=$idAmortizacion");
            foreach($parcialidades as $parcialidad){
                if(strtotime($parcialidad->fecha_pago)<strtotime($fecha)){
                    $pagoRestante-=$parcialidad->pago_total;
                }
            }
            $pagoRestanteA+=$pagoRestante;
        }
		return $pagoRestanteA;
	}

	public function getMontoPago($fecha){
	    $modelAmortizacion=Amortizaciones::model()->find();
	    $amortizaciones=(new Amortizaciones())->getAmortizaciones($this,array(),array(),array(),0,0,$fecha);
        $pagoRestanteA=$this->sumaMontosParaPagoEdoCuenta($amortizaciones, $fecha);

		// Ahora se agregan las disposiciones
		if ($this->id_producto0->tabla_disposiciones == "unica") {
			return $pagoRestanteA;
		}

		$disposiciones = Disposiciones::model()->findAll("id_solicitud=:solicitud", array(':solicitud'=>$this->id));
		foreach($disposiciones as $disposicion){
			if(strtotime($disposicion->fecha)>strtotime($fecha)){
				continue;
			}

			$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($disposicion);
			$pagoRestanteA+=$this->sumaMontosParaPagoEdoCuenta($amortizaciones, $fecha);
		}

	    return $pagoRestanteA;
    }

	public function atributosCDCPF($campo,$valor){
			$columnas=array(
			'ClaveOtorgante'=>array(
				'longitud'=>'10',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NombreOtorgante'=>array(
				'longitud'=>'40',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'IdentificadorDeMedio'=>array(
				'longitud'=>'10',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'FechaExtraccion'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NotaOtorgante'=>array(
				'longitud'=>'100',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'Version'=>array(
				'longitud'=>'2',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'ApellidoPaterno'=>array(
				'longitud'=>'30',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'ApellidoMaterno'=>array(
				'longitud'=>'30',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'ApellidoAdicional'=>array(
				'longitud'=>'30',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'Nombres'=>array(
				'longitud'=>'50',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'FechaNacimiento'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'RFC'=>array(
				'longitud'=>'13',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'CURP'=>array(
				'longitud'=>'18',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'NumeroSeguridadSocial'=>array(
				'longitud'=>'11',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'Nacionalidad'=>array(
				'longitud'=>'2',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'Residencia'=>array(
				'longitud'=>'1',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NumeroLicenciaConducir'=>array(
				'longitud'=>'20',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'EstadoCivil'=>array(
				'longitud'=>'1',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'Sexo'=>array(
				'longitud'=>'1',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'ClaveElectorIFE'=>array(
				'longitud'=>'20',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'NumeroDependientes'=>array(
				'longitud'=>'2',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaDefuncion'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'IndicadorDefuncion'=>array(
				'longitud'=>'1',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'TipoPersona'=>array(
				'longitud'=>'2',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'Direccion'=>array(
				'longitud'=>'80',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'ColoniaPoblacion'=>array(
				'longitud'=>'65',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'DelegacionMunicipio'=>array(
				'longitud'=>'65',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'Ciudad'=>array(
				'longitud'=>'65',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'Estado'=>array(
				'longitud'=>'4',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'CP'=>array(
				'longitud'=>'5',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaResidencia'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NumeroTelefono'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'TipoDomicilio'=>array(
				'longitud'=>'1',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'TipoAsentamiento'=>array(
				'longitud'=>'2',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'OrigenDomicilio'=>array(
				'longitud'=>'2',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'NombreEmpresa'=>array(
				'longitud'=>'99',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'Direccion'=>array(
				'longitud'=>'80',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'ColoniaPoblacion'=>array(
				'longitud'=>'65',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'DelegacionMunicipio'=>array(
				'longitud'=>'65',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'Ciudad'=>array(
				'longitud'=>'65',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'Estado'=>array(
				'longitud'=>'4',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'CP'=>array(
				'longitud'=>'5',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NumeroTelefono'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'Extension'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'Fax'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'Puesto'=>array(
				'longitud'=>'60',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'FechaContratacion'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'ClaveMoneda'=>array(
				'longitud'=>'2',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'SalarioMensual'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaUltimoDiaEmpleo'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaVerificacionEmpleo'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'OrigenRazonSocialDomicilio'=>array(
				'longitud'=>'2',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'ClaveActualOtorgante'=>array(
				'longitud'=>'10',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NombreOtorgante'=>array(
				'longitud'=>'40',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'CuentaActual'=>array(
				'longitud'=>'25',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'TipoResponsabilidad'=>array(
				'longitud'=>'1',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'TipoCuenta'=>array(
				'longitud'=>'1',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'TipoContrato'=>array(
				'longitud'=>'2',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'ClaveUnidadMonetaria'=>array(
				'longitud'=>'2',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'ValorActivoValuacion'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NumeroPagos'=>array(
				'longitud'=>'4',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FrecuenciaPagos'=>array(
				'longitud'=>'1',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'MontoPagar'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaAperturaCuenta'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaUltimoPago'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaUltimaCompra'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaCierreCuenta'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaCorte'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'Garantia'=>array(
				'longitud'=>'200',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'CreditoMaximo'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'SaldoActual'=>array(
				'longitud'=>'10',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'LimiteCredito'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'SaldoVencido'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NumeroPagosVencidos'=>array(
				'longitud'=>'4',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'PagoActual'=>array(
				'longitud'=>'2',
				'tipo'=>'A',
				'condiciones'=>array('rango0'=>'SI'),
			),

				'HistoricoPagos'=>array(
				'longitud'=>'168',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'ClavePrevencion'=>array(
				'longitud'=>'2',
				'tipo'=>'C',
				'condiciones'=>'',
			),

				'TotalPagosReportados'=>array(
				'longitud'=>'3',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'ClaveAnteriorOtorgante'=>array(
				'longitud'=>'100',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NombreAnteriorOtorgante'=>array(
				'longitud'=>'40',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'NumeroCuentaAnterior'=>array(
				'longitud'=>'25',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'FechaPrimerIncumplimiento'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'SaldoInsoluto'=>array(
				'longitud'=>'10',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'MontoUltimoPago'=>array(
				'longitud'=>'10',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FechaIngresoCarteraVencida'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'MontoCorrespondienteIntereses'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'FormaPagoActualIntereses'=>array(
				'longitud'=>'2',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'DiasVencimiento'=>array(
				'longitud'=>'3',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'PlazoMeses'=>array(
				'longitud'=>'6',
				'tipo'=>'N',
				'condiciones'=>array('redondeo'=>'2'),
			),

				'MontoCreditoOriginacion'=>array(
				'longitud'=>'10',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'CorreoElectronicoConsumidor'=>array(
				'longitud'=>'40',
				'tipo'=>'A',
				'condiciones'=>array('caracteres'=>'correo'),
			),

				'TotalSaldosActuales'=>array(
				'longitud'=>'14',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'TotalSaldosVencidos'=>array(
				'longitud'=>'14',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'TotalElementosNombreReportados'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'TotalElementosDireccionReportados'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'TotalElementosEmpleoReportados'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'TotalElementosCuentaReportados'=>array(
				'longitud'=>'9',
				'tipo'=>'N',
				'condiciones'=>'',
			),

				'NombreOtorgante'=>array(
				'longitud'=>'40',
				'tipo'=>'A',
				'condiciones'=>'',
			),

				'DomicilioDevolucion'=>array(
				'longitud'=>'16',
				'tipo'=>'A',
				'condiciones'=>'',
			),

		);
		/* Comparamos si existe el key en el sistema */
		if(array_key_exists($campo,$columnas)) {
			//Comparamos si es Texto o Numero
			if( $columnas[$campo]['tipo'] == "N" ){
				//Longitud de cadena
				///Redondeo
				if($valor != ""){
					if($columnas[$campo]['condiciones']['redondeo'] != ""){
						$valor=round($valor, $columnas[$campo]['condiciones']['redondeo']);
					}else{
						$valor= round($valor);
					}
					$valor = substr($valor,-$columnas[$campo]['longitud']);
				}
			}

			if( $columnas[$campo]['tipo'] == "C" ){
				//SOLO LETRAS MAYUSCULAS DE A-Z
				$valor = preg_replace('([^A-Za-zñÑ])', ' ', $valor);
				$valor = substr($valor,0, $columnas[$campo]['longitud']);
				//CONVERTIMOS A MAYUSCULAS
				$valor = strtoupper($valor);
			}
			if( $columnas[$campo]['tipo'] == "M" ){

				//Longitud de cadena
				///Redondeo
				if($valor != ""){
					if($columnas[$campo]['condiciones']['redondeo'] != ""){
						$valor=round($valor, $columnas[$campo]['condiciones']['redondeo']);
					}else{
						$valor= round($valor);
					}
				}
				$valor = substr($valor,-$columnas[$campo]['longitud']);
			}
			if( $columnas[$campo]['tipo'] == "A" ){
				$originales = 'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûýýþÿŔŕ';
				$modificadas = 'aaaaaaaceeeeiiiidnoooooouuuuybsaaaaaaaceeeeiiiidnoooooouuuyybyRr';
				$valor = utf8_decode($valor);
				$valor = strtr($valor, utf8_decode($originales), $modificadas);
				//SOLO LETRAS MAYUSCULAS DE A-Z Y 9-0
				if($columnas[$campo]['condiciones']['caracteres'] != ""){
					if($columnas[$campo]['condiciones']['caracteres'] == "correo"){
						///SOLO CARACTERES VALIDOS EN CORREOS ELECTRONICOS
						$valor = preg_replace('/[^a-zA-Z0-9\/:@\.\+-s]/', ' ', $valor);
					}

				}else{
					$valor = preg_replace('([^A-Za-z0-9])', ' ', $valor);
				}

				//COLOCAMOS 0 SI LO REQUIERE EL CAMPO
				if($columnas[$campo]['condiciones']['rango0'] != ""){
					//AQUI SE COLOCA CUANTOS 0 A LA IZQUIERDA TIENE QUE TENER
					$valor = str_pad($valor, $columnas[$campo]['longitud'] , "0", STR_PAD_LEFT);

				}


				//CORTAMOS LOS CARACTERES POR LA LONGITUD PERMITIDA
				$valor = substr($valor,0, $columnas[$campo]['longitud']);
				//CONVERTIMOS A MAYUSCULAS
				$valor = strtoupper($valor);
			}



		}else{
			//si no existen coincidencias de campo
			$valor;
			//CONVERTIMOS A MAYUSCULAS
			$valor = strtoupper($valor);
		}

		return $valor;

	}

	
	// TODO: Crear funcion para atributos de CDC PM
	public function atributosCDCPM($campo, $valor) {
		$columnas = [
			'AC_RFC' => [
				'longitud'=>'13',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_CURP' => [
				'longitud'=>'18',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_NOMBRE_COMPANIA' => [
				'longitud'=>'150',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_NOMBRE_UNO' => [
				'longitud'=>'30',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_NOMBRE_DOS' => [
				'longitud'=>'30',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_APELLIDO_PATERNO' => [
				'longitud'=>'25',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_APELLIDO_MATERNO' => [
				'longitud'=>'25',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_PORCENTAJE' => [
				'longitud'=>'2',
				'tipo'=>'N',
				'condiciones'=>'',
			],
			'AC_DIRECCION_UNO' => [
				'longitud'=>'40',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_DIRECCION_DOS' => [
				'longitud'=>'40',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_COLONIA' => [
				'longitud'=>'60',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_DELEGACION_MUNICIPIO' => [
				'longitud'=>'40',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_CIUDAD' => [
				'longitud'=>'40',
				'tipo'=>'A',
				'condiciones'=>'',
			],
			'AC_ESTADO' => [
				'longitud'=>'4',
				'tipo'=>'C',
				'condiciones'=>'',
			],
			'AC_CP' => [
				'longitud'=>'10',
				'tipo'=>'C',
				'condiciones'=>'',
			],
			'AC_TELEFONO' => [
				'longitud'=>'11',
				'tipo'=>'N',
				'condiciones'=>'',
			],
			'AC_EXTENSION' => [
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			],
			'AC_FAX' => [
				'longitud'=>'11',
				'tipo'=>'N',
				'condiciones'=>'',
			],
			'AC_TIPO_CLIENTE' => [
				'longitud'=>'1',
				'tipo'=>'N',
				'condiciones'=>'',
			],
			'AC_EDO_EXTRANJERO' => [
				'longitud'=>'40',
				'tipo'=>'C',
				'condiciones'=>'',
			],
			'AC_PAIS' => [
				'longitud'=>'2',
				'tipo'=>'C',
				'condiciones'=>'',
			],
		];

		/* Comparamos si existe el key en el sistema */
		if (array_key_exists($campo, $columnas)) {
			//COMPARAMOS EL TIPO DE CAMPO
			// PARA CDC PM SOLO EXISTEN LOS TIPOS DE CAMPOS ALFANUMERICOS, CLAVE Y NUMERICO

			if (($columnas[$campo]['tipo'] == "A") || ($columnas[$campo]['tipo'] == "C")) {	
				//CORTAMOS SEGUN SEA LA LONGITUD
				$valor = substr(self::procesarCampoAlfanumerico($valor), 0, $columnas[$campo]['longitud']);
			}

			if ($columnas[$campo]['tipo'] == "N") {
				//TIPO NUMERICO SOLO NUMEROS
				if ($valor != "") {
					$valor = self::procesarCampoNumericoCDC($valor);
					if (($valor != "") && ($valor != ".")) {
						$valor = str_pad(round($valor), $columnas[$campo]['longitud'], "0", STR_PAD_LEFT);
					}

					//CORTAMOS SEGUN SEA LA LONGITUD
					$valor = substr($valor, 0, $columnas[$campo]['longitud']);
				}
			}
		} else {
			$valor;
		}

		return $valor;
	}

	public static function atributosBDCM($campo, $valor, $reglas_adicionales = false) {
		$columnas=array(
			'RFC'=>array(
				'longitud'=>'13',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Codigo_Ciudadano'=>array(
				'longitud'=>'18',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Numero_Dun'=>array(
				'longitud'=>'10',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Compañía'=>array(
				'longitud'=>'150',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Nombre_1'=>array(
				'longitud'=>'30',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Nombre_2'=>array(
				'longitud'=>'30',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Paterno'=>array(
				'longitud'=>'25',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Materno'=>array(
				'longitud'=>'25',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Nacionalidad'=>array(
				'longitud'=>'2',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Calificacion_Banco_de_Mex.'=>array(
				'longitud'=>'2',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Banxico_1'=>array(
				'longitud'=>'11',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Banxico_2'=>array(
				'longitud'=>'11',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Banxico_3'=>array(
				'longitud'=>'11',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Direccion_1'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Direccion_2'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Colonia/Poblacion'=>array(
				'longitud'=>'60',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Delegacion/Municipio'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Ciudad'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Estado'=>array(
				'longitud'=>'4',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'C.P.'=>array(
				'longitud'=>'10',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Telefono'=>array(
				'longitud'=>'11',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Extension'=>array(
				'longitud'=>'8',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Fax'=>array(
				'longitud'=>'11',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Tipo_Cliente'=>array(
				'longitud'=>'1',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Estado_extranjero'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Pais'=>array(
				'longitud'=>'2',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Clave_de_Cosolidación'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			// Segmento AC (Accionista)
			'rfc_accionista'=>array(
				'longitud'=>'13',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'curp_accionista'=>array(
				'longitud'=>'18',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'campo_reservado_accionista'=>array(
				'longitud'=>'10',
				'tipo'=>'T', // Deberia ser tipo N pero como son puros ceros no apareceria nada al redondear
				'condiciones'=>'',
			),

			'razon_social_accionista'=>array(
				'longitud'=>'150',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'primer_nombre_accionista'=>array(
				'longitud'=>'30',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'segundo_nombre_accionista'=>array(
				'longitud'=>'30',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'paterno_accionista'=>array(
				'longitud'=>'25',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'materno_accionista'=>array(
				'longitud'=>'25',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'porcentaje_accionista'=>array(
				'longitud'=>'2',
				'tipo'=>'T', // Deberia ser tipo N pero por ahora estara vacio asi que se cambia a texto
				'condiciones'=>'',
			),

			'direccion_linea_uno_accionista'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'direccion_linea_dos_accionista'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'colonia_accionista'=>array(
				'longitud'=>'60',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'municipio_accionista'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'ciudad_accionista'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'estado_accionista'=>array(
				'longitud'=>'4',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'cp_accionista'=>array(
				'longitud'=>'10',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'telefono_accionista'=>array(
				'longitud'=>'11',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'ext_telefono_accionista'=>array(
				'longitud'=>'8',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'no_fax_accionista'=>array(
				'longitud'=>'11',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'tipo_accionista'=>array(
				'longitud'=>'1',
				'tipo'=>'T', // Deberia ser tipo N pero por ahora estara vacio asi que se cambia a texto
				'condiciones'=>'',
			),

			'edo_extranjero_accionista'=>array(
				'longitud'=>'40',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'pais_origen_domicilio_accionista'=>array(
				'longitud'=>'2',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			// Segmento CR (Credito)
			'Contrato'=>array(
				'longitud'=>'25',
				'tipo'=>'T',
				'condiciones'=>'',
				'reglas_adicionales'=> [
					'simbolos_permitidos' => '-_/'
				]
			),

			'Contrato_Anterior'=>array(
				'longitud'=>'25',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Porcentaje'=>array(
				'longitud'=>'2',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Numero_Experiencias'=>array(
				'longitud'=>'6',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Tipo_de_Credito'=>array(
				'longitud'=>'4',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Saldo_Inicial'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Moneda'=>array(
				'longitud'=>'3',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Numero_Pagos'=>array(
				'longitud'=>'4',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Frecuencia_de_Pagos'=>array(
				'longitud'=>'5',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Importe_de_Pagos'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Fecha_Ultimo_Pago'=>array(
				'longitud'=>'8',
				'tipo'=>'F',
				'condiciones'=>'',
			),

			'Fecha_Reestructura'=>array(
				'longitud'=>'8',
				'tipo'=>'F',
				'condiciones'=>'',
			),

			'Pago_en_efectivo'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Quita'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Dacion'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Quebranto'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Observaciones'=>array(
				'longitud'=>'4',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Especiales'=>array(
				'longitud'=>'1',
				'tipo'=>'T',
				'condiciones'=>'',
			),

			'Saldo_Insoluto'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Crédito_Máximo_Utilizado'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Fecha_Ingreso_Cartera_Vencida'=>array(
				'longitud'=>'8',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			// Segmento Detalle del Credito (DE)
			'Dias_Vencimiento'=>array(
				'longitud'=>'3',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Cantidad'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Intereses'=>array(
				'longitud'=>'20',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'Fecha_apertura_credito'=>array(
				'longitud'=>'8',
				'tipo'=>'F',
				'condiciones'=>'',
			),

			'Numero_de_Compañias'=>array(
				'longitud'=>'7',
				'tipo'=>'N',
				'condiciones'=>'',
			),

			'CantidadTs'=>array(
				'longitud'=>'53',
				'tipo'=>'T',
				'condiciones'=>'',
			),
			'Contrato_Anterior' => array(
				'longitud'=>'25',
				'tipo'=>'T',
				'condiciones'=>'',
			),
			'Plazo_En_Meses' => array(
				'longitud'=>'6',
				'tipo'=>'N',
				//asigno que solo dos decimas puede tener en el redondeo
				'condiciones'=> array(
					'redondeo' => '2' ,
				),
			),
			'Telefono_Movil'=>array(
				'longitud'=>'15',
				'tipo'=>'N',
				'condiciones'=>'',
			),
			'Correo_Electronico'=>array(
				'longitud'=>'100',
				'tipo'=>'A',
				'condiciones'=>'',
			),

		);

		/* Comparamos si existe el key en el sistema */
		if(array_key_exists($campo,$columnas)) {
			//Comparamos si es Texto o Numero
			if( $columnas[$campo]['tipo'] == "T" ){
				if ($reglas_adicionales) {
					$valor = substr(
						self::procesarCampoAlfanumerico(
							$valor,
							$columnas[$campo]['longitud'],
							$columnas[$campo]['reglas_adicionales']
						),
						0,
						$columnas[$campo]['longitud']
					);
				} else {
					$valor = substr(self::procesarCampoAlfanumerico($valor, $columnas[$campo]['longitud']), 0, $columnas[$campo]['longitud']);
				}
			}
			if( $columnas[$campo]['tipo'] == "N" ){
				//TIPO NUMERICO SOLO NUMEROS
				if ($valor !== "") {
					if ($columnas[$campo]['condiciones']['redondeo'] != "") {
						$valor = round($valor, $columnas[$campo]['condiciones']['redondeo']);
						$numero = explode(".", $valor);
						$decimales = str_pad($numero[1], $columnas[$campo]['condiciones']['redondeo'], "0", STR_PAD_RIGHT);
						$valor = $numero[0] . "." . $decimales;
					} else {
						// TODO: Agregar los campos de CP aqui tambien
						if (($campo === "C.P.") || ($campo === "C.P._1") || ($campo === 'Banxico_1') || ($campo === 'Banxico_2') || ($campo === 'Banxico_3')) {
							$valor = self::procesarCampoNumerico($valor);
						} else {
							$valor = round($valor);
						}
					}

					//CORTAMOS SEGUN SEA LA LONGITUD
					$valor = substr(str_pad($valor, $columnas[$campo]['longitud'], '0', STR_PAD_LEFT), -$columnas[$campo]['longitud']);
				}
			}
			if( $columnas[$campo]['tipo'] == "F" ){
				// La fecha de cumpleaños viene en formate AAAA-MM-DD
				// El formato que requiere BuróDeCredito es DDMMAAAA
				if (strlen($valor) === 8) {
					return $valor;
				}

				$valor = substr(self::procesarCampoFecha($valor), 0, $columnas[$campo]['longitud']);
			}
		} else {
			$valor;
		}

		return $valor;
	}


	/* 
	------------------------------------------------------------------
	FUNCIONES AUXILIARES PARA FORMATEAR LOS CAMPOS DE BURO DE CREDITO
	------------------------------------------------------------------
	*/

	// Deberá contener solo letras mayúsculas, sin acentos ni caracteres especiales.
	// Las letras aceptadas son ABCDEFGHIJKLMNOPQRSTUVWXYZ, por lo que la “Ñ” deberá ser reportada como “N” y las letras con diéresis como la “Ü” deberán reportarse sin esta.
	// Para los campos de longitud fija, en caso que un dato tenga menos caracteres, se deberá completar con espacios en blanco a la derecha.
	private static function procesarCampoAlfabetico($str, $length = null) {
		// Lo siguiente es solo para compatibilidad con linux
		$a = array('À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'à', 'á', 'â', 'ã', 'ä', 'å', 'æ', 'ç', 'è', 'é', 'ê', 'ë', 'ì', 'í', 'î', 'ï', 'ñ', 'ò', 'ó', 'ô', 'õ', 'ö', 'ø', 'ù', 'ú', 'û', 'ü', 'ý', 'ÿ', 'Ā', 'ā', 'Ă', 'ă', 'Ą', 'ą', 'Ć', 'ć', 'Ĉ', 'ĉ', 'Ċ', 'ċ', 'Č', 'č', 'Ď', 'ď', 'Đ', 'đ', 'Ē', 'ē', 'Ĕ', 'ĕ', 'Ė', 'ė', 'Ę', 'ę', 'Ě', 'ě', 'Ĝ', 'ĝ', 'Ğ', 'ğ', 'Ġ', 'ġ', 'Ģ', 'ģ', 'Ĥ', 'ĥ', 'Ħ', 'ħ', 'Ĩ', 'ĩ', 'Ī', 'ī', 'Ĭ', 'ĭ', 'Į', 'į', 'İ', 'ı', 'Ĳ', 'ĳ', 'Ĵ', 'ĵ', 'Ķ', 'ķ', 'Ĺ', 'ĺ', 'Ļ', 'ļ', 'Ľ', 'ľ', 'Ŀ', 'ŀ', 'Ł', 'ł', 'Ń', 'ń', 'Ņ', 'ņ', 'Ň', 'ň', 'ŉ', 'Ō', 'ō', 'Ŏ', 'ŏ', 'Ő', 'ő', 'Œ', 'œ', 'Ŕ', 'ŕ', 'Ŗ', 'ŗ', 'Ř', 'ř', 'Ś', 'ś', 'Ŝ', 'ŝ', 'Ş', 'ş', 'Š', 'š', 'Ţ', 'ţ', 'Ť', 'ť', 'Ŧ', 'ŧ', 'Ũ', 'ũ', 'Ū', 'ū', 'Ŭ', 'ŭ', 'Ů', 'ů', 'Ű', 'ű', 'Ų', 'ų', 'Ŵ', 'ŵ', 'Ŷ', 'ŷ', 'Ÿ', 'Ź', 'ź', 'Ż', 'ż', 'Ž', 'ž', 'ſ', 'ƒ', 'Ơ', 'ơ', 'Ư', 'ư', 'Ǎ', 'ǎ', 'Ǐ', 'ǐ', 'Ǒ', 'ǒ', 'Ǔ', 'ǔ', 'Ǖ', 'ǖ', 'Ǘ', 'ǘ', 'Ǚ', 'ǚ', 'Ǜ', 'ǜ', 'Ǻ', 'ǻ', 'Ǽ', 'ǽ', 'Ǿ', 'ǿ');
		$b = array('A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's', 'a', 'a', 'a', 'a', 'a', 'a', 'ae', 'c', 'e', 'e', 'e', 'e', 'i', 'i', 'i', 'i', 'n', 'o', 'o', 'o', 'o', 'o', 'o', 'u', 'u', 'u', 'u', 'y', 'y', 'A', 'a', 'A', 'a', 'A', 'a', 'C', 'c', 'C', 'c', 'C', 'c', 'C', 'c', 'D', 'd', 'D', 'd', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'E', 'e', 'G', 'g', 'G', 'g', 'G', 'g', 'G', 'g', 'H', 'h', 'H', 'h', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'I', 'i', 'IJ', 'ij', 'J', 'j', 'K', 'k', 'L', 'l', 'L', 'l', 'L', 'l', 'L', 'l', 'l', 'l', 'N', 'n', 'N', 'n', 'N', 'n', 'n', 'O', 'o', 'O', 'o', 'O', 'o', 'OE', 'oe', 'R', 'r', 'R', 'r', 'R', 'r', 'S', 's', 'S', 's', 'S', 's', 'S', 's', 'T', 't', 'T', 't', 'T', 't', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'W', 'w', 'Y', 'y', 'Y', 'Z', 'z', 'Z', 'z', 'Z', 'z', 's', 'f', 'O', 'o', 'U', 'u', 'A', 'a', 'I', 'i', 'O', 'o', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'U', 'u', 'A', 'a', 'AE', 'ae', 'O', 'o');
		
		$str = str_replace($a, $b, $str);

		// La función iconv realiza la transliteración de caracteres Unicode a caracteres ASCII.
		// La opción ASCII//TRANSLIT le indica a iconv que reemplace los caracteres no ASCII con 
		// caracteres ASCII equivalentes si existen, o que los elimine si no tienen una representación ASCII equivalente.
		$str = iconv('UTF-8', 'ASCII//TRANSLIT', $str);
		
		$str = preg_replace('/[^a-zA-Z ]/', '', $str);      // Permite solamente las letras ABCDEFGHIJKLMNOPQRSTUVWXYZ
		$str = preg_replace('/ + /', ' ', $str);            // Para eliminar varios espacios seguidos
		$str = trim(strtoupper($str));

		$str = strtoupper($str);
	
		if ($length != null) {
			$str = str_pad($str, $length, ' ', STR_PAD_RIGHT);
		}
	
		return $str;
	}

	private static function strpos_recursive($haystack, $needle, $offset = 0, &$results = array()) {                
		$offset = strpos($haystack, $needle, $offset);

		if($offset === false) {
			return $results;
		} else {
			$results[] = $offset;
			return self::strpos_recursive($haystack, $needle, ($offset + 1), $results);
		}
	}

	// Deberá contener letras y números y algunos caracteres especiales de acuerdo al campo.
	// Siempre deberán utilizarse letras mayúsculas, sin acentos ni diéresis.
	// Los caracteres @, %, $ y # se convierten en “N”, la Ñ en “N” (si el sistema lo lee), el carácter > en “#” y el carácter < en espacio en blanco “ “
	// El carácter # será válido siempre que esté seguido por un número y el carácter { se convierte en $ y este a su vez en la letra “N” para algunos datos de la dirección del Cliente.
	public static function procesarCampoAlfanumerico($str, $length = null, $reglas_adicionales = null) {
		$str = mb_strtoupper($str);

		$a = array('@', '%', '$', /* '#', */ 'Ñ', '>', '<');
		$b = array('N', 'N', 'N', /* 'N', */ 'N', '#', ' ');
		
		$str = str_replace($a, $b, $str);

		// El carácter # será válido siempre que esté seguido por un número y el carácter { se convierte en $ y este a su vez en la letra “N” para algunos datos de la dirección del Cliente.
		$aparicionesSimboloNumero = self::strpos_recursive($str, "#");

    	foreach($aparicionesSimboloNumero as $aparicionPosicion) {
			if (is_numeric($str[$aparicionPosicion + 1])) {
				// No se hace nada, se conserva el simbolo #
			} else {
				$str[$aparicionPosicion] = "N";
			}
		}

		// Lo siguiente es solo para compatibilidad con linux (Mod: Solo mayusculas)
		$a = array('À', 'Á', 'Â', 'Ã', 'Ä', 'Å', 'Æ', 'Ç', 'È', 'É', 'Ê', 'Ë', 'Ì', 'Í', 'Î', 'Ï', 'Ð', 'Ñ', 'Ò', 'Ó', 'Ô', 'Õ', 'Ö', 'Ø', 'Ù', 'Ú', 'Û', 'Ü', 'Ý', 'ß', 'Ā', 'Ă', 'Ą', 'Ć', 'Ĉ', 'Ċ', 'Č', 'Ď', 'Đ', 'Ē', 'Ĕ', 'Ė', 'Ę', 'Ě', 'Ĝ', 'Ğ', 'Ġ', 'Ģ', 'Ĥ', 'Ħ', 'Ĩ', 'Ī', 'Ĭ', 'Į', 'İ', 'Ĳ', 'Ĵ', 'Ķ', 'Ĺ', 'Ļ', 'Ľ', 'Ŀ', 'ł', 'Ń', 'Ņ', 'Ň', 'Ō', 'Ŏ', 'Ő', 'Œ', 'Ŕ', 'Ŗ', 'Ř', 'Ś', 'Ŝ', 'Ş', 'Š', 'Ţ', 'Ť', 'Ŧ', 'Ũ', 'Ū', 'Ŭ', 'Ů', 'Ű', 'Ų', 'Ŵ', 'Ŷ', 'Ÿ', 'Ź', 'Ż', 'Ž', 'Ơ', 'Ư', 'Ǎ', 'Ǐ', 'Ǒ', 'Ǔ', 'Ǖ', 'Ǘ', 'Ǚ', 'Ǜ', 'Ǻ', 'Ǽ', 'Ǿ');
		$b = array('A', 'A', 'A', 'A', 'A', 'A', 'AE', 'C', 'E', 'E', 'E', 'E', 'I', 'I', 'I', 'I', 'D', 'N', 'O', 'O', 'O', 'O', 'O', 'O', 'U', 'U', 'U', 'U', 'Y', 's','A', 'A', 'A', 'C', 'C', 'C', 'C', 'D', 'D', 'E', 'E', 'E', 'E', 'E', 'G', 'G', 'G', 'G', 'H', 'H', 'I', 'I', 'I', 'I', 'I', 'IJ',  'J', 'K', 'L', 'L', 'L', 'L', 'l', 'N', 'N', 'N', 'O', 'O', 'O', 'OE',  'R', 'R', 'R', 'S', 'S', 'S', 'S', 'T', 'T', 'T', 'U', 'U', 'U', 'U', 'U', 'U', 'W', 'Y', 'Y', 'Z', 'Z', 'Z', 'O', 'U', 'A', 'I', 'O', 'U', 'U', 'U', 'U', 'U', 'A', 'AE', 'O');

		$str = str_replace($a, $b, $str);

		// La función iconv realiza la transliteración de caracteres Unicode a caracteres ASCII.
		// La opción ASCII//TRANSLIT le indica a iconv que reemplace los caracteres no ASCII con 
		// caracteres ASCII equivalentes si existen, o que los elimine si no tienen una representación ASCII equivalente.
		$str = iconv('UTF-8', 'ASCII//TRANSLIT', $str);

		// Aquí es importante el orden de las funciones
		if (isset($reglas_adicionales['simbolos_permitidos'])) {
			$simbolos_adicionales = $reglas_adicionales['simbolos_permitidos'];
			$str = str_replace("/[^a-zA-Z0-9 #$simbolos_adicionales]/", '', $str);
		} else {
			$str = preg_replace('/[^a-zA-Z0-9 #]/', '', $str);  // Permite solamente las letras ABCDEFGHIJKLMNOPQRSTUVWXYZ
		}
		$str = preg_replace('/ + /', ' ', $str);            // Para eliminar varios espacios seguidos
		$str = trim($str);

		if ($length != null) {
			$str = str_pad($str, $length, ' ', STR_PAD_RIGHT);
		}

		return $str;
	}

	public static function procesarCampoNumerico($stringNumber, $length = null) {
		$stringNumber = preg_replace('/[^0-9]/', '', "$stringNumber"); // Permite solamente los numeros
    
		if ($length != null) {
			$stringNumber = str_pad($stringNumber, $length, ' ', STR_PAD_LEFT);
		}
		
		return $stringNumber;
	}

	private static function procesarCampoNumericoCDC($stringNumber, $length = null) {
		$stringNumber = preg_replace('/[^0-9\.]/', '', "$stringNumber"); // Permite solamente los numeros
    
		if ($length != null) {
			$stringNumber = str_pad($stringNumber, $length, ' ', STR_PAD_LEFT);
		}
		
		return $stringNumber;
	}

	private static function procesarCampoFecha($fecha, $formatoEntrada = "AAAA-MM-DD") {
		if ($formatoEntrada === "AAAA-MM-DD") {
			$fecha = date("dmY", strtotime($fecha));
		}

		return $fecha;
	}

	/*
	---------------------------------

	ATRIBUTOS DE BURO DE CRÉDITO

	---------------------------------
	*/
	public static function atributosBDCF($campo, $valor)
	{
		$columnas = array(
			'CLAVE_OTORGANTE_1' => array(
				'longitud' => '10',
				'longitudtipo' => 'F',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'NOMBRE_DEL_OTORGANTE_1' => array(
				'longitud' => '16',
				'longitudtipo' => 'F',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'FECHA_DEL_REPORTE' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'APELLIDO_PATERNO' => array(
				'longitud' => '26',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'APELLIDO_MATERNO' => array(
				'longitud' => '26',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'APELLIDO_ADICIONAL' => array(
				'longitud' => '26',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'PRIMER_NOMBRE' => array(
				'longitud' => '26',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'SEGUNDO_NOMBRE' => array(
				'longitud' => '26',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'FECHA_DE_NACIMIENTO' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'RFC' => array(
				'longitud' => '13',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'PREFIJO' => array(
				'longitud' => '4',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'NACIONALIDAD' => array(
				'longitud' => '4',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'ESTADO_CIVIL' => array(
				'longitud' => '1',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'SEXO' => array(
				'longitud' => '1',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'FECHA_DEFUNCIÓN' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'INDICADOR_DEFUNCIÓN' => array(
				'longitud' => '1',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'DIRECCIÓN_CALLE_NÚMERO' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'DIRECCIÓN_COMPLEMENTO' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'COLONIA_O_POBLACIÓN' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'DELEGACIÓN_O_MUNICIPIO' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'CIUDAD' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'ESTADO' => array(
				'longitud' => '4',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'C.P.' => array(
				'longitud' => '5',
				'longitudtipo' => 'F',
				'tipo' => 'N',
				'condiciones' => '',
			),

			'TELÉFONO' => array(
				'longitud' => '11',
				'longitudtipo' => 'V',
				'tipo' => 'N',
				'condiciones' => '',
			),

			'DIRECCIÓN_ORIGEN' => array(
				'longitud' => '2',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'EMPRESA' => array(
				'longitud' => '99',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'DIRECCIÓN_CALLE_NÚMERO_1' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'DIRECCIÓN_COMPLEMENTO_1' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'COLONIA_O_POBLACIÓN_1' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'DELEGACIÓN_O_MUNICIPIO_1' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'CIUDAD_1' => array(
				'longitud' => '40',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'ESTADO_1' => array(
				'longitud' => '4',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'C.P._1' => array(
				'longitud' => '5',
				'longitudtipo' => 'F',
				'tipo' => 'N',
				'condiciones' => '',
			),

			'TELÉFONO_1' => array(
				'longitud' => '11',
				'longitudtipo' => 'V',
				'tipo' => 'N',
				'condiciones' => '',
			),

			'SALARIO' => array(
				'longitud' => '9',
				'longitudtipo' => 'V',
				'tipo' => 'N',
				'condiciones' => '',
			),

			'PAIS_1' => array(
				'longitud' => '2',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'DIRECCIÓN_ORIGEN' => array(
				'longitud' => '2',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'CLAVE_OTORGANTE' => array(
				'longitud' => '10',
				'longitudtipo' => 'F',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'NOMBRE_DEL_OTORGANTE' => array(
				'longitud' => '16',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'NUMERO_CUENTA' => array(
				'longitud' => '25',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'TIPO_RESPONSABILIDAD_CUENTA' => array(
				'longitud' => '1',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'TIPO_CUENTA' => array(
				'longitud' => '1',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'TIPO_CONTRATO' => array(
				'longitud' => '2',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'MONEDA' => array(
				'longitud' => '2',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'FRECUENCIA_DE_PAGOS' => array(
				'longitud' => '1',
				'longitudtipo' => 'F',
				'tipo' => 'A',
				'condiciones' => '',
			),

			'NÚMERO_DE_PAGOS' => array(
				'longitud' => '4',
				'longitudtipo' => 'V',
				'tipo' => 'N',
				'condiciones' => '',
			),

			'MONTO_A_PAGAR' => array(
				'longitud' => '9',
				'longitudtipo' => 'V',
				'tipo' => 'M',
				'condiciones' => '',
			),

			'FECHA_APERTURA' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'FECHA_ÚLTIMO_PAGO' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'FECHA_ULTIMA_COMPRA' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'FECHA_CIERRE_CREDITO' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'FECHA_REPORTE' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'CREDITO_MAXIMO' => array(
				'longitud' => '9',
				'longitudtipo' => 'V',
				'tipo' => 'M',
				'condiciones' => '',
			),

			'SALDO_ACTUAL' => array(
				'longitud' => '10',
				'longitudtipo' => 'V',
				'tipo' => 'M',
				'condiciones' => '',
			),

			'LIMITE_DE_CREDITO' => array(
				'longitud' => '9',
				'longitudtipo' => 'V',
				'tipo' => 'M',
				'condiciones' => '',
			),

			'SALDO_VENCIDO' => array(
				'longitud' => '9',
				'longitudtipo' => 'V',
				'tipo' => 'M',
				'condiciones' => '',
			),

			'NÚMERO_PAGOS_VENCIDOS' => array(
				'longitud' => '4',
				'longitudtipo' => 'V',
				'tipo' => 'N',
				'condiciones' => '',
			),

			'FORMA_PAGO_MOP' => array(
				'longitud' => '2',
				'longitudtipo' => 'F',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'CLAVE_OBSERVACION' => array(
				'longitud' => 'A',
				'longitudtipo' => 'F',
				'tipo' => '2',
				'condiciones' => '',
			),

			'CLAVE_ANTERIOR_OTORGANTE' => array(
				'longitud' => '10',
				'longitudtipo' => 'F',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'NOMBRE_ANTERIOR_OTORGANTE' => array(
				'longitud' => '16',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'NÚMERO_CTA_ANTERIOR' => array(
				'longitud' => '25',
				'longitudtipo' => 'V',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'FECHA_PRIMER_INCUMPLIMIENTO' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'SALDO_INSOLUTO' => array(
				'longitud' => '10',
				'longitudtipo' => 'V',
				'tipo' => 'M',
				'condiciones' => '',
			),

			'MONTO_ULTIMO_PAGO' => array(
				'longitud' => '9',
				'longitudtipo' => 'V',
				'tipo' => 'M',
				'condiciones' => '',
			),

			'FECHA_INGRESO_CARTERA_VENCIDA' => array(
				'longitud' => '8',
				'longitudtipo' => 'F',
				'tipo' => 'F',
				'condiciones' => '',
			),

			'MONTO_INTERESES' => array(
				'longitud' => '9',
				'longitudtipo' => 'V',
				'tipo' => 'M',
				'condiciones' => '',
			),

			'FORMA_PAGO_MOP_INTERESES' => array(
				'longitud' => '2',
				'longitudtipo' => 'F',
				'tipo' => 'AN',
				'condiciones' => '',
			),

			'DÍAS_VENCIMIENTO' => array(
				'longitud' => '3',
				'longitudtipo' => 'V',
				'tipo' => 'N',
				'condiciones' => '',
			),
			'DÍAS_DESDE_ULT_PAGO' => array(
				'longitud' => '3',
				'longitudtipo' => 'V',
				'tipo' => 'N',
				'condiciones' => '',
			),

			'PLAZO_CREDITO' => array(
				'longitud' => '6',
				'longitudtipo' => 'V',
				'tipo' => 'N',
				//asigno que solo dos decimas puede tener en el redondeo
				'condiciones' =>
				array(
					'redondeo' => '2',
				),
			),

			'MONTO_CREDITO_ORIGINAL' => array(
				'longitud' => '9',
				'longitudtipo' => 'V',
				'tipo' => 'M',
				'condiciones' => '',
			),

			'CORREO_ELECTRONICO' => array(
				'longitud' => '100',
				'longitudtipo' => 'V',
				'tipo' => 'A',
				'condiciones' => '',
			),
		);

		/* Comparamos si existe el key en el sistema */
		if (array_key_exists($campo, $columnas)) {
			//COMPARAMOS EL TIPO DE CAMPO

			if ($columnas[$campo]['tipo'] == "A") {	
				//CORTAMOS SEGUN SEA LA LONGITUD
				$valor = substr(self::procesarCampoAlfabetico($valor), 0, $columnas[$campo]['longitud']);
			}

			if ($columnas[$campo]['tipo'] == "N") {
				//TIPO NUMERICO SOLO NUMEROS
				if ($valor != "") {
					if ($columnas[$campo]['condiciones']['redondeo'] != "") {
						$valor = round($valor, $columnas[$campo]['condiciones']['redondeo']);
						$numero = explode(".", $valor);
						$decimales = str_pad($numero[1], $columnas[$campo]['condiciones']['redondeo'], "0", STR_PAD_RIGHT);
						$valor = $numero[0] . "." . $decimales;
					} else {
						if (($campo === "C.P.") || ($campo === "C.P._1")) {
							$valor = self::procesarCampoNumerico($valor);
						} else {
							$valor = round($valor);
						}
					}

					//CORTAMOS SEGUN SEA LA LONGITUD
					$valor = substr($valor, -$columnas[$campo]['longitud']);
				}
			}

			if ($columnas[$campo]['tipo'] == "AN") {
				$valor = substr(self::procesarCampoAlfanumerico($valor), 0, $columnas[$campo]['longitud']);
			}

			if ($columnas[$campo]['tipo'] == "F") {
				// La fecha de cumpleaños viene en formate AAAA-MM-DD
				// El formato que requiere BuróDeCredito es DDMMAAAA
				if (strlen($valor) === 8) {
					return $valor;
				}

				$valor = substr(self::procesarCampoFecha($valor), 0, $columnas[$campo]['longitud']);
			}

			if ($columnas[$campo]['tipo'] == "M") {
				//TIPO MONEDA SOLO NUMEROS
				$valor = round($valor);

				//CORTAMOS SEGUN SEA LA LONGITUD
				$valor = substr($valor, -$columnas[$campo]['longitud']);
			}
		} else {
			$valor;
		}

		return $valor;
	}

	public function getBasesPorcentajes(){
		$data=array(
			'Equipo'=>'Equipo',
			'EquipoIVA'=>'Equipo + IVA',
			'Financiamiento'=>'Financiamiento',
		);
		return $data;
	}

	public function getBasesPorcentajes2(){
		$data=array(
			'Equipo'=>'Equipo',
			'EquipoIVA'=>'Equipo + IVA',
			'Financiamiento'=>'Financiamiento',
			'NumeroRentas'=>'Número de Rentas',
		);
		return $data;
	}

	public function getBasesPorcentajes3(){
		$data=array(
			'Equipo'=>'Equipo',
			'EquipoIVA'=>'Equipo + IVA',
		);
		return $data;
	}

	public function getTipoValor(){
		$data=array(
			'1'=>'Monto',
			'2'=>'Porcentaje',
		);
		return $data;
	}

	public function getIntegrantes(){
		if(!isset($this->_integrantes)){
			if(isset($this->id_grupo_cliente) && $this->id_grupo_cliente>0 && isset($this->id)){
				$solidarios=GruposSolidarios::model()->count("id_solicitud=:solicitud",array(':solicitud'=>$this->id));
				$this->_integrantes=$solidarios;
			}
		}
		return $this->_integrantes;
	}
	public function setIntegrantes($n){
		$this->_integrantes=$n;
	}

	public function getEtapa($etapa=null){//Si pasa etapa, indica el estatus, si no pasa etapa indica la etapa actual
		if(is_null($etapa)){
			$etapa=0;
			for($i=7;$i>=1;$i--){
				if($this->getEtapa($i)==true){
					$etapa=$i;
					$value=true;
					break;
				}
			}
		}else{
			$value=true;
			switch ($etapa){
				case 1://Cotización
					if($this->isNewRecord){
						$value=false;
					}else{
						if(!isset($this->id_cotizador) || $this->id_cotizador==0){
							$value=false;
						}
					}
					break;
				case 2://Solicitud
					if($this->isNewRecord){
						$value=false;
					}
					break;
				case 3://Expediente
					if(isset($this->id_cliente0->id_tipo_cliente) && $this->id_cliente0->id_tipo_cliente!=""){
						if(isset($this->id_cliente0->tipo_persona) && $this->id_cliente0->tipo_persona!=""){
							$documentosRequeridos=DocumentosRequeridos::model()->findAll("etapa=:etapa AND (id_producto IS NULL OR id_producto=:producto) AND  (id_tipo_cliente IS NULL OR id_tipo_cliente=:tipo_cliente) AND (tipo_persona IS NULL OR tipo_persona=:tipo_persona)",array(':etapa'=>'Disposicion',':producto'=>$this->id_producto,':tipo_cliente'=>$this->id_cliente0->id_tipo_cliente,':tipo_persona'=>$this->id_cliente0->tipo_persona));
						}else{
							$documentosRequeridos=DocumentosRequeridos::model()->findAll("etapa=:etapa AND (id_producto IS NULL OR id_producto=:producto) AND (id_tipo_cliente IS NULL OR id_tipo_cliente=:tipo_cliente) AND (tipo_persona IS NULL)",array(':etapa'=>'Disposicion',':producto'=>$this->id_producto,':tipo_cliente'=>$this->id_cliente0->id_tipo_cliente));
						}
					}else{
						if(isset($this->id_cliente0->tipo_persona) && $this->id_cliente0->tipo_persona!=""){
							$documentosRequeridos=DocumentosRequeridos::model()->findAll("etapa=:etapa AND (id_producto IS NULL OR id_producto=:producto) AND (id_tipo_cliente IS NULL) AND (tipo_persona IS NULL OR tipo_persona=:tipo_persona)",array(':etapa'=>'Disposicion',':producto'=>$this->id_producto,':tipo_persona'=>$this->id_cliente0->tipo_persona));
						}else{
							$documentosRequeridos=DocumentosRequeridos::model()->findAll("etapa=:etapa AND (id_producto IS NULL OR id_producto=:producto) AND (id_tipo_cliente IS NULL) AND (tipo_persona IS NULL)",array(':etapa'=>'Disposicion',':producto'=>$this->id_producto));
						}
					}
					foreach ($documentosRequeridos as $documentoRequerido){
						if(!DocumentosEntregados::model()->with("id_solicitud0")->exists("id_documento_requerido=:documento AND id_solicitud0.id_cotizador=:cotizacion AND status=:status",array(':documento'=>$documentoRequerido->id,':cotizacion'=>$this->id,':status'=>'1'))){
							$value=false;
							break;
						}
					}
					break;
				case 4://Autorización
					if($this->isNewRecord){
						$value=false;
					}else{
						if(!in_array($this->status_asignado,array('Aceptada','Pagado','Incobrable','Reestructurado','Quebrantado'))){
							$value=false;
						}
					}
					break;
				case 5://Tabla de Amortización
					if($this->isNewRecord){
						$value=false;
					}else{
						if(!Amortizaciones::model()->with("id_solicitud0")->exists("id_solicitud=:solicitud",array(':solicitud'=>$this->id))){
							$value=false;
							break;
						}
					}
					break;
				case 6://Entrega Disposición
					if($this->isNewRecord){
						$value=false;
					}else{
						if(!EntregasDisposiciones::model()->with("id_solicitud0")->exists("id_solicitud=:solicitud AND status=:status",array(':solicitud'=>$this->id,':status'=>'Entregado'))){
							$value=false;
							break;
						}
					}
					break;
				case 7://Pagos
					if($this->isNewRecord){
						$value=false;
					}else{
						$nC=Amortizaciones::model()->with("id_solicitud0")->count("id_solicitud=:solicitud AND status=:status",array(':solicitud'=>$this->id,':status'=>'Calculado'));
						$nT=Amortizaciones::model()->with("id_solicitud0")->count("id_solicitud=:solicitud",array(':solicitud'=>$this->id));
						if($nT==0 || $nC>0){
							$value=false;
							break;
						}
					}
					break;
			}
		}
		return $value;
	}

	public function getUnidadPlazo(){
		$unidad = $this->id_tipo_amortizacion0->plazo;
		return $unidad;
	}

	public function getMontoSolidario() {
		$grupos=GruposSolidarios::model()->findAll('id_solicitud=:solicitud',array(':solicitud'=>$this->id));
		$monto=0;
		foreach ($grupos as $grupo){
			$monto+=$grupo->monto;
		}
		return $monto;
	}
	public function getMontoSolidarioAceptado() {
		$grupos=GruposSolidarios::model()->findAll('id_solicitud=:solicitud AND status=:aceptada',array(':solicitud'=>$this->id,':aceptada'=>'Aceptada'));
		$monto=0;
		foreach ($grupos as $grupo){
			$monto+=$grupo->monto;
		}
		return $monto;
	}
	public function getStatusSolidario() {
		$grupos=GruposSolidarios::model()->findAll('id_solicitud=:solicitud',array(':solicitud'=>$this->id));
		$status="";
		if(count($grupos)>0){
			$status="Aceptada";
			foreach ($grupos as $grupo){
				if($grupo->status!="Aceptada"){
					$status="En Revisión";
					break;
				}
			}
			$amortizaciones=Amortizaciones::model()->with("id_grupo_solidario0")->findAll('id_grupo_solidario0.id_solicitud=:solicitud',array(':solicitud'=>$this->id));
			$amortizacionesPagadas=Amortizaciones::model()->with("id_grupo_solidario0")->findAll('id_grupo_solidario0.id_solicitud=:solicitud AND t.status=\'Registrado\'',array(':solicitud'=>$this->id));
			if(count($amortizaciones)==count($amortizacionesPagadas) && !empty($amortizaciones)){
				$status="Pagado";
			}
		}
		return $status;
	}

	/////////////////////////////////////


	/////////////////////////////////////
	/**
	 * add visible cotizador/solicitud
	 */
	public function getProductos($array = false, $visibleCotizadorSolicitud = true,$isAppRequest = false)
	{
		$criteria=new CDbCriteria();
		$criteria->alias = 'prod';
		$criteria->order="prod.nombre ASC";

		if ( $visibleCotizadorSolicitud ) {
			if(isset($this->id_producto)){
                $criteria->condition = '(visible_cotizador_solicitud = 1 OR id='.$this->id_producto.')';
            }else{
                $criteria->condition = 'visible_cotizador_solicitud = 1';
            }
		}
		if($isAppRequest){ 
			$criteria->condition = 'NOT JSON_SEARCH(origenes,"one","app") IS NULL OR NOT JSON_SEARCH(origenes,"one","app2") IS NULL OR NOT JSON_SEARCH(origenes,"one","api") IS NULL';
			$criteria->with  = array('id_tipo_amortizacion0','id_comision0');
		}
		
		return $array ?  Productos::model ()->with('id_tipo_amortizacion0','id_comision0')->findAll ($criteria) : CHtml::listData ( Productos::model ()->findAll ($criteria), 'id', 'nombre' );
	}
	
	public function getFondeadoras() {
		$criteria=new CDbCriteria();
		$criteria->order="nombre ASC";
		return CHtml::listData ( Fondeadoras::model ()->findAll ($criteria), 'id', 'clave' );
	}
	public function getAporteFondeadoras(){
		$criteria=new CDbCriteria();
		$criteria->order="nombre ASC";
		return CHtml::listData ( AportesFondeadores::model()->findAll(),'id','clave');
	}
	public function getSucursales() {
		$data=Sucursales::model()->findAll();
		return CHtml::listData ( $data, 'id', 'nombre' );
	}
	public function getEmpresas() {
		$data=Empresa::model()->findAll();
		return CHtml::listData ( $data, 'id', 'nombre_comercial' );
	}
	public function getStatus() {
		$user=Usuarios::model()->findByPk(Yii::app()->user->getId());
		if($user->mesa_control==1){
			if(isset($this->scenario) && $this->scenario=="calificar"){
				if(in_array($this->status_asignado,array('Aceptada','Pagado','Reestructurado'))){
					$data=array(
						$this->status_asignado=>$this->status_asignado,
					);
				}else{
					$data=array(
						'Registrada'=>'Registrada',
						'En Revisión'=>'En Revisión',
						'Aceptada'=>'Aceptada',
						'Rechazada'=>'Rechazada',
						'Declinada'=>'Declinada',
					);
				}
			}else{
				$data=array(
					'Registrada'=>'Registrada',
					'En Revisión'=>'En Revisión',
					'Aceptada'=>'Aceptada',
					'Pagado'=>'Pagado',
					'Reestructurado'=>'Reestructurado',
					'Rechazada'=>'Rechazada',
					'Declinada'=>'Declinada',
				);
			}
		}else{
			$data=array(
				'Registrada'=>'Registrada',
				'En Revisión'=>'En Revisión',
			);
		}
		return $data;
	}

	public function getCalificacionesRiesgo(){
		$data=CalificacionesRiesgo::model()->findAll(array('order'=>'riesgo ASC'));
		return CHtml::listData($data,"clave","clave");
	}

	public function getClientes($array = false)
	{
		$criteria=new CDbCriteria();
		$criteria->alias="c";
		$criteria->select = '*';
		$criteria->order="c.nombre ASC";
		$filters='';
		$arrCl=array();
		$model='';

		if(isset($_GET['limit']) && isset($_GET['offset'])){
			$criteria->limit=$_GET['limit'];
			$criteria->offset=$_GET['offset'];
		}

		if (isset($_GET['filter'])){
			$filters=json_decode($_GET['filter'],true);
			$propertysRequired=['property','operator','value'];
			$inte=0;
			$querys=array();
			foreach ($filters as $filter){
				$c="";
				for ($i=0; $i<count($propertysRequired); $i++){
					if(!array_key_exists($propertysRequired[$i],$filter)){
						header('content-type: application/json');
						http_response_code(400);
						exit(
							json_encode([
								'type' => 'error',
								'success' => false,
								'data' => array(
									'message' => "Bad request the property {$propertysRequired[$i]} is required for params filter",
									'errorCode' => 400,
								)
							])
						);
					}else{
						if($filters[$inte][$propertysRequired[$i]]=="" || $filters[$inte][$propertysRequired[$i]]==null){
							header('content-type: application/json');
							http_response_code(400);
							exit(
							json_encode([
								'type' => 'error',
								'success' => false,
								'data' => array(
									'message' => "Bad request the value {$propertysRequired[$i]} is required",
									'errorCode' => 400,
								)
							])
							);
						}
						$c.=$filters[$inte][$propertysRequired[$i]].(($propertysRequired[$i]=='value')?"":" ");
					}
				}
				$conMin=explode('like',$c);
				$conMax=explode('LIKE',$c);
				if(count($conMin)>1){
					$c=$conMin[0]."LIKE '".ltrim($conMin[1]."%'");
				}elseif (count($conMax)>1){
					$c=$conMax[0]."LIKE '".ltrim($conMax[1]."%'");
				}
				array_push($querys,$c);
				$inte++;
			}
		}

		$Ejecutivo=Ejecutivos::model()->findByAttributes(array('id_usuario'=>Yii::app()->user->getId()));
		if(!is_null($Ejecutivo)){
			//$criteria->join="LEFT JOIN ejecutivos e ON( c.id_ejecutivo=e.id)";
			// $criteria->with="id_ejecutivo0";
			$criteria->with="id_ejecutivo0";
			$criteria->together = true;
			$criteria->condition="id_ejecutivo0.id=".$Ejecutivo->id. " and es_cliente = 1 ";
			if(isset($_GET['filter'])){
				foreach ($querys as $query) {
					$criteria->condition=$query;
				}
			}
			//$model=Clientes::model ()->findAll ($criteria);
		}else{
			$criteria->condition=" es_cliente = 1 ";
			
			if(isset($_GET['filter'])){
				foreach ($querys as $query) {
					$criteria->condition=$query;
				}
			}
			//$model=Clientes::model()->findAll($criteria);
			if($filters){
				
				$sql = "Select * from clientes where ".$filters[0]['property']." ".$filters[0]['operator']." '".$filters[0]['value']."%' AND es_cliente = 1 ";
					
				$r1 = Yii::app()->db->createCommand($sql)->queryAll();
				
					foreach($r1 as $key=>$val){
						$sql2 = "select cl.*, pc.actividad_economica as 'Actividad_Economica', pc.ocupacion as 'Ocupacion', pc.actividad_economica_scian as 'Actividad_Economica_scian', pc.riesgo_asignado as 'Riesgo_Asignado' from clientes cl INNER JOIN pld_clientes pc ON (cl.id=pc.id_cliente) where cl.id =".$r1[$key]['id'];
						$r2 = Yii::app()->db->createCommand($sql2)->queryAll();
						if($r2!=null){
							$r1[$key]=array_merge($r1[$key],$r2[0]);
						}

					}
				
			}else{
				$criteria->with = 'id_pld_cliente0';
				//$model= Clientes::model()->with('id_pld_cliente0')->findAll();
			}
		
		}

		$data = [];

		$model = Clientes::model()->findAll($criteria); 
		
		foreach ($model as $key => $value) {
			$model[$key]->fullName = "";

			$model[$key]->fullName = $this->getClientFullName($model[$key]->nombre, $model[$key]->id);
		}

		if($filters){
			return $array ? $r1 : CHtml::listData ( $r1, 'id', 'fullName' );
		}else{
			return $array ? $model : CHtml::listData ( $model, 'id', 'fullName' );
		}
		//return $array ? $r2 : CHtml::listData ( $r2, 'id', 'fullName' );
	}

	public function getClientFullName($name, $id)
	{
		$clientPld = PldClientes::model()->findByAttributes([],'id_cliente =:v0', [':v0' => $id]);

		return $name.' '.$clientPld->apellido_paterno.' '.$clientPld->apellido_materno;
	}

	public function getClientes2() {
		return CHtml::listData ( Clientes::model ()->findAll (), 'id', 'fullName' );
	}
	public function getSolidarios() {
		return CHtml::listData ( GruposSolidarios::model ()->with("id_cliente0")->findAll ("id_solicitud=:solicitud",array(':solicitud'=>$this->id)), 'id_cliente0.id', 'id_cliente0.fullName' );
	}
	public function getGruposClientes($array = false) {
		if(Yii::app()->user->getPerfil()=="Administrador de Sucursal"){
			if(Yii::app()->user->getUserModel()->filtro_sucursal==1){
				$data=GruposClientes::model ()->with("clientes0")->findAll ("(SELECT COUNT(*) FROM clientes WHERE id_grupo_cliente=t.id)>=1 AND clientes0.id_sucursal=:sucursal",array(':sucursal'=>Yii::app()->user->getUserModel()->id_sucursal));
			}else{
				$data=GruposClientes::model ()->findAll ("(SELECT COUNT(*) FROM clientes WHERE id_grupo_cliente=t.id)>=1 AND (id_usuario=:usuario OR id_usuario IS NULL)",array(':usuario'=>Yii::app()->user->getId()));
			}
		}else{
			$data=GruposClientes::model ()->findAll ("(SELECT COUNT(*) FROM clientes WHERE id_grupo_cliente=t.id)>=1");
		}
		return $array ? $data : CHtml::listData ($data , 'id', 'nombre' );
	}
	public function getSupervisores($array = false) {
		return $array ? Supervisores::model ()->with("id_usuario0")->findAll() : CHtml::listData ( Supervisores::model ()->with("id_usuario0")->findAll(), 'id', 'id_usuario0.fullName' );
	}
	public function getEjecutivos() {
		return CHtml::listData ( Ejecutivos::model ()->with("id_usuario0")->findAll(), 'id', 'id_usuario0.fullName' );
	}
	public function getGruposSolicitudes($array = false) {
		return $array ? GruposSolicitudes::model ()->findAll (array('order'=>'nombre ASC'))  : CHtml::listData ( GruposSolicitudes::model ()->findAll (array('order'=>'nombre ASC')), 'id', 'nombre' );
	}
	public function getEquipoActivo($array = false) {
		return $array ? ArrendamientosSolicitudes::model ()->findAll (array('order'=>'id ASC')) : CHtml::listData ( ArrendamientosSolicitudes::model ()->findAll (array('order'=>'id ASC')), 'id', 'arrendamiento' );
	}
	public function getTiposClientes() {
		return CHtml::listData ( TiposClientes::model ()->findAll (array('order'=>'id ASC')), 'id', 'nombre' );
	}
	public function getTiposMoratorios() {
		return Productos::model()->getTiposMoratorios();
	}
	public function getTasasReferencia($array = false) {
		$data=TasasReferencia::model ()->findAll ();
		return $array ? $data : CHtml::listData ($data , 'id', 'nombre' );
	}

    public function getTasa($num=0,$disp=null) {
        $tasa=$this->sobretasa;
        if($num>0){
            if(isset($disp)){
                $variable=DisposicionesTasasVariables::model()->find("id_disposiciones=$disp AND '$num' BETWEEN numero_amortizacion_ini AND numero_amortizacion_fin");
            }else{
                $variable=SolicitudesTasasVariables::model()->find("id_solicitud=$this->id AND '$num' BETWEEN numero_amortizacion_ini AND numero_amortizacion_fin");
            }
            if(isset($variable)){
                $tasa=($variable->tasa/100);
            }
        }
        return $tasa;
    }
	public function getFinanciamientos(){
		$data=array(
			'Financiado'=>'Financiado',
			'No Financiado'=>'No Financiado'
		);
		return $data;
	}
	public function getTiposTasas() {
		return CHtml::listData ( TiposTasas::model ()->findAll (), 'id', 'nombre' );
	}
	public function getTiposAmortizacion($array = false) {
        $valores_excluidos = [22,23,28];
        if(in_array($this -> id_tipo_amortizacion, $valores_excluidos)){
            return $array ?  TiposAmortizacion::model ()->findAll ('id IS NOT NULL GROUP BY nombre ORDER BY nombre ASC') : CHtml::listData ( TiposAmortizacion::model ()->findAll ('id IS NOT NULL GROUP BY nombre  ORDER BY nombre ASC'), 'id', 'nombre' );
        }else{
            return $array ? TiposAmortizacion::model ()->findAll ('id NOT IN(22,23,28) GROUP BY nombre ORDER BY nombre ASC') : CHtml::listData ( TiposAmortizacion::model ()->findAll ('id NOT IN(22,23,28) GROUP BY nombre  ORDER BY nombre ASC'), 'id', 'nombre' );
        }
	}
	public function getTiposPagos($array = false) {
		return $array ? TiposPagos::model ()->findAll () : CHtml::listData ( TiposPagos::model ()->findAll (), 'id', 'nombre' );
	}

    private function generateWhere($model, $queryP) {
        $Bstring = "";
        $a = 0;
        foreach (json_decode($queryP, true) as $valor) {
            if($model->hasAttribute($valor['property'])) {
                $Bstring .= (($a > 0) ? " AND " : "") . $valor['property']. " " . $valor['operator']. " '" . $valor['value']."'";
            }
            $a++;
        }
        return $Bstring;
    }

    public function getAllRecordsMinimal ($array = false, $json = null) {
        $select1 = 'clave, id, contrato, id_usuario, usuario, nombre_usuario, fecha_solicitud, fecha_aceptacion, fecha_disposicion, fecha_vencimiento, gracia_capital, gracia_interes, id_producto, clave_producto, nombre_producto, id_activo_arrendamiento, id_banco, id_deudor, id_banco_cliente, monto_solicitado, monto_autorizado, entregable, id_tipo_amortizacion, nombre_tipo_amortizacion, sobretasa, descuento_interes, tasa_moratoria, id_impuesto, nombre_impuesto, porcentaje_impuesto, id_impuesto_moratorios, nombre_impuesto_moratorios, porcentaje_impuesto_moratorios, id_parametrico, tipo_garantia, clase_garantia, valor_garantia, descripcion_garantia, id_cliente, clave_cliente, nombre_cliente, id_grupo_cliente, id_usuario_aceptacion, usuario_aceptacion, nombre_usuario_aceptacion, justificacion_aceptacion, status_calculado, status_asignado, id_sucursal, nombre_sucursal, id_empresa, nombre_empresa, tabla_personalizada, numero_cuenta, poliza, id_grupo_solicitud, id_tipo_pago, nombre_tipo_pago, metodo_asignacion_status, sesion_comite, aplicacion_moratorios, importado, cat, tabla_disposiciones, ajuste_primera_amortizacion, ajuste_ultima_amortizacion, notas_calificacion, id_cotizador, id_linea, id_moneda, tipo_cobro, referencia_oxxo, referencia_pago, referencia_pagos, referencia_pagos2, gracia, id_reestructura, version, referencia_importacion, etapa';
        $select2 = 'clave, id';
        $select = $array ? $select1 : $select2;

        $model = new Solicitudes;
        $whereCond = $this->generateWhere($model, $json);

        $records =   Yii::app()->db->createCommand()
            ->select($select)
            ->from('solicitudes')
            ->where($whereCond)
            ->queryall();

        return $array ? $records : CHtml::listData ($records);

    }
	public function getTiposCobros() {
		$data=array(
			'Vencido'=>'Vencido',
			'Anticipado'=>'Anticipado',
		);
		return $data;
	}
	public function getTiposReestructuras() {
		$data=array(
			'Capital + Interes + Comisiones + Mora'=>'Capital + Interes + Comisiones + Mora',
			'Capital + Interes + Comisiones'=>'Capital + Interes + Comisiones',
			'Capital + Comisiones'=>'Capital + Comisiones',
		);
		return $data;
	}
	public function getTiposQuebrantos() {
		$data=array(
			'Capital + Interes + Comisiones + Mora'=>'Capital + Interes + Comisiones + Mora',
			'Capital + Interes + Comisiones'=>'Capital + Interes + Comisiones',
			'Capital + Comisiones'=>'Capital + Comisiones',
		);
		return $data;
	}
	public function getCarteraVencidaList(){
		$data=array(
			"Cartera Vencida"=>"Cartera Vencida",
			"Cartera Vigente"=>"Cartera Vigente",
		);
		return $data;
	}
	public function getMonedas($array = false) {
		return $array ? Monedas::model ()->findAll () :  CHtml::listData ( Monedas::model ()->findAll (), 'id', 'clave' );
	}
	public function getCotizadores($array = false) {
		if($this->isNewRecord){
		    if(isset($this->id_grupo_cliente) && !empty($this->id_grupo_cliente)){
                $data=Cotizador::model()->with("solicitud0")->findAll("t.id_grupo_cliente=:cliente AND solicitud0.id IS NULL",array(':cliente'=>$this->id_grupo_cliente));
            }else{
                $data=Cotizador::model()->with("solicitud0")->findAll("t.id_cliente=:cliente AND solicitud0.id IS NULL",array(':cliente'=>$this->id_cliente));
            }
		}else{
			$data=Cotizador::model()->findAll("id=:cotizador",array(':cotizador'=>$this->id_cotizador));
		}
		return $array ? $data : CHtml::listData ($data, 'id', 'clave' );
	}
	public function getLineasCredito(){
		$fecha=date("Y-m-d");
		if($this->isNewRecord){
			$data=LineasCredito::model()->findAll("id_cliente=:cliente AND (modulo=:modulo OR modulo=:modulo2) AND DATE_ADD(fecha_disposiciones,INTERVAL periodo_disposiciones MONTH)>:fecha AND DATE_ADD(fecha_vigencia,INTERVAL periodo_vigencia MONTH)>:fecha",array(':cliente'=>$this->id_cliente,':modulo'=>'Crédito',':modulo2'=>'Arrendamiento',':fecha'=>$fecha));
		}else{
			$data=LineasCredito::model()->findAll("id=:linea",array(':linea'=>$this->id_linea));
		}
		return CHtml::listData($data, "id", "montoVSaldo");
	}

	private function is_date($date) {
		return (date('Y-m-d H:i:s', strtotime($date)) == $date || date('Y-m-d', strtotime($date)) == $date);
	}
	public function textoANumero($monto){
		$monto=str_replace(",", "",$monto);
		$monto=str_replace("%", "",$monto);
		return $monto;
	}
	public function monedaALetras($moneda){
		$letras=self::montoEnLetras($moneda);
		return $letras;
	}
	public function porcentajeALetras($porcentaje){
		$letras=self::montoEnLetras2($porcentaje,"",true,"","","por ciento",1,"punto");
		return $letras;
	}
	public function numeroALetras($numero){
		$letras=self::montoEnLetras($numero,"",true,"","","",1,"punto");
		return $letras;
	}
	public function fechaALetras($fecha=null){
		$meses=array(
			'diciembre','enero','febrero','marzo','abril','mayo','junio','julio','agosto','septiembre','octubre','noviembre','diciembre'
		);
		if(is_null($fecha)){
			$fecha=date("Y-m-d");
		}
		if(self::is_date($fecha)){
			$letras=date("d",strtotime($fecha))." de ";
			$letras.=$meses[date("n",strtotime($fecha))]." de ";
			$letras.=date("Y",strtotime($fecha));
		}else{
			$letras="Fecha Invalida";
		}
		return $letras;
	}

	public function convertirDiaALetras($dia) {
		    $unidades = array('', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve', 'diez', 'once', 'doce', 'trece', 'catorce', 'quince', 'dieciséis', 'diecisiete', 'dieciocho', 'diecinueve', 'veinte', 'veintiuno', 'veintidós', 'veintitrés', 'veinticuatro', 'veinticinco', 'veintiséis', 'veintisiete', 'veintiocho', 'veintinueve', 'treinta', 'treinta y uno');
		if ($dia >= 1 && $dia <= 31) {
			return $unidades[$dia];
		} else {
			return 'El día está fuera del rango válido.';
		}
	}
	public function convertirMesALetras($mes) {
		$meses = array('', 'enero', 'febrero', 'marzo', 'abril', 'mayo', 'junio', 'julio', 'agosto', 'septiembre', 'octubre', 'noviembre', 'diciembre');
		if ($mes >= 1 && $mes <= 12) {
			return $meses[$mes];
		} else {
			return 'El mes está fuera del rango válido.';
		}
	}

	public function convertirAnioALetras($anio) {
		$unidades = array('', 'uno', 'dos', 'tres', 'cuatro', 'cinco', 'seis', 'siete', 'ocho', 'nueve');
		$decenas = array('', '', 'veinti', 'treinta', 'cuarenta', 'cincuenta', 'sesenta', 'setenta', 'ochenta', 'noventa');
		$centenas = array('', 'ciento', 'doscientos', 'trescientos', 'cuatrocientos', 'quinientos', 'seiscientos', 'setecientos', 'ochocientos', 'novecientos');
		$miles = array('', 'mil', 'dos mil', 'tres mil', 'cuatro mil', 'cinco mil', 'seis mil', 'siete mil', 'ocho mil', 'nueve mil');
		if ($anio >= 1 && $anio <= 9999) {
        $decena = floor($anio / 10) % 10;
        $unidad = $anio % 10;
        $centena = floor($anio / 100) % 10;
        $unidadMil = floor($anio / 1000) % 10;
		$resultado = '';
        if ($unidadMil > 0) {
            $resultado .= $miles[$unidadMil] . ' ';
        }
        if ($centena > 0) {
            $resultado .= $centenas[$centena] . ' ';
        }
		if ($decena == 1) {
            $resultado .= $unidades[$unidad];
        } else {
            if ($decena > 0) {
                $resultado .= $decenas[$decena] . ' ';
            }
            if ($unidad > 0) {
                $resultado .= $unidades[$unidad];
            }
        }
        return $resultado;
    } else {
        return 'El año está fuera del rango válido.';
    }
}

	public function convertirFechaALetras($fecha) {
		$componentes = date_parse($fecha);
		if ($componentes['error_count'] === 0 && checkdate($componentes['month'], $componentes['day'], $componentes['year'])) {
			$diaEnLetras = $this->convertirDiaALetras($componentes['day']);
			$mesEnLetras = $this->convertirMesALetras($componentes['month']);
			$anioEnLetras = $this->convertirAnioALetras($componentes['year']);
			$fechaEnLetras = $diaEnLetras . ' de ' . $mesEnLetras . ' del ' . $anioEnLetras;
			return $fechaEnLetras;
		} else {
			return 'La fecha ingresada no es válida.';
		}
	}

	public function getsesionComiteLetras(){
		$meses=array(
			'diciembre','enero','febrero','marzo','abril','mayo','junio','julio','agosto','septiembre','octubre','noviembre','diciembre'
		);
		if(isset($this->sesion_comite)){
			$fecha=$this->sesion_comite;
			$sesion_letras=date("d",strtotime($fecha))." de ";
			$sesion_letras.=$meses[date("n",strtotime($fecha))]." de ";
			$sesion_letras.=date("Y",strtotime($fecha));
		}

		return $sesion_letras;
	}

	public function montoEnLetras2($monto,$moneda="",$fraccion=false,$fraccion_text="",$texto_inicial="",$texto_final="",$estilo=1,$texto_decimal=""){
		$parms = Yii::app()->getParams();
		$dictionary = $parms['dictionary'];
		$texto_final=($dictionary['PAIS']=="México"?"/100 M.N.":"/100");
		$moneda=($dictionary['PAIS']=="México"?" /peso":"");
		$strLetras=$texto_inicial;
		$monto=str_replace(",","",$monto);
		$monto=str_replace("%", "",$monto);
		$monto=abs($monto);
		$numTemp=str_pad(number_format($monto,2,".",""),18,"0",STR_PAD_LEFT);
		$intFraccion=0;
		if($monto<1){
			$strLetras=$strLetras."Cero ".$this->plural($moneda)." ";
		}else{
			$strLetras=$strLetras.$this->numeroEnLetras((float)substr($numTemp, 0,15));
			if((float)$numTemp==1 or (float)$numTemp<2){
				$strLetras=$strLetras.$moneda." ";
			}elseif ((float)substr($numTemp, 3,12)==0 or (float)substr($numTemp, 9,6)==0){
				$strLetras=$strLetras."de ".$this->plural($moneda)." ";
			}else{
				$strLetras=$strLetras.$this->plural($moneda)." ";
			}
		}
		if($fraccion){
			$intFraccion=(float)substr($numTemp, -2,2);
			switch ($intFraccion){
				case 0:
					if($texto_decimal==""){
						$strLetras=$strLetras."con cero ".$this->plural($fraccion_text);
					}else{
						$strLetras=$strLetras."punto cero ".$this->plural($fraccion_text);
						//$strLetras=$strLetras."$texto_decimal ".$this->plural($fraccion_text);
					}
					break;
				case 1:
					if($texto_decimal==""){
						$strLetras=$strLetras."con un ".$fraccion;
					}else{
						$strLetras=$strLetras."$texto_decimal ".$fraccion;
					}
					break;
				default:
					if($texto_decimal==""){
						$strLetras=$strLetras."con ".$this->numeroEnLetras((float)substr($numTemp, -2,2)).$this->plural($fraccion_text);
					}else{
						$strLetras=$strLetras."$texto_decimal ".$this->numeroEnLetras((float)substr($numTemp, -2,2)).$this->plural($fraccion_text);
					}
			}
		}else{
			$strLetras=$strLetras."con ".substr($numTemp, -2,2);
		}
		$strLetras=$strLetras.$texto_final;
		switch ($estilo){
			case 1:
				$strLetras=strtoupper($strLetras);
				break;
			case 2:
				$strLetras=strtolower($strLetras);
				break;
			case 3:
				$strLetras=ucwords($strLetras);
				break;
		}
		return $strLetras;
	}
	//Letras
	public function montoEnLetras($monto,$moneda=null,$fraccion=false,$fraccion_text="",$texto_inicial="",$texto_final=null,$estilo=1,$texto_decimal=""){
		$parms = Yii::app()->getParams();
		$dictionary = $parms['dictionary'];
		
		$texto_final = $texto_final ?? (($dictionary['PAIS'] == "México") ? "/100 M.N." : "/100");
		$moneda = $moneda ?? (($dictionary['PAIS'] == "México") ? " /peso" : "");

		$strLetras=$texto_inicial;
		$monto=str_replace(",","",$monto);
		$monto=str_replace("%", "",$monto);
		$monto=abs($monto);
		$numTemp=str_pad(number_format($monto,2,".",""),18,"0",STR_PAD_LEFT);
		$intFraccion=0;
		if($monto<1){
			$strLetras=$strLetras."Cero ".$this->plural($moneda)." ";
		}else{
			$strLetras=$strLetras.$this->numeroEnLetras((float)substr($numTemp, 0,15));
			if((float)$numTemp==1 or (float)$numTemp<2){
				$strLetras=$strLetras.$moneda." ";
			}elseif ((float)substr($numTemp, 3,12)==0 or (float)substr($numTemp, 9,6)==0){
				$strLetras=$strLetras."de ".$this->plural($moneda)." ";
			}else{
				$strLetras=$strLetras.$this->plural($moneda)." ";
			}
		}
		if($fraccion){
			$intFraccion=(float)substr($numTemp, -2,2);
			switch ($intFraccion){
				case 0:
					if($texto_decimal==""){
						$strLetras=$strLetras."con cero ".$this->plural($fraccion_text);
					}else{
						$strLetras=$strLetras."cero ".$this->plural($fraccion_text);
						//$strLetras=$strLetras."$texto_decimal ".$this->plural($fraccion_text);
					}
					break;
				case 1:
					if($texto_decimal==""){
						$strLetras=$strLetras."con un ".$fraccion;
					}else{
						$strLetras=$strLetras."$texto_decimal ".$fraccion;
					}
					break;
				default:
					if($texto_decimal==""){
						$strLetras=$strLetras."con ".$this->numeroEnLetras((float)substr($numTemp, -2,2)).$this->plural($fraccion_text);
					}else{
						$strLetras=$strLetras."$texto_decimal ".$this->numeroEnLetras((float)substr($numTemp, -2,2)).$this->plural($fraccion_text);
					}
			}
		}else{
			$strLetras=$strLetras."con ".substr($numTemp, -2,2);
		}
		$strLetras=$strLetras.$texto_final;
		switch ($estilo){
			case 1:
				$strLetras=mb_convert_case($strLetras, MB_CASE_UPPER, "UTF-8");
				break;
			case 2:
				$strLetras=mb_convert_case($strLetras, MB_CASE_LOWER, "UTF-8");
				break;
			case 3:
				$strLetras=mb_convert_case($strLetras, MB_CASE_TITLE, "UTF-8");;
				break;
		}
		return $strLetras;
	}

	public function montoEnLetrasPorcentajes($monto,$moneda="",$fraccion=false,$fraccion_text="",$texto_inicial="",$texto_final="",$estilo=1,$texto_decimal=""){
		$parms = Yii::app()->getParams();
		$dictionary = $parms['dictionary'];
		$texto_final=" POR CIENTO ";
		$moneda="";
		$strLetras=$texto_inicial;
		$monto=str_replace(",","",$monto);
		$monto=str_replace("%", "",$monto);
		$monto=abs($monto);
		$numTemp=str_pad(number_format($monto,2,".",""),18,"0",STR_PAD_LEFT);
		$intFraccion=0;
		if($monto<1){
			$strLetras=$strLetras."Cero ".$this->plural($moneda)." ";
		}else{
			$strLetras=$strLetras.$this->numeroEnLetras((float)substr($numTemp, 0,15));
			if((float)$numTemp==1 or (float)$numTemp<2){
				$strLetras=$strLetras.$moneda." ";
			}elseif ((float)substr($numTemp, 3,12)==0 or (float)substr($numTemp, 9,6)==0){
				$strLetras=$strLetras."de ".$this->plural($moneda)." ";
			}else{
				$strLetras=$strLetras.$this->plural($moneda)." ";
			}
		}
		if($fraccion){
			$intFraccion=(float)substr($numTemp, -2,2);
			switch ($intFraccion){
				case 0:
					if($texto_decimal==""){
						$strLetras=$strLetras."con cero ".$this->plural($fraccion_text);
					}else{
						$strLetras=$strLetras."cero ".$this->plural($fraccion_text);
						//$strLetras=$strLetras."$texto_decimal ".$this->plural($fraccion_text);
					}
					break;
				case 1:
					if($texto_decimal==""){
						$strLetras=$strLetras."con un ".$fraccion;
					}else{
						$strLetras=$strLetras."$texto_decimal ".$fraccion;
					}
					break;
				default:
					if($texto_decimal==""){
						$strLetras=$strLetras."PUNTO ".$this->numeroEnLetras((float)substr($numTemp, -2,2)).$this->plural($fraccion_text);
					}else{
						$strLetras=$strLetras."$texto_decimal ".$this->numeroEnLetras((float)substr($numTemp, -2,2)).$this->plural($fraccion_text);
					}
			}
		}else{
			$strLetras=$strLetras." ".$this->numeroEnLetras((float)substr($numTemp, -2,2)).$this->plural($fraccion_text);
		}
		$strLetras=$strLetras.$texto_final;
		switch ($estilo){
			case 1:
				$strLetras=strtoupper($strLetras);
				break;
			case 2:
				$strLetras=strtolower($strLetras);
				break;
			case 3:
				$strLetras=ucwords($strLetras);
				break;
		}
		return $strLetras;
	}

	private  function numeroEnLetras($numero){
		$numTemp="";
		$co1=0;
		$co2=0;
		$pos=0;
		$dig=0;
		$cen=0;
		$dec=0;
		$uni=0;
		$letra1="";
		$letra2="";
		$letra3="";
		$leyenda="";
		$TFNumero="";

		$numTemp=str_pad(number_format($numero,2,".",""),18,"0",STR_PAD_LEFT);
		$co1=1;
		while ($co1<=5){
			$co2=1;
			while ($co2<=3){
				$dig=(float)substr($numTemp, $pos,1);
				switch ($co2){
					case 1:
						$cen=$dig;
						break;
					case 2:
						$dec=$dig;
						break;
					case 3:
						$uni=$dig;
						break;
				};
				$co2=$co2+1;
				$pos=$pos+1;
			}
			$letra3=$this->centena($uni,$dec,$cen);
			$letra2=$this->decena($uni,$dec);
			$letra1=$this->unidad($uni,$dec);
			switch ($co1){
				case 1:
					if(($cen+$dec+$uni)==1){
						$leyenda="billon ";
					}elseif(($cen+$dec+$uni)>1){
						$leyenda="billones ";
					}
					break;
				case 2:
					if(($cen+$dec+$uni)>=1 and (float)substr($numTemp, 6,3)==0){
						$leyenda="mil millones";
					}elseif(($cen+$dec+$uni)>=1){
						$leyenda="mil ";
					}
					break;
				case 3:
					if(($cen+$dec)==0 and $uni==1){
						$leyenda="millon ";
					}elseif($cen>0 or $dec>0 or $uni>1){
						$leyenda="millones ";
					}
					break;
				case 4:
					if(($cen+$dec+$uni)>=1){
						$leyenda="mil ";
					}
					break;
				case 5:
					if(($cen+$dec+$uni)>=1){
						$leyenda="";
					}
					break;
			}
			$co1=$co1+1;
			$TFNumero=$TFNumero.$letra3.$letra2.$letra1.$leyenda;
			$leyenda="";
			$letra1="";
			$letra2="";
			$letra3="";
		}
		return $TFNumero;
	}

	private function centena($uni,$dec,$cen){
		$cTexto="";
		switch ($cen){
			case 1:
				if(($dec+$uni)==0){
					$cTexto="cien ";
				}else{
					$cTexto="ciento ";
				}
				break;
			case 2:
				$cTexto="doscientos ";
				break;
			case 3:
				$cTexto="trescientos ";
				break;
			case 4:
				$cTexto="cuatrocientos ";
				break;
			case 5:
				$cTexto="quinientos ";
				break;
			case 6:
				$cTexto="seiscientos ";
				break;
			case 7:
				$cTexto="setecientos ";
				break;
			case 8:
				$cTexto="ochocientos ";
				break;
			case 9:
				$cTexto="novecientos ";
				break;
			default:
				$cTexto="";
		}
		return $cTexto;
	}

	private function decena($uni,$dec){
		$cTexto="";
		switch ($dec){
			case 1:
				switch ($uni){
					case 0:
						$cTexto="diez ";
						break;
					case 1:
						$cTexto="once ";
						break;
					case 2:
						$cTexto="doce ";
						break;
					case 3:
						$cTexto="trece ";
						break;
					case 4:
						$cTexto="catorce ";
						break;
					case 5:
						$cTexto="quince ";
						break;
					case 6:
					case 7:
					case 8:
					case 9:
						$cTexto="dieci";
						break;
				}
				break;
			case 2:
				if($uni==0){
					$cTexto="veinte ";
				}elseif($uni>0){
					$cTexto="veinti";
				}
				break;
			case 3:
				$cTexto="treinta ";
				break;
			case 4:
				$cTexto="cuarenta ";
				break;
			case 5:
				$cTexto="cincuenta ";
				break;
			case 6:
				$cTexto="sesenta ";
				break;
			case 7:
				$cTexto="setenta ";
				break;
			case 8:
				$cTexto="ochenta ";
				break;
			case 9:
				$cTexto="noventa ";
				break;
			default:
				$cTexto="";
				break;
		}
		if($uni>0 and $dec>2){
			$cTexto=$cTexto."y ";
		}
		return $cTexto;
	}

	private function unidad($uni,$dec){
		$cTexto="";
		if($dec!=1){
			switch ($uni){
				case 1:
					$cTexto="un ";
					break;
				case 2:
					$cTexto="dos ";
					break;
				case 3:
					$cTexto="tres ";
					break;
				case 4:
					$cTexto="cuatro ";
					break;
				case 5:
					$cTexto="cinco ";
					break;
			}
		}
		switch ($uni){
			case 6:
				$cTexto="seis ";
				break;
			case 7:
				$cTexto="siete ";
				break;
			case 8:
				$cTexto="ocho ";
				break;
			case 9:
				$cTexto="nueve ";
				break;
		}
		return $cTexto;
	}

	private function plural($palabras){
		$palabras = explode(" ", $palabras);
		$palabrasProcesadas = [];

		foreach ($palabras as $palabra) {
			$pos = 0;
			$strpal = "";

			if (strlen(trim($palabra)) > 0){
				// Si la palabra termina en vocal solo se agrega una S (ese) para el plurar
				$pos = strpos("aeiou", substr($palabra, -1, 1));
				
				$strpal =  $palabra . (($pos > 0) ? "s" : "es");
			}

			$palabrasProcesadas[] = $strpal;
		}
		
		return trim(implode(" ", $palabrasProcesadas));
	}

	public function getFechaInicio(){
		$amortizacion=Amortizaciones::model()->with(array("id_solicitud0","id_grupo_solidario0","id_disposicion0"))->find("IFNULL(id_grupo_solidario0.id_solicitud,IFNULL(id_disposicion0.id_solicitud,id_solicitud0.id))=:solicitud AND numero_amortizacion=1",array(':solicitud'=>$this->id));
		$fecha=0;
		if(!is_null($amortizacion)){
			$fecha=$amortizacion->fecha_amortizacion;
		}
		return $fecha;
	}
	public function getFechaFin(){

		$sql="select id from disposiciones where id_solicitud=".$this->id." order by id desc limit 1";
		$disp=Yii::app()->db->createCommand($sql)->queryall();
		$amortizaciones=null;
		
		if(!is_null($disp)){

			foreach($disp as $d){
				if(!is_null($d["id"])){
				$sql="select fecha_amortizacion from amortizaciones where id_disposicion=".$d["id"]." order by id desc limit 1";
				$amortizaciones=Yii::app()->db->createCommand($sql)->queryall(); }
			}

		}else{

			$sql="select fecha_amortizacion from amortizaciones where id_solicitud=".$this->id." order by id desc limit 1";
			$amortizaciones=Yii::app()->db->createCommand($sql)->queryall();

		}

		$fecha=0;


		if(!is_null($amortizaciones)){
			foreach($amortizaciones as $amortizacion){
				$fecha=$amortizacion["fecha_amortizacion"];
			}
		}

		return $fecha;
	}
	public function getFechaInicioInicial(){
		$amortizacion=Amortizaciones::model()->with(array("id_solicitud0"))->find("id_solicitud0.id=:solicitud AND numero_amortizacion=1",array(':solicitud'=>$this->id));
		$fecha=0;
		if(!is_null($amortizacion)){
			$fecha=$amortizacion->fecha_amortizacion;
		}
		return $fecha;
	}
	public function getFechaFinInicial(){
		$amortizacion=Amortizaciones::model()->with(array("id_solicitud0"))->find(array("condition"=>"id_solicitud0.id=:solicitud","order"=>"t.numero_amortizacion DESC","params"=>array(':solicitud'=>$this->id)));
		$fecha=0;
		if(!is_null($amortizacion)){
			$fecha=$amortizacion->fecha_amortizacion;
		}
		return $fecha;
	}

	public function getNotasSolicitud(){
		if(!isset($this->_notasSolicitud)){
			if(isset($this->id) && $this->id!=0){
				$n=NotasClientes::model()->count("id_solicitud=:solicitud",array(':solicitud'=>$this->id));
				$this->_notasSolicitud=$n;
			}
		}

		return $this->_notasSolicitud;
	}
	public function setNotasSolicitud($notas){
		$this->_notasSolicitud=$notas;
	}
    public function getFechasmeses(){
	    $solicitud=Solicitudes::model()->findByPk($this->id);
        $cliente=ClientesFinerio::model()->find('id_cliente=:id_cliente',array(':id_cliente'=>$solicitud->id_cliente));
        $cuentas=CuentasFinerio::model()->findAll('id_cliente_finerio=:id_cliente_finerio',array(':id_cliente_finerio'=>$cliente->id));
        $array=array();
        foreach ($cuentas as $value) {
            $movimientos=MovimientosFinerio::model()->findAll(array('condition'=>'id_account=:id_account','order'=>'date DESC','params'=>array(':id_account'=>$value->id)));
            foreach ($movimientos as $item) {
                    array_push($array,intval(date('m',strtotime($item->date))));
            }
        }
        switch(count(array_count_values($array))){
            case 1:
                $array=array(
                    '1'=>'1 MES',
                );
                break;
            case 2:
                $array=array(
                    '1'=>'1 MES',
                    '2'=>'2 MESES',
                );
               break;
            default:
                $array=array(
                    '1'=>'1 MES',
                    '2'=>'2 MESES',
                    '3'=>'3 MESES',
                );
        }
        return $array;
    }

	///------------------------------------------------//////
	///-------REPORTE DE CIRCULO DE CREDITO------------///////
	///------------------------------------------------//////
	public function getClaveOtorgante(){
		if(!isset($this->_claveOtorgante)){
			$this->_claveOtorgante=Empresa::model()->find()->clave_otorgante;
		}
		return $this->_claveOtorgante;
	}
	public function getNombreOtorgante(){
		if(!isset($this->_nombreOtorgante)){
			$this->_nombreOtorgante=Empresa::model()->find()->nombre_otorgante;;
		}
		return $this->_nombreOtorgante;
	}
	public function getIdentificadorDeMedio(){
		if(!isset($this->_identificadorDeMedio)){
			$this->_identificadorDeMedio="";
		}
		return $this->_identificadorDeMedio;
	}
	public function getFechaExtraccion(){

	  return date("Ymd",strtotime($this->fechaCorte));
	}
	 public function getFechaExtraccionMes(){
	//   return date("Ymd",strtotime($this->fechaCorte));
		return date("Ym"."15",strtotime($this->fechaCorte));

	}
	public function getNotaOtorgante(){
		if(!isset($this->_notaOtorgante)){
			$this->_notaOtorgante="";
		}
		return $this->_notaOtorgante;
	}
	public function getVersion(){
		if(!isset($this->_version)){
			$this->_version="4";
		}
		return $this->_version;
	}
	public function getRazonSocial($update=false){//BURO DE CREDITO
		if(!isset($this->_razonSocial) || $update){
			$this->_razonSocial=$this->id_cliente0->id_pld_cliente0->razon_social;
		}
		return $this->_razonSocial;
	}
	public function getApellidoPaterno($update=false){
		if(!isset($this->_apellidoPaterno) || $update){
			$this->_apellidoPaterno=$this->id_cliente0->id_pld_cliente0->apellido_paterno;
		}
		return $this->_apellidoPaterno;
	}
	public function getApellidoMaterno($update=false){
		if(!isset($this->_apellidoMaterno) || $update){
			$this->_apellidoMaterno=$this->id_cliente0->id_pld_cliente0->apellido_materno;
		}
		return $this->_apellidoMaterno;
	}
	public function getApellidoAdicional($update=false){
		if(!isset($this->_apellidoAdicional) || $update){
			$this->_apellidoAdicional="";
		}
		return $this->_apellidoAdicional;
	}
	public function getNombres($update=false){
		if(!isset($this->_nombres) || $update){
			$this->_nombres=trim(trim($this->id_cliente0->nombre)." ".trim($this->id_cliente0->nombre2));
		}
		return $this->_nombres;
	}
	public function getFechaNacimiento($update=false){
		if(!isset($this->_fechaNacimiento) || $update){
			if(isset($this->id_cliente0->fecha_nacimiento) && $this->id_cliente0->fecha_nacimiento!=0){
				$this->_fechaNacimiento=date("Ymd",strtotime($this->id_cliente0->fecha_nacimiento));
			}
		}
		return $this->_fechaNacimiento;
	}
	public function getRfc($update=false){
		if(!isset($this->_rfc) || $update){
			$this->_rfc=$this->id_cliente0->rfc;
		}
		return $this->_rfc;
	}
	public function getCurp($update=false){
		if(!isset($this->_curp) || $update){
			$this->_curp=$this->id_cliente0->curp;
		}
		if((strlen($this->_curp))<18)
        {
            $this->_curp="";
        }
		return $this->_curp;
	}
	public function getNumeroSeguridadSocial($update=false){
		if(!isset($this->_numeroSeguridadSocial) || $update){
			$this->_numeroSeguridadSocial="";
		}
		return $this->_numeroSeguridadSocial;
	}
	public function getNacionalidad($update=false){
		if(!isset($this->_nacionalidad) || $update){
			if($this->id_cliente0->id_pld_cliente0->nacionalidad=="Mexicano"){
				$this->_nacionalidad="MX";
			}else{
				$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->id_pld_cliente0->pais_nacimiento));
				if(!is_null($pais)){
					$this->_nacionalidad=$pais->iso;
				}else{
					$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
					if(!is_null($pais)){
						$this->_nacionalidad=$pais->iso;
					}else{
						$this->_nacionalidad="";
					}
				}
			}
		}
		return $this->_nacionalidad;
	}
	public function getResidencia($update=false){
		if(!isset($this->_residencia) || $update){
			$this->_residencia="";
		}
		return $this->_residencia;
	}
	public function getNumeroLicenciaConducir($update=false){
		if(!isset($this->_numeroLicenciaConducir) || $update){
			$this->_numeroLicenciaConducir="";
		}
		return $this->_numeroLicenciaConducir;
	}
	public function getEstadoCivil($update=false){
		$return="";
		if(isset($this->id_cliente0->estado_civil)){
			if($this->id_cliente0->estado_civil=="Divorciado"){
				$return="D";
			}elseif($this->id_cliente0->estado_civil=="Union Libre"){
				$return="L";
			}elseif(in_array($this->id_cliente0->estado_civil, ["Casado", "Casado con Bienes Mancomunados", "Casado con Separación de Bienes"])){
				$return="C";
			}elseif($this->id_cliente0->estado_civil=="Soltero"){
				$return="S";
			}elseif($this->id_cliente0->estado_civil=="Viudo"){
				$return="V";
			}elseif($this->id_cliente0->estado_civil=="Separado"){
				$return="E";
			}
		}
		return $return;

	}
	public function getSexo($update=false){
		if(!isset($this->_sexo) || $update){
			if(isset($this->id_cliente0->id_pld_cliente0)){
				if($this->id_cliente0->id_pld_cliente0->genero=="M"){
					$this->_sexo="F";
				}elseif($this->id_cliente0->id_pld_cliente0->genero=="H"){
					$this->_sexo="M";
				}
			}
		}
		return $this->_sexo;
	}
	public function getClaveElectorIfe($update=false){
		if(!isset($this->_claveElectorIfe) || $update){
			$this->_claveElectorIfe=$this->id_cliente0->ine;
		}
		return $this->_claveElectorIfe;
	}
	public function getNumeroDependientes($update=false){
		if(!isset($this->_numeroDependientes) || $update){
			$this->_numeroDependientes="";
		}
		return $this->_numeroDependientes;
	}
	public function getFechaDefuncion($update=false){
		if(!isset($this->_fechaDefuncion) || $update){
			$this->_fechaDefuncion="";
		}
		return $this->_fechaDefuncion;
	}
	public function getIndicadorDefuncion($update=false){
		if(!isset($this->_indicadorDefuncion) || $update){
			$this->_indicadorDefuncion="";
		}
		return $this->_indicadorDefuncion;
	}
	public function getTipoPersona($update=false){
		if(!isset($this->_tipoPersona) || $update){
			if($this->id_cliente0->tipo_persona=="Persona Moral"){
				$this->_tipoPersona="PM";
			}else{
				$this->_tipoPersona="PF";
			}
		}
		return $this->_tipoPersona;
	}
	//DIRECCION
	public function getDireccion($update=false){
		if(!isset($this->_direccion) || $update){
			$this->_direccion=$this->id_cliente0->calle." ".$this->id_cliente0->numero_exterior;
		}
		return $this->_direccion;
	}
	public function getColoniaPoblacion($update=false){
		if(!isset($this->_coloniaPoblacion) || $update){
			$this->_coloniaPoblacion=$this->id_cliente0->colonia;
		}
		return $this->_coloniaPoblacion;
	}
	public function getDelegacionMunicipio($update=false){//AA
		if(!isset($this->_delegacionMunicipio) || $update){
			$this->_delegacionMunicipio=$this->id_cliente0->municipio;
		}
		return $this->_delegacionMunicipio;
	}
	public function getCiudad($update=false){
		$return="";
		if(isset($this->id_cliente0)){
			if (isset($this->id_cliente0->localidad) AND $this->id_cliente0->localidad != "") {
				$return=strtoupper($this->id_cliente0->localidad);
			}else{
				$return=strtoupper($this->id_cliente0->ciudad);
			}

		}
		return $return;
	}
	public function getEstado($update=false){
		 $return="";
		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$this->id_cliente0->estado));
		if(isset($estado)){
			$return=$estado->clave;
		}
		return $return;
	}
	public function getPais($update=false){//BURO DE CREDITO
		if(!isset($this->_pais) || $update){
			$this->_pais=$this->id_cliente0->claveBDCPais;
		}
		return $this->_pais;
	}
	public function getCodigoPostal($update=false){
		if(!isset($this->_codigoPostal) || $update){
			$this->_codigoPostal=$this->id_cliente0->codigo_postal;
		}
		return $this->_codigoPostal;
	}
	public function getFechaResidencia($update=false){
		if(!isset($this->_fechaResidencia) || $update){
			$this->_fechaResidencia="";
		}
		return $this->_fechaResidencia;
	}
	public function getTelefono($update=false){
		if(!isset($this->_telefono) || $update){
			$this->_telefono=$this->id_cliente0->telefono;
		}
		if(strlen($this->_telefono)<10)
        {
            $this->_telefono="";
        }
		return $this->_telefono;
	}
	public function getTipoDomicilio($update=false){
		if(!isset($this->_tipoDomicilio) || $update){
			$this->_tipoDomicilio="";
		}
		return $this->_tipoDomicilio;
	}
	public function getTipoAsentamiento($update=false){
		if(!isset($this->_tipoAsentamiento) || $update){
			$this->_tipoAsentamiento="";
		}
		return $this->_tipoAsentamiento;
	}
	 public function getOrigenDomicilio($update=false){
		 if(!isset($this->_nacionalidad) || $update){
			if($this->id_cliente0->id_pld_cliente0->nacionalidad=="Mexicano"){
				$this->_nacionalidad="MX";
			}else{
				$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->id_pld_cliente0->pais_nacimiento));
				if(!is_null($pais)){
					$this->_nacionalidad=$pais->iso;
				}else{
					$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
					if(!is_null($pais)){
						$this->_nacionalidad=$pais->iso;
					}else{
						$this->_nacionalidad="";
					}
				}
			}
		}
		return $this->_nacionalidad;
	}
	public function getEmpresa($update=false){
		if((!isset($this->_empresa) || $update) && isset($this->id_cliente0->id_empleo0->empresa)){
			if(isset($this->id_cliente0->id_empleo0)){
				$this->_empresa=strtoupper($this->id_cliente0->id_empleo0->empresa);
			}
		}
		return $this->_empresa;
	}
	public function getDireccionEmpresa($update=false){
		if((!isset($this->_direccionEmpresa) || $update) && isset($this->id_cliente0->id_empleo0->direccion)){
			$this->_direccionEmpresa =
			($this->id_cliente0->id_empleo0->calle != '' ? $this->id_cliente0->id_empleo0->calle : $this->id_cliente0->calle)
			. " "
			. ($this->id_cliente0->id_empleo0->numeroext != '' ? $this->id_cliente0->id_empleo0->numeroext : $this->id_cliente0->numero_exterior);
		}
		return $this->_direccionEmpresa;
	}
	public function getColoniaPoblacionEmpresaOld(){
		if(!isset($this->_coloniaPoblacionEmpresa) && isset($this->id_cliente0->id_empleo0->colonia)){
			$this->_coloniaPoblacionEmpresa=$this->id_cliente0->id_empleo0->colonia;
		}
		return $this->_coloniaPoblacionEmpresa;
	}
	public function getDelegacionMunicipioEmpresaOld(){
		if(!isset($this->_delegacionMunicipioEmpresa) && isset($this->id_cliente0->id_empleo0->municipio)){
			$this->_delegacionMunicipioEmpresa=$this->id_cliente0->id_empleo0->municipio;
		}
		return $this->_delegacionMunicipioEmpresa;
	}
	public function getCiudadEmpresaOld(){
		if(!isset($this->_ciudadEmpresa) && isset($this->id_cliente0->id_empleo0->ciudad)){
			$this->_ciudadEmpresa=$this->id_cliente0->id_empleo0->ciudad;
		}
		return $this->_ciudadEmpresa;
	}
	public function getEstadoEmpresaOld(){
		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$this->id_cliente0->id_empleo0->estado));
		return $estado->clave;
	}
	public function getCodigoPostalEmpresaOld(){
		if(!isset($this->_codigoPostalEmpresa) && isset($this->id_cliente0->id_empleo0->codigo_postal)){
			$this->_codigoPostalEmpresa=$this->id_cliente0->id_empleo0->codigo_postal;
		}
		return $this->_codigoPostalEmpresa;
	}
	public function getTelefonoEmpresaOld(){
		if(!isset($this->_telefonoEmpresa) && isset($this->id_cliente0->id_empleo0->telefono)){
			$this->_telefonoEmpresa=$this->id_cliente0->id_empleo0->telefono;
		}
		return $this->_telefonoEmpresa;
	}
	public function getExtensionEmpresaOld(){
		if(!isset($this->_extensionEmpresa) && isset($this->id_cliente0->id_empleo0->extension)){
			$this->_extensionEmpresa=$this->id_cliente0->id_empleo0->extension;
		}
		return $this->_extensionEmpresa;
	}
	public function getFaxEmpresaOld(){
		if(!isset($this->_faxEmpresa) && isset($this->id_cliente0->id_empleo0->fax)){
			$this->_faxEmpresa=$this->id_cliente0->id_empleo0->fax;
		}
		return $this->_faxEmpresa;
	}
	public function getPuestoEmpresa($update=false){
		if((!isset($this->_puestoEmpresa) || $update) && isset($this->id_cliente0->id_empleo0->puesto)){
			$this->_puestoEmpresa=$this->id_cliente0->id_empleo0->puesto;
		}
		return $this->_puestoEmpresa;
	}
	public function getFechaContratacionEmpresa($update=false){
		if ((isset($this->_fechaContratacionEmpresa)) && ($this->_fechaContratacionEmpresa != '0000-00-00')) {
			if((!isset($this->_fechaContratacionEmpresa) || $update) && isset($this->id_cliente0->id_empleo0->fecha_contratacion)){
				$this->_fechaContratacionEmpresa=date("Ymd",strtotime($this->id_cliente0->id_empleo0->fecha_contratacion));
			}

			return $this->_fechaContratacionEmpresa;
		} else {
			return "";
		}
	}
	public function getMonedaSalario($update=false){
		if((!isset($this->_monedaSalario) || $update) && isset($this->id_cliente0->id_empleo0->salario_mensual)){
			$this->_monedaSalario="";
		}
		return $this->_monedaSalario;
	}
	public function getSalarioMensual($update=false){
		if((!isset($this->_salarioMensual) || $update) && isset($this->id_cliente0->id_empleo0->salario_mensual)){
			$this->_salarioMensual="";
		}
		return $this->_salarioMensual;
	}
	public function getFechaUltimoDiaEmpleo($update=false){
		if ((isset($this->_fechaUltimoDiaEmpleo)) && ($this->_fechaUltimoDiaEmpleo != '0000-00-00')) {
			if((!isset($this->_fechaUltimoDiaEmpleo) || $update) && isset($this->id_cliente0->id_empleo0->fecha_ultimo_dia)){
				$this->_fechaUltimoDiaEmpleo=$this->id_cliente0->id_empleo0->fecha_ultimo_dia;
			}
			return $this->_fechaUltimoDiaEmpleo;
		} else {
			return "";
		}
	}
	public function getFechaVerificacionEmpleo($update=false){
		if ((isset($this->_fechaVerificacionEmpleo)) && ($this->_fechaVerificacionEmpleo != '0000-00-00')) {
			if((!isset($this->_fechaVerificacionEmpleo) || $update) && isset($this->id_cliente0->id_empleo0->fecha_verificacion)){
				$this->_fechaVerificacionEmpleo=date("Ymd",strtotime($this->id_cliente0->id_empleo0->fecha_verificacion));
			}
			return $this->_fechaVerificacionEmpleo;
		} else {
			return '';
		}
	}
	public function getOrigenDomicilioEmpresa($update=false){
		$return="";//Es fijo por ahora
		if (isset($this->id_cliente0->id_empleo0->empresa)) {
			$return = "MX";
		}
	   return $return;
	}
	public function getClaveActualOtorgante(){
		if(!isset($this->_claveActualOtorgante)){
			$this->_claveActualOtorgante=Empresa::model()->find()->clave_otorgante;
		}
		return $this->_claveActualOtorgante;
	}
	public function getNombreActualOtorgante(){
		if(!isset($this->_nombreActualOtorgante)){
			$this->_nombreActualOtorgante=Empresa::model()->find()->nombre_otorgante;
		}
		return $this->_nombreActualOtorgante;
	}
	public function getNumeroCuenta(){//BA
		if(!isset($this->_numeroCuenta)){
			$this->_numeroCuenta=$this->clave;
		}
		return $this->_numeroCuenta;
	}
	public function getTipoResponsabilidadCuenta($aval=null){
		if(!isset($this->_tipoResponsabilidadCuenta)){
			if(isset($this->id_grupo_cliente)){
				$this->_tipoResponsabilidadCuenta="O";
			}else{
				if(!is_null($aval)){
					$this->_tipoResponsabilidadCuenta="A";
				}else{
					$n=AvalesSolicitudes::model()->count("id_solicitud=:solicitud",array(':solicitud'=>$this->id));
					if($n==0){
						$this->_tipoResponsabilidadCuenta="I";
					}else{
						$this->_tipoResponsabilidadCuenta="T";
					}
				}
			}
		}
		return $this->_tipoResponsabilidadCuenta;
	}
	public function getTipoCuenta(){
		if(!isset($this->_tipoCuenta)){
			$this->_tipoCuenta=$this->id_producto0->id_tipo_cuenta0->valor;
		}

		echo "Clave {$this->clave}, Tipo de cuenta: {$this->_tipoCuenta} <br>";
		return $this->_tipoCuenta;
	}

	public function getTipoCuentaCirculo(){
		if(!isset($this->_tipoCuentaCirculo)){
			$this->_tipoCuentaCirculo=$this->id_producto0->id_tipo_cuenta_circulo0->valor;
		}

		return $this->_tipoCuentaCirculo;
	}

	public function getTipoContrato(){
		if(!isset($this->_tipoContrato)){

			// Codigo legacy
			if(isset($this->id_grupo_cliente)){
				$this->_tipoContrato="GS";
			}elseif($this->id_producto0->id_tipo_producto0->nombre=='Arrendamiento Puro'){
				$this->_tipoContrato="AR";
			}elseif ($this->id_producto0->id_tipo_producto0->nombre=='Simple') {
				$this->_tipoContrato="PP";
			}elseif ($this->id_cliente0->actividad_empresarial == 1) {
				$this->_tipoContrato="AE";
			}else{
				$this->_tipoContrato="OT";
			}

			// Actualizacion tipo contrato ya se lea directamente de la BD con la relacion del producto id_tipo_contrato_circulo
			if (isset($this->id_producto0->id_tipo_contrato_circulo) && ($this->id_producto0->id_tipo_contrato_circulo > 0)) {
				$this->_tipoContrato = $this->id_producto0->id_tipo_contrato_circulo0->codigo_circulo;
			}
		}
		return $this->_tipoContrato;
	}
	public function getMoneda(){
		if(!isset($this->_moneda)){
			if($this->id_moneda==1){
				$this->_moneda="MX";
			}else{
				$this->_moneda="US";
			}
		}
		return $this->_moneda;
	}
	public function getValorActivoValuacion(){
		if(!isset($this->_valorActivoValuacion)){
			$this->_valorActivoValuacion="";
		}
		return $this->_valorActivoValuacion;
	}
	public function getNumeroPagos(){//Solo se cuentan los pagos en que se paga capital
		if(!isset($this->_numeroPagos)){
			$this->_numeroPagos=$this->plazo_autorizado;
		}
		return $this->_numeroPagos;
	}

	public function getFrecuenciaPagos(){
		// Se prioriza el tipo de amortizacion de la solicitud, si no está definida entonces la del producto
		if((isset($this->id_tipo_amortizacion)) && ($this->id_tipo_amortizacion != "")){
			$this->_frecuenciaPagos = $this->id_tipo_amortizacion0->clave_circulo_credito;
		} else {
			$this->_frecuenciaPagos = $this->id_producto0->id_tipo_amortizacion0->clave_circulo_credito;
		}
		return $this->_frecuenciaPagos;
	}

	public function getFrecuenciaPagosDias(){
		if(!isset($this->_frecuenciaPagosDias)){
			$this->_frecuenciaPagosDias=$this->id_producto0->id_tipo_amortizacion0->dias;
		}
		return $this->_frecuenciaPagosDias;
	}
	public function getMontoPagar($update=false){//Se toma el monto de la primera amortizacion, se salta la amortizacion 0
		if(!isset($this->_montoPagar) || $update){
			if(isset($this->id_grupo_cliente)){
				$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.numero_amortizacion=1)",'params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente)));
				foreach ($amortizaciones as $amortizacion) {
					if ($this->FechaCierreCredito != "") {
						$this->_montoPagar=0;
					}else{
						$this->_montoPagar=$amortizacion->pago_total;
					}
				}
			}else{
				if ($this->FechaCierreCredito != "" and !is_null($this->FechaCierreCredito)) {
					$this->_montoPagar=0;
				}else{
					$monto_pagar=0;
					$amortizaciones = Amortizaciones::model()->findAll("id_solicitud=:solicitud AND numero_amortizacion>0",array(':solicitud'=>$this->id));
					$fecha_desde=  date("Y-m-d",strtotime($this->fechaCorte."- 30 DAY"));
					$pagado=0;
					$break=false;
					foreach($amortizaciones as $amortizacion){
					    if(($amortizacion->status=='Calculado' OR (strtotime($amortizacion->fecha_pago)>strtotime($this->fechaCorte))) AND strtotime($amortizacion->fecha_amortizacion)<=strtotime($this->fechaCorte)){
                            $parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=$amortizacion->id AND fecha_pago<='$this->fechaCorte'");
                            foreach ($parcialidades as $parc){
                                $pagado+=round($parc->pago_total,2);
                            }
                            $monto_pagar+=round($amortizacion->pago_total,2);
						}else{
					        if(strtotime($amortizacion->fecha_amortizacion)>strtotime($this->fechaCorte) AND $break==false){
                                $monto_pagar+=$amortizacion->pago_total;
                                $break=true;
                            }
                        }
					}
					$monto_pagar=$monto_pagar-$pagado;
					$this->_montoPagar=$monto_pagar;
				}
			}
			$this->_montoPagar=round($this->_montoPagar);
		}
		return $this->_montoPagar;
	}
	public function getFechaApertura(){
		if(!isset($this->_fechaApertura) && isset($this->fecha_disposicion) && $this->fecha_disposicion!=0){
			$this->_fechaApertura=date("Ymd",strtotime($this->fecha_disposicion));
		}
		return $this->_fechaApertura;
	}
	public function getFechaUltimoPago($update=false){//Se toma el monto de la primera amortizacion
		if(!isset($this->_fechaUltimoPago) || $update){
			if(isset($this->id_grupo_cliente)){
				$ultimoPago=Amortizaciones::model()->find(array('condition'=>"id_grupo_solidario=:solidario AND status='Registrado'",'order'=>'fecha_pago DESC','params'=>array(':solidario'=>$this->idGrupoSolidario)));
			}else{
				$ultimoPago=Amortizaciones::model()->find(array('condition'=>"id_solicitud=:solicitud AND status='Registrado'",'order'=>'fecha_pago DESC','params'=>array(':solicitud'=>$this->id)));
			}

			if(!is_null($ultimoPago)){
				$fechaUltimoPago=date("Ymd",strtotime($ultimoPago->fecha_pago));
				$this->_fechaUltimoPago=$fechaUltimoPago;
			}else{
				 $this->_fechaUltimoPago="19010101";
			}
		}
		return $this->_fechaUltimoPago;
	}
	public function getNumero_amortizacion_pago($update=false){//Se toma el monto de la primera amortizacion
		if(!isset($this->_numero_amortizacion_pago) || $update){
			if(isset($this->id_grupo_cliente)){
				$ultimoPago=Amortizaciones::model()->find(array('condition'=>"id_grupo_solidario=:solidario AND status='Registrado'",'order'=>'fecha_pago DESC','params'=>array(':solidario'=>$this->idGrupoSolidario)));
			}else{
				$ultimoPago=Amortizaciones::model()->find(array('condition'=>"id_solicitud=:solicitud AND status='Registrado'",'order'=>'fecha_pago DESC','params'=>array(':solicitud'=>$this->id)));
			}

			if(!is_null($ultimoPago)){
				$numero_amortizacion=$ultimoPago->numero_amortizacion;
				$this->_numero_amortizacion_pago=$numero_amortizacion;
			}else{
				 $this->_numero_amortizacion_pago=0;
			}
		}
		return $this->_numero_amortizacion_pago;
	}
	public function getPago_exigible($update=false){//Se toma el monto de la primera amortizacion
		if(!isset($this->_pago_exigible) || $update){
			if(isset($this->id_grupo_cliente)){
				$ultimoPago=Amortizaciones::model()->find(array('condition'=>"id_grupo_solidario=:solidario AND status='Registrado'",'order'=>'fecha_pago DESC','params'=>array(':solidario'=>$this->idGrupoSolidario)));
			}else{
				$ultimoPago=Amortizaciones::model()->find(array('condition'=>"id_solicitud=:solicitud AND status='Registrado'",'order'=>'fecha_pago DESC','params'=>array(':solicitud'=>$this->id)));
			}

			if(!is_null($ultimoPago)){
				$pago_total=$ultimoPago->pago_total;
				$this->_pago_exigible=$pago_total;
			}else{
				 $this->_pago_exigible=0;
			}
		}
		return $this->_pago_exigible;
	}
	public function getFechaUltimoPagoInv(){//Se toma el monto de la primera amortizacion
		if(!isset($this->_fechaUltimoPagoInv)){
			$ultimoPago=Amortizaciones::model()->find(array('condition'=>"id_solicitud=:solicitud AND status='Registrado'",'order'=>'fecha_pago DESC','params'=>array(':solicitud'=>$this->id)));
			if(!is_null($ultimoPago)){
				$fechaUltimoPago=date("dmY",strtotime($ultimoPago->fecha_pago));
				$this->_fechaUltimoPagoInv=$fechaUltimoPago;
			}
		}
		return $this->_fechaUltimoPagoInv;
	}
	public function getFechaUltimaCompra(){//Se toma la fecha de disposicion
		if(!isset($this->_fechaUltimaCompra)){
			$ultimaDisposicion=Disposiciones::model()->find(array('condition'=>"id_solicitud=:solicitud",'order'=>'fecha DESC','params'=>array(':solicitud'=>$this->id)));
			if(is_null($ultimaDisposicion)){
				$this->_fechaUltimaCompra=date("Ymd",strtotime($this->fecha_disposicion));
			}else{
				$this->_fechaUltimaCompra=date("Ymd",strtotime($ultimaDisposicion->fecha));
			}
		}
		return $this->_fechaUltimaCompra;
	}
	public function getFechaCierreCredito($formatoFecha = "Ymd"){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";
		$n = Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->count(
			array(
				'condition'=>"
					(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud)
						AND t.status='Calculado'
				",
				'order' => 't.numero_amortizacion DESC',
				'params' => array(':solicitud'=>$this->id)
			)
		);

		if($n==0){
            $ultimaAmortizacion = Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->find(
				array(
					'condition' => "
						(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud)
							AND (t.status='Registrado' OR t.status='Reestructurado' OR t.status='Quebrantado')
					",
					'order'=>'t.numero_amortizacion DESC',
					'params'=>array(':solicitud'=>$this->id)
				)
			);

            if(isset($ultimaAmortizacion)){
				if (strtotime($ultimaAmortizacion->fecha_pago) <= strtotime($fecha_completa)) {
					$return=date($formatoFecha, strtotime($ultimaAmortizacion->fecha_pago));
				} else {
					$return = "";
				}
            }else{
                $return="";
            }
        }else{
            $return="";
        }
		return $return;
	}
	public function getFechaCierreCreditoMes(){//Se toma la fecha de la ultima amortizacion que no se ha pagado
		  $n=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->count(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Calculado'",'order'=>'t.numero_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		if($n==0){
			$ultimaAmortizacion=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->find(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Registrado' OR t.status='Reestructurado' OR t.status='Quebrantado') ",'order'=>'t.numero_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
			if(!is_null($ultimaAmortizacion)){
				// $return=date("Ymd",strtotime($ultimaAmortizacion->fecha_pago));
				$return=date("Ym"."15",strtotime($ultimaAmortizacion->fecha_pago));

			}
		}
		return $return;
	}
	public function getFechaCorte(){//Se toma la fecha de la ultima amortizacion que no se ha pagado
		if(!isset($this->_fechaCorte)){
			if(date("d")<=15){
				$return = $this->_fechaCorte=date("Ym")."15";
			}else{
				$return = $this->_fechaCorte=date("Ymd",strtotime("+1 MONTH -1 DAY",strtotime(date("Y/m/")."01")));
			}
		}
		return $return;
	}
	public function getGarantia(){
		if(!isset($this->_garantia)){
			$this->_garantia="";
		}
		return $this->_garantia;
	}
	public function getCreditoMaximo($update=false){//Se hace el calculo tomando el plazo autorizado

		$periodo=$this->getFechaGeneracionEncabezado();
		$dia=intval(substr($periodo, 0,2));
		$mes=substr($periodo, 2,2);
		$año=intval(substr($periodo, 4));
		$fechaC=$año.'-'.$mes.'-'.$dia;

		if(isset($this->id_grupo_cliente)){
			$return=$this->entregable;
		}else{
			$disposiciones=Disposiciones::model()->find("id_solicitud=:solicitud AND fecha<=:fecha ORDER BY importe DESC",array(':solicitud'=>$this->id,':fecha'=>$fechaC));
				if ($disposiciones->importe >= $this->entregable) {
					$return= $disposiciones->importe;
				}else{
					$return=$this->entregable;
				}
		}
		return round($return);
	}

	public function getSaldoActual($update=false, $options = []){//Es lo que debe el cliente a la fecha actual
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";
		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()
			->with(
				array(
					'id_grupo_solidario0',
					'rel_parcialidades' => array(
						'select' => 'fecha_pago,pago_capital,pago_interes,pago_moratorios'
					),
					'rel_moratorios' => array(
						'select' => 'fecha,monto_moratorio'
					),
				)
			)
			->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.fecha_pago>=:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null) AND (t.status='Calculado' OR t.status = 'Registrado')",'order'=>'t.fecha_pago ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fechaPago'=>$fecha_completa)));
		}else{
			$cuentaQuebrantada = $options['solicitud_quebrantada'] ?? false;

			$statusAmortizaciones = "t.status='Calculado' OR t.status = 'Registrado'";
			$conditionAmortizaciones = "DATE(t.fecha_pago) >= DATE(:fechaPago) OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL";
			if ($cuentaQuebrantada) {
				$statusAmortizaciones = "t.status='Calculado' OR t.status = 'Registrado' OR t.status = 'Quebrantado'";
				$conditionAmortizaciones = "DATE(t.fecha_pago) >= DATE(:fechaPago) OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL OR t.status = 'Quebrantado'";
			}
			$amortizaciones=Amortizaciones::model()
			->with(
				array(
					'id_disposicion0' => array(
						'select' => 'fecha,id_solicitud'
					),
					'id_solicitud0'=> array(
						'select' => 'fecha_disposicion'
					),
					'rel_parcialidades' => array(
						'select' => 'fecha_pago,pago_capital,pago_interes,pago_moratorios'
					),
					'rel_moratorios' => array(
						'select' => 'fecha,monto_moratorio'
					),
				)
			)
			->findAll(
				array(
					'condition'=>"
						(
							t.id_solicitud=:solicitud
							AND id_solicitud0.fecha_disposicion<=:soli
							AND ($conditionAmortizaciones)
							AND ($statusAmortizaciones)
							OR (
		   						id_disposicion0.id_solicitud=:solicitud2
								AND (t.status='Calculado' OR t.status = 'Registrado')
								AND DATE(id_disposicion0.fecha) <= DATE(:disposicion)
								AND DATE(t.fecha_pago) >= DATE(:fechaPago2)
							)
						)",
						'order'=>'t.fecha_amortizacion ASC',
						'params'=>array(
							':solicitud'=>$this->id,
							':solicitud2'=>$this->id,
							':disposicion'=>$periodo,
							':soli'=>$periodo,
							':fechaPago'=>$fecha_completa,
							':fechaPago2'=>$fecha_completa
						)
					)
				);
		}

		foreach ($amortizaciones as $amortizacion){
			if (!is_null($amortizacion->fecha_pago) && !($amortizacion->fecha_pago === "0000-00-00 00:00:00") && (strtotime($amortizacion->fecha_pago) <= strtotime($fecha_completa)) && $amortizacion->status != "Quebrantado") {
				continue;
			}

			$return += $amortizacion->pago_capital;
			$return += $amortizacion->pago_interes;

			if ($amortizacion->status == "Quebrantado") {
				continue;
			}

			foreach ($amortizacion->rel_parcialidades as $parcialidad) {
				if (strtotime(date('Y-m-d', strtotime($parcialidad->fecha_pago))) <= strtotime(date('Y-m-d', strtotime($fecha_completa)))) {
					$return -= $parcialidad->pago_capital;
					$return -= $parcialidad->pago_interes;
					$return -= $parcialidad->pago_moratorios;
				}
			}

			foreach ($amortizacion->rel_moratorios as $moratorio) {
				if (strtotime(date('Y-m-d', strtotime($moratorio->fecha))) <= strtotime(date('Y-m-d', strtotime($periodo)))) {
					$return += $moratorio->monto_moratorio;
				}
			}
		}

		$return = round($return);

		return self::atributosBDCF('Cantidad',$return);
	}

	public function getLimiteCredito($update=false){//Se toma el saldo inicial de la primera amortizacion no pagada
		 $return="";
		if($this->id_producto0->id_tipo_producto0->nombre=="Revolvente"){
			$return=$this->monto_autorizado;
		}else{
			$return=$this->monto_autorizado;
		}
		$return=round($return);
		return $return;
	}
	public function getSaldoVencido($update=false, $options = []){//Se toman las amortizaciones que no se han pagado y ya paso su fecha de amortizacion
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";

		$cuentaQuebrantada = $options['solicitud_quebrantada'] ?? false;

		$statusAmortizaciones = "amortizaciones.`status` = 'Calculado' OR amortizaciones.`status` = 'Registrado'";
		$conditionAmortizaciones = "DATE(amortizaciones.fecha_pago) > DATE('$fecha_completa') OR amortizaciones.fecha_pago LIKE '%0000%' OR amortizaciones.fecha_pago IS NULL";
		if ($cuentaQuebrantada) {
			$statusAmortizaciones = "amortizaciones.`status` = 'Calculado' OR amortizaciones.`status` = 'Registrado' OR amortizaciones.`status` = 'Quebrantado'";
			$conditionAmortizaciones = "DATE(amortizaciones.fecha_pago) > DATE('$fecha_completa') OR amortizaciones.fecha_pago LIKE '%0000%' OR amortizaciones.fecha_pago IS NULL OR amortizaciones.`status` = 'Quebrantado'";
		}

		$sql =
		"	SELECT
				ROUND(
					SUM(
						GREATEST(0, amortizaciones.pago_capital + amortizaciones.pago_interes)
					) - IFNULL(
						IF (
							amortizaciones.status = 'Quebrantado',
							0,
							(
								SELECT
									SUM(
										GREATEST( 0, parcialidades_amortizaciones.pago_capital + parcialidades_amortizaciones.pago_interes )
									)
								FROM parcialidades_amortizaciones
								WHERE parcialidades_amortizaciones.id_amortizacion = amortizaciones.id
									AND DATE ( parcialidades_amortizaciones.fecha_pago ) <= DATE( '$fecha_completa' )
							)
						)
					, 0)
				) AS saldo_vencido
			FROM amortizaciones
			WHERE amortizaciones.id_solicitud = $this->id
				AND DATE(amortizaciones.fecha_amortizacion) <= DATE('$fecha_completa')
				AND ( $conditionAmortizaciones )
				AND ( $statusAmortizaciones )
		";

		$res = Yii::app()->db->createCommand($sql)->queryAll();

		return self::atributosBDCF('Cantidad',round($res[0]["saldo_vencido"]));
	}
	public function getNumeroPagosVencidos($update=false, $options = []){//Se toman las amortizaciones que no se han pagado y ya paso su fecha de amortizacion
		$return=0;
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";

		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado'  OR t.status = 'Registrado') AND (t.fecha_amortizacion)<=:fecha1 AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL)",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa,':fechaPago'=>$fecha_completa)));
		}else{
			$cuentaQuebrantada = $options['solicitud_quebrantada'] ?? false;

			$statusAmortizaciones = "t.status='Calculado'  OR t.status = 'Registrado'";
			$conditionAmortizaciones = "t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL";
			if ($cuentaQuebrantada) {
				$statusAmortizaciones = "t.status='Calculado'  OR t.status = 'Registrado' OR t.status = 'Quebrantado'";
				$conditionAmortizaciones = "t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL OR t.status = 'Quebrantado'";
			}

			$amortizaciones=Amortizaciones::model()
				->with(
					array(
						'id_disposicion0',
						'id_solicitud0'
					)
				)->findAll(
					array(
						'condition'=>"(
							t.id_solicitud=:solicitud AND ($statusAmortizaciones)
							AND id_solicitud0.fecha_disposicion<=:soli
							AND (t.fecha_amortizacion)<=:fecha1
							AND ($conditionAmortizaciones)
							AND (
								CASE WHEN t.numero_amortizacion = 0 THEN t.pago_total > 0 ELSE TRUE END
							) -- Amortización cero sin comisiones --
							OR (
								id_disposicion0.id_solicitud=:solicitud2
								AND t.status='Calculado'
								AND id_disposicion0.fecha<=:disposicion
								AND (t.fecha_amortizacion)<=:fecha2
							)
						)",
						'order'=>'t.fecha_amortizacion ASC',
						'params'=>array(
							':solicitud'=>$this->id,
							':solicitud2'=>$this->id,
							':disposicion'=>$periodo,
							':soli'=>$periodo,
							':fecha1'=>$fecha_completa,
							':fecha2'=>$fecha_completa,
							':fechaPago'=>$fecha_completa
						)
					)
				);
		}
		$return=count($amortizaciones);
		return $return;
	}
	public function getPagoActual($update=false, $options = []){
		$return=0;
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";

		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado'  OR t.status = 'Registrado') AND (t.fecha_amortizacion)<=:fecha1 AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL)",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa,':fechaPago'=>$fecha_completa)));
		}else{
			$cuentaQuebrantada = $options['solicitud_quebrantada'] ?? false;

			$statusAmortizaciones = "t.status='Calculado'  OR t.status = 'Registrado'";
			$conditionAmortizaciones = "t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL";
			if ($cuentaQuebrantada) {
				$statusAmortizaciones = "t.status='Calculado'  OR t.status = 'Registrado' OR t.status = 'Quebrantado'";
				$conditionAmortizaciones = "t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL OR t.status = 'Quebrantado'";
			}

			$amortizaciones=Amortizaciones::model()
				->with(
					array(
						'id_disposicion0',
						'id_solicitud0'
					)
				)->findAll(
					array(
						'condition'=>"(
							t.id_solicitud=:solicitud AND ($statusAmortizaciones)
							AND id_solicitud0.fecha_disposicion<=:soli
							AND (t.fecha_amortizacion)<=:fecha1
							AND ($conditionAmortizaciones)
							AND (
								CASE WHEN t.numero_amortizacion = 0 THEN t.pago_total > 0 ELSE TRUE END
							) -- Amortización cero sin comisiones --
							OR (
								id_disposicion0.id_solicitud=:solicitud2
								AND t.status='Calculado'
								AND id_disposicion0.fecha<=:disposicion
								AND (t.fecha_amortizacion)<=:fecha2
							)
						)",
						'order'=>'t.fecha_amortizacion ASC',
						'params'=>array(
							':solicitud'=>$this->id,
							':solicitud2'=>$this->id,
							':disposicion'=>$periodo,
							':soli'=>$periodo,
							':fecha1'=>$fecha_completa,
							':fecha2'=>$fecha_completa,
							':fechaPago'=>$fecha_completa
						)
					)
				);
		}

		$return = count($amortizaciones);

		if ($return == 0) {
			$this->_pagoActual = "V";
		} else {
			$this->_pagoActual = str_pad($return, 2,"0", STR_PAD_LEFT);
		}

		return $this->_pagoActual;
	}
	public function getHistoricoPagos(){
		if(!isset($this->_historicoPagos)){
			$this->_historicoPagos="";
		}
		return $this->_historicoPagos;
	}
	public function getClavePrevencion(){//Revisar
		if(!isset($this->_clavePrevencion)){
			$this->_clavePrevencion="";
		}
		return $this->_clavePrevencion;
	}
	public function getTotalPagosReportados($update=false){
		$return=0;
		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";

		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Registrado') AND (t.fecha_amortizacion)<=:fecha1",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));

		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND t.status='Registrado' AND id_solicitud0.fecha_disposicion<=:soli AND (t.fecha_amortizacion)<=:fecha1  OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.status='Registrado' AND id_disposicion0.fecha<=:disposicion AND (t.fecha_amortizacion)<=:fecha2
		))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':disposicion'=>$periodo,':soli'=>$periodo,':fecha1'=>$fecha_completa,':fecha2'=>$fecha_completa)));
		}
		foreach ($amortizaciones as $amortizacion){
			if(strtotime($amortizacion->fecha_amortizacion)<strtotime($fecha_completa)){
				if($amortizacion->pago_total>0){
					$return++;
				}
			}
		}
		return $return;
	}
	public function getClaveAnteriorOtorgante(){
		if(!isset($this->_claveAnteriorOtorgante)){
			$this->_claveAnteriorOtorgante="";
		}
		return $this->_claveAnteriorOtorgante;
	}
	public function getNombreAnteriorOtorgante(){
		if(!isset($this->_NombreAnteriorOtorgante)){
			$this->_NombreAnteriorOtorgante="";
		}
		return $this->_NombreAnteriorOtorgante;
	}
	public function getNumeroCuentaAnterior(){
		if(!isset($this->_numeroCuentaAnterior)){
			$this->_numeroCuentaAnterior="";
		}
		return $this->_numeroCuentaAnterior;
	}
	public function getFechaPrimerIncumplimiento($update=false){
		if(!isset($this->_fechaPrimerIncumplimiento) || $update){
			if(isset($this->id_grupo_cliente)){
				$solidario=GruposSolidarios::model()->findByPk($this->idGrupoSolidario);
				$amortizaciones=Amortizaciones::model()->getAmortizacionesGrupoSolidario($solidario,array(),array(),array());
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this,array(),array(),array());
			}
			$numero=0;
			$fecha=null;
			foreach ($amortizaciones as $amortizacion){
				if(strtotime($amortizacion['fecha_amortizacion'])<time() && $amortizacion['status']=='Calculado'){
					if(is_null($fecha)){
						$fecha=$amortizacion['fecha_amortizacion'];
					}
					$numero++;
				}
			}
			if(is_null($fecha)){
				$this->_fechaPrimerIncumplimiento="19010101";
			}else{
				$this->_fechaPrimerIncumplimiento=date("Ymd",strtotime($fecha));
			}
			$this->_numeroPagosVencidos=$numero;
		}
		return $this->_fechaPrimerIncumplimiento;
	}
	public function getFechaPrimerIncumplimientoInv($update=false){
		if(!isset($this->_fechaPrimerIncumplimientoInv) || $update){
			$amortizaciones=Amortizaciones::model()->getAmortizaciones($this,array(),array(),array());
			$numero=0;
			$fecha=null;
			foreach ($amortizaciones as $amortizacion){
				if(strtotime($amortizacion['fecha_amortizacion'])<time() && $amortizacion['status']=='Calculado'){
					if(is_null($fecha)){
						$fecha=$amortizacion['fecha_amortizacion'];
					}
					$numero++;
				}
			}
			if(!is_null($fecha)){
				$this->_fechaPrimerIncumplimientoInv=date("mdY",strtotime($fecha));
			}
		}
		return $this->_fechaPrimerIncumplimientoInv;
	}

	public function getDiasVencidos($update=false){
		if(!isset($this->_diasVencidos) || $update){
			$amortizaciones=Amortizaciones::model()->getAmortizaciones($this,array(),array(),array());
			$numero=0;
			$fecha=null;
			foreach ($amortizaciones as $amortizacion){
				if(strtotime($amortizacion['fecha_amortizacion'])<time() && $amortizacion['status']=='Calculado'){
					if(is_null($fecha)){
						$fecha=$amortizacion['fecha_amortizacion'];
					}
					$numero++;
				}
			}
			if(!is_null($fecha)){
				$this->_diasVencidos=round((strtotime("TODAY")-strtotime($fecha))/60/60/24);
			}else{
				$this->_diasVencidos=0;
			}
		}
		return $this->_diasVencidos;
	}
	public function getDiasVencidosCorte($id_solicitud,$fechaCorte){
		//obtenemos las amortizaciones y la primera con adeudo se toma
		//se busca con el afecha de la tabla amortizacion con la fecha de corte del reporte
		//se agrega el 23 para que tome las 11 pm siempre de la fecha de corte ya que sino toma 00:00:00 lo que resta un dia
			$sol=Solicitudes::model()->findByAttributes(array('id' => $id_solicitud));
			$amortizaciones=Amortizaciones::model()->getAmortizaciones($sol,array(),array(),array());
			$numero=0;
			$fecha=null;
			foreach ($amortizaciones as $amortizacion){
				if(strtotime($amortizacion['fecha_amortizacion'])<strtotime($fechaCorte) && $amortizacion['status']=='Calculado' && $amortizacion['pago_total']>0){
					if(is_null($fecha)){
						$fecha=$amortizacion['fecha_amortizacion'];
					}
					$numero++;
				}
			}
			if(!is_null($fecha)){
				$inicio = new DateTime($fecha);
				$fin = new DateTime($fechaCorte);
				$fin->setTime(23, 0, 0);
				$diasVenc = $inicio->diff($fin)->format('%a');

			}else{
				$diasVenc=0;
			}

		return $diasVenc;
	}

	public function getDiasVencidosSin0($update=false){
		if(!isset($this->_diasVencidos) || $update){
			$amortizaciones=Amortizaciones::model()->getAmortizaciones($this,array(),array(),array());
			$numero=0;
			$fecha=null;
			foreach ($amortizaciones as $amortizacion){
				if($amortizacion['numero_amortizacion']>0 && strtotime($amortizacion['fecha_amortizacion'])<time() && $amortizacion['status']=='Calculado'){
					if(is_null($fecha)){
						$fecha=$amortizacion['fecha_amortizacion'];
					}
					$numero++;
				}
			}
			if(!is_null($fecha)){
				$this->_diasVencidos=round((strtotime("TODAY")-strtotime($fecha))/60/60/24);
			}else{
				$this->_diasVencidos=0;
			}
		}
		return $this->_diasVencidos;
	}

	public function getSaldoInsoluto($update=false){//Se toma el saldo inicial de la primera amortizacion no pagada
		if(!isset($this->_saldoInsoluto) || $update){
			/*$amortizaciones=Amortizaciones::model()->getAmortizaciones($this,array(),array(),array());
			$saldo=0;
			foreach ($amortizaciones as $amortizacion){
				if($amortizacion['status']=='Calculado'){
					$saldo=$amortizacion['saldo_inicial'];
					break;
				}
			}
			$this->_saldoInsoluto=$saldo;*/
			$reporte=new ReporteCartera();
			if(isset($this->id_grupo_cliente)){
				$reporte->solicitud=$this->id;
				$reporte->cliente=$this->id_cliente;
			}else{
				$reporte->solicitud=$this->id;
			}
			if(date("d")<=15){
				$reporte->fecha_reporte1=date("Ym")."15";
			}else{
				$reporte->fecha_reporte1=date("Ymd",strtotime("+1 MONTH -1 DAY",strtotime(date("Y/m/")."01")));
			}
			$data=$reporte->getData();
			$totales=$reporte->getDataTotal();

			$this->_saldoActual=$totales[0]["total_vencido"]+$totales[0]["total_por_vencer"];
			$this->_saldoVencido=$totales[0]["capital_vencido"]+$totales[0]["interes_vencido"];
			$this->_saldoInsoluto=$totales[0]["capital_vencido"]+$totales[0]["capital_por_vencer"];

			$this->_saldoActual=round($this->_saldoActual);
			$this->_saldoVencido=round($this->_saldoVencido);
			$this->_saldoInsoluto=round($this->_saldoInsoluto);
		}
		return $this->_saldoInsoluto;
	}
	public function getMontoUltimoPago($update=false){//Se toma el saldo inicial de la primera amortizacion no pagada
	   $periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";

		if(isset($this->id_grupo_cliente)){
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND (t.fecha_pago)<=:fecha1","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,'cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));

			$ultimaAmortizacion=Amortizaciones::model()->with(array('id_grupo_solidario0'))->find(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Registrado') AND (t.fecha_pago)<=:fecha1 ",'order'=>'t.fecha_pago DESC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));
		}else{
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0")->find(array("condition"=>"id_amortizacion0.id_solicitud=:solicitud AND (t.fecha_pago)<=:fecha1","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':fecha1'=>$fecha_completa)));

			$ultimaAmortizacion=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->find(array('condition'=>"(t.id_solicitud=:solicitud AND t.status='Registrado' AND id_solicitud0.fecha_disposicion<=:soli AND (t.fecha_pago)<=:fecha1  OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.status='Registrado' AND id_disposicion0.fecha<=:disposicion AND (t.fecha_pago)<=:fecha2
		))",'order'=>'t.fecha_pago DESC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':disposicion'=>$periodo,':soli'=>$periodo,':fecha1'=>$fecha_completa,':fecha2'=>$fecha_completa)));

		}
		if(!is_null($ultimaAmortizacion)){
			if(!is_null($ultimaParcialidad)){
				if(strtotime($ultimaParcialidad)>strtotime($ultimaAmortizacion)){
					$return=$ultimaParcialidad->pago_realizado;
				}else{
					$return=$ultimaAmortizacion->pago_realizado;
				}
			}else{
				$return=$ultimaAmortizacion->pago_realizado;
			}
		}else{
			$return="0";
		}
		$return=round($return);
		return $return;
	}
	public function getPlazoMeses(){
		if(!isset($this->_plazoMeses)){
			if(isset($this->id_grupo_cliente)){
				$amortizacion=Amortizaciones::model()->with("id_grupo_solidario0")->find(array("condition"=>"(id_grupo_solidario0.id_solicitud=:solicitud)",'order'=>'t.fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
			}else{
				$amortizacion=Amortizaciones::model()->find(array("condition"=>"(t.id_solicitud=:solicitud)",'order'=>'t.fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
			}
			$this->_plazoMeses=round((strtotime($amortizacion->fecha_amortizacion)-strtotime($this->fecha_disposicion))/60/60/24);
		}
		return $this->_plazoMeses;
	}
	public function getMontoCreditoOriginacion($update=false){
		if(!isset($this->_montoCreditoOriginacion) || $update){
			$this->_montoCreditoOriginacion=$this->monto_autorizado;
			$this->_montoCreditoOriginacion=round($this->_montoCreditoOriginacion);
		}
		return $this->_montoCreditoOriginacion;
	}
	public function getTotalSaldosActuales(){
		return $this->_totalSaldosActuales;
	}
	public function getTotalSaldosVencidos(){
		return $this->_totalSaldosVencidos;
	}
	public function getTotalElementosNombreReportados(){
		return $this->_totalElementosNombreReportados;
	}
	public function getTotalElementosDireccionReportados(){
		return $this->_totalElementosDireccionReportados;
	}
	public function getTotalElementosEmpleoReportados(){
		return $this->_totalElementosEmpleoReportados;
	}
	public function getTotalElementosCuentasReportados(){
		return $this->_totalElementosCuentasReportados;
	}
	public function getDomicilioDevolucion(){
		if(!isset($this->_montoCreditoOriginacion)){
			$this->_domicilioDevolucion=Empresa::model()->find()->domicilio_devolucion;
		}
		return $this->_domicilioDevolucion;
	}



	//Metodos para filtrar solicitudes tanto individuales como grupales
	public function getTotalPagar(){
		$total=0;		
		if(isset($this->id)){
			if(isset($this->id_grupo_cliente)){
				if(isset($this->id_cliente) && $this->id_cliente!=0){
					$solidario=GruposSolidarios::model()->find("id_solicitud=:solicitud AND id_cliente=:cliente",array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente));
					$amortizaciones=Amortizaciones::model()->getAmortizacionesGrupoSolidario($solidario);
				}else{
					$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				}
				foreach ($amortizaciones as $amortizacion){					
					$total+=$amortizacion['pago_capital']+$amortizacion['pago_interes']+$amortizacion['pago_comisiones'];
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){					
					$total+=$amortizacion['pago_capital']+$amortizacion['pago_interes']+$amortizacion['pago_comisiones'];
				}
			}else{				
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){						
					$total+=$amortizacion['pago_capital']+$amortizacion['pago_interes']+$amortizacion['pago_comisiones'];
				}
			}
		}		
		return $total;
	}
	public function getTotalPagar2($amortizaciones = null){
		$total=0;		
		if(isset($this->id)){
			if(isset($this->id_grupo_cliente)){
				if(isset($this->id_cliente) && $this->id_cliente!=0){
					$solidario=GruposSolidarios::model()->find("id_solicitud=:solicitud AND id_cliente=:cliente",array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente));
					$amortizaciones=Amortizaciones::model()->getAmortizacionesGrupoSolidario($solidario);
				}else{
					$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				}
				foreach ($amortizaciones as $amortizacion){
					$comisiones=ComisionesAmortizaciones::model()->findAll('id_amortizacion=:id_amortizacion',array(':id_amortizacion'=>$amortizacion["id"]));
					$menos_comision_pagada=0;
					foreach ($comisiones as $comision){
						if($comision->descontar_dispocision==1){
							$menos_comision_pagada+=$comision->monto_comision;
						}
					}
					$total+=$amortizacion['pago_capital']+$amortizacion['pago_interes']+$amortizacion['pago_comisiones']-$menos_comision_pagada;
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					$comisiones=ComisionesAmortizaciones::model()->findAll('id_amortizacion=:id_amortizacion',array(':id_amortizacion'=>$amortizacion["id"]));
					$menos_comision_pagada=0;
					foreach ($comisiones as $comision){
						if($comision->descontar_dispocision==1){
							$menos_comision_pagada+=$comision->monto_comision;
						}
					}
					$total+=$amortizacion['pago_capital']+$amortizacion['pago_interes']+$amortizacion['pago_comisiones']-$menos_comision_pagada;
				}
			}else{	
				$amortizaciones=$amortizaciones ?? Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){					
					$comisiones=ComisionesAmortizaciones::model()->findAll('id_amortizacion=:id_amortizacion',array(':id_amortizacion'=>$amortizacion["id"]));	
					$menos_comision_pagada=0;
					foreach ($comisiones as $comision){
						if($comision->descontar_dispocision==1){
							$menos_comision_pagada+=$comision->monto_comision;
						}
					}
					$total+=$amortizacion['pago_capital']+$amortizacion['pago_interes']+$amortizacion['pago_comisiones']-$menos_comision_pagada;
				}
			}
		}		
		return $total;
	}
	public function getTotalPagar3($amortizaciones = null){
		$total=0;		
		if(isset($this->id)){
			if(isset($this->id_grupo_cliente)){
				if(isset($this->id_cliente) && $this->id_cliente!=0){
					$solidario=GruposSolidarios::model()->find("id_solicitud=:solicitud AND id_cliente=:cliente",array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente));
					$amortizaciones=Amortizaciones::model()->getAmortizacionesGrupoSolidario($solidario);
				}else{
					$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				}
				foreach ($amortizaciones as $amortizacion){
					$comisiones=ComisionesAmortizaciones::model()->findAll('id_amortizacion=:id_amortizacion',array(':id_amortizacion'=>$amortizacion["id"]));
					$menos_comision_pagada=0;
					foreach ($comisiones as $comision){
						if($comision->descontar_dispocision==1){
							$menos_comision_pagada+=$comision->monto_comision;
						}
					}
					$total+=$amortizacion['pago_capital']-$amortizacion['iva_capital']+$amortizacion['pago_interes']-$amortizacion['iva_interes_generado']+$amortizacion['pago_comisiones']-$amortizacion['pago_comisiones_iva'];
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					$comisiones=ComisionesAmortizaciones::model()->findAll('id_amortizacion=:id_amortizacion',array(':id_amortizacion'=>$amortizacion["id"]));
					$menos_comision_pagada=0;
					foreach ($comisiones as $comision){
						if($comision->descontar_dispocision==1){
							$menos_comision_pagada+=$comision->monto_comision;
						}
					}
					$total+=$amortizacion['pago_capital']-$amortizacion['iva_capital']+$amortizacion['pago_interes']-$amortizacion['iva_interes_generado']+$amortizacion['pago_comisiones']-$amortizacion['pago_comisiones_iva'];
				}
			}else{	
				$amortizaciones=$amortizaciones ?? Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){					
					$comisiones=ComisionesAmortizaciones::model()->findAll('id_amortizacion=:id_amortizacion',array(':id_amortizacion'=>$amortizacion["id"]));	
					$menos_comision_pagada=0;
					foreach ($comisiones as $comision){
						if($comision->descontar_dispocision==1){
							$menos_comision_pagada+=$comision->monto_comision;
						}
					}
					$total+=$amortizacion['pago_capital']-$amortizacion['iva_capital']+$amortizacion['pago_interes']-$amortizacion['iva_interes_generado']+$amortizacion['pago_comisiones']-$amortizacion['pago_comisiones_iva'];
				}
			}
		}		
		return $total;
	}
	public function getTotalCapitalPagar(){
		$total=0;
		if(isset($this->id)){
			if(isset($this->id_grupo_cliente)){
				if(isset($this->id_cliente) && $this->id_cliente!=0){
					$solidario=GruposSolidarios::model()->find("id_solicitud=:solicitud AND id_cliente=:cliente",array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente));
					$amortizaciones=Amortizaciones::model()->getAmortizacionesGrupoSolidario($solidario);
				}else{
					$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				}
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_capital'];
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_capital'];
				}
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_capital'];
				}
			}
		}
		return $total;
	}
	public function getTotalInteresPagar(){
		$total=0;
		if(isset($this->id)){
			if(isset($this->id_grupo_cliente)){
				if(isset($this->id_cliente) && $this->id_cliente!=0){
					$solidario=GruposSolidarios::model()->find("id_solicitud=:solicitud AND id_cliente=:cliente",array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente));
					$amortizaciones=Amortizaciones::model()->getAmortizacionesGrupoSolidario($solidario);
				}else{
					$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				}
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_interes'];
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_interes'];
				}
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_interes'];
				}
			}
		}
		return round($total);
	}
	public function getTotalComisionesPagar(){
		$total=0;
		if(isset($this->id)){
			if(isset($this->id_grupo_cliente)){
				if(isset($this->id_cliente) && $this->id_cliente!=0){
					$solidario=GruposSolidarios::model()->find("id_solicitud=:solicitud AND id_cliente=:cliente",array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente));
					$amortizaciones=Amortizaciones::model()->getAmortizacionesGrupoSolidario($solidario);
				}else{
					$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				}
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_comisiones'];
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_comisiones'];
				}
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_comisiones'];
				}
			}
		}
		return $total;
	}
	public function getTotalPagare(){//Capital + Interes
		$total=0;
		if(isset($this->id)){
			if(!isset($this->id_grupo_cliente)){
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_capital']+$amortizacion['pago_interes']+$amortizacion['pago_comisiones'];
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_capital']+$amortizacion['pago_interes']+$amortizacion['pago_comisiones'];
				}
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				foreach ($amortizaciones as $amortizacion){
					$total+=$amortizacion['pago_capital']+$amortizacion['pago_interes']+$amortizacion['pago_comisiones'];
				}
			}
		}
		return $total;
	}
	public function getTotalCapitalVigente(){
		$total=0;
		if(isset($this->id)){
			if(!isset($this->id_grupo_cliente)){
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])>=strtotime("NOW")){
						$total+=$amortizacion['pago_capital'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_capital;
						}
					}
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])>=strtotime("NOW")){
						$total+=$amortizacion['pago_capital'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_capital;
						}
					}
				}
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])>=strtotime("NOW")){
						$total+=$amortizacion['pago_capital'];
						$parcialidades=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND numero_amortizacion=:numero",array(':solicitud'=>$this->id,':numero'=>$amortizacion["numero_amortizacion"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_capital;
						}
					}
				}
			}
		}
		return $total;
	}
	public function getTotalInteresVigente(){
		$total=0;
		if(isset($this->id)){
			if(!isset($this->id_grupo_cliente)){
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])>=strtotime("NOW")){
						$total+=$amortizacion['pago_interes'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_interes;
						}
					}
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])>=strtotime("NOW")){
						$total+=$amortizacion['pago_interes'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_interes;
						}
					}
				}
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])>=strtotime("NOW")){
						$total+=$amortizacion['pago_interes'];
						$parcialidades=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND numero_amortizacion=:numero",array(':solicitud'=>$this->id,':numero'=>$amortizacion["numero_amortizacion"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_interes;
						}
					}
				}
			}
		}
		return $total;
	}
	public function getTotalCapitalVencido(){
		$total=0;
		if(isset($this->id)){
			if(!isset($this->id_grupo_cliente)){
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])<strtotime("NOW")){
						$total+=$amortizacion['pago_capital'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_capital;
						}
					}
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])<strtotime("NOW")){
						$total+=$amortizacion['pago_capital'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_capital;
						}
					}
				}
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])<strtotime("NOW")){
						$total+=$amortizacion['pago_capital'];
						$parcialidades=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND numero_amortizacion=:numero",array(':solicitud'=>$this->id,':numero'=>$amortizacion["numero_amortizacion"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_capital;
						}
					}
				}
			}
		}
		return $total;
	}
	public function getTotalInteresVencido(){
		$total=0;
		if(isset($this->id)){
			if(!isset($this->id_grupo_cliente)){
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])<strtotime("NOW")){
						$total+=$amortizacion['pago_interes'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_interes;
						}
					}
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])<strtotime("NOW")){
						$total+=$amortizacion['pago_interes'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_interes;
						}
					}
				}
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])<strtotime("NOW")){
						$total+=$amortizacion['pago_interes'];
						$parcialidades=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND numero_amortizacion=:numero",array(':solicitud'=>$this->id,':numero'=>$amortizacion["numero_amortizacion"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_interes;
						}
					}
				}
			}
		}
		return $total;
	}
	public function getTotalMoraVencido(){
		$total=0;
		if(isset($this->id)){
			if(!isset($this->id_grupo_cliente)){
				$amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])<strtotime("NOW")){
						$total+=$amortizacion['pago_moratorios'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_moratorios;
						}
					}
				}
			}elseif(isset($this->id_disposicion)){
				$amortizaciones=Amortizaciones::model()->getAmortizacionesDisposicion($this->id_disposicion);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])<strtotime("NOW")){
						$total+=$amortizacion['pago_moratorios'];
						$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion["id"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_moratorios;
						}
					}
				}
			}else{
				$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($this);
				foreach ($amortizaciones as $amortizacion){
					if($amortizacion["status"]=="Calculado" && strtotime($amortizacion["fecha_amortizacion"])<strtotime("NOW")){
						$total+=$amortizacion['pago_moratorios'];
						$parcialidades=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND numero_amortizacion=:numero",array(':solicitud'=>$this->id,':numero'=>$amortizacion["numero_amortizacion"]));
						foreach ($parcialidades as $parcialidad){
							$total-=$parcialidad->pago_moratorios;
						}
					}
				}
			}
		}
		return $total;
	}
	//Reporte Proceso Credito
	public function getMontoDispuesto(){
		if(!isset($this->_montoDispuesto)){

			if(isset($this->id) && $this->id!=0){
				if(isset($this->id_grupo_cliente) &&  $this->id_grupo_cliente!=0){
					$total=0;
					$solidarios=GruposSolidarios::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$this->id));
					foreach ($solidarios as $solidario){
						$total+=$solidario->monto;
					}
				}else{
					$total=0;
					/*$amortizacion=Amortizaciones::model()->findAll("id_solicitud=:solicitud AND numero_amortizacion IN(0,1)",array(':solicitud'=>$this->id));
					$total+=$amortizacion[0]->saldo_inicial;*/
					$total+=$this->entregable;
					$disposiciones=Disposiciones::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$this->id));
					foreach ($disposiciones as $disposicion){
						$total+=$disposicion->importe;
					}
				}
				$this->_montoDispuesto=$total;
			}
		}

		return $this->_montoDispuesto;
	}
	public function setMontoDispuesto($monto){
		$this->_montoDispuesto=$monto;
	}
	public function getMontoDispersion(){
		if(!isset($this->_montoDispersion)){
			$total= EntregasDisposiciones::model()->find('id_solicitud=:id_solicitud', array(':id_solicitud'=>$this->id));
			$this->_montoDispersion=$total->monto;
		}

		return $this->_montoDispersion;
	}
	public function setmontoDispersion($monto){
		$this->_montoDispersion=$monto;
	}
	public function getFechaDispersion(){
		if(!isset($this->_fechaDispersion)){
			$total= EntregasDisposiciones::model()->find('id_solicitud=:id_solicitud', array(':id_solicitud'=>$this->id));
			$this->_fechaDispersion=$total->fecha_entrega;
			
		}

		return $this->_fechaDispersion;
	}
	public function setfechaDispersion(){
		$total= EntregasDisposiciones::model()->find('id_solicitud=:id_solicitud', array(':id_solicitud'=>$this->id));			
		$this->_fechaDispersion=$total->fecha_entrega;
	}

	public function getMontoComisionesAtraso(){
		$total=0;
		//Las amortizaciones pueden estar relacionadas con una solicitud, con una disposicion, o con un cliente de grupo solidario
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0.id_disposicion0","id_amortizacion0.id_grupo_solidario0"))->findall("id_amortizacion0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud",array(':solicitud'=>$this->id));
		foreach($comisiones as $comision){
			$model=Comisiones::model()->find("nombre=:comision AND id_producto=:producto",array(':comision'=>$comision->nombre,':producto'=>$this->id_producto));
			if($model->tipo_comision=="Atraso"){
				$total+=$comision->importe*(1+$comision->id_impuesto0->porcentaje);
			}
		}
		return $total;
	}
	public function getMontoComisionesInicialesCobrado(){
		$total=0;
		//Las amortizaciones pueden estar relacionadas con una solicitud, con una disposicion, o con un cliente de grupo solidario
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0.id_disposicion0","id_amortizacion0.id_grupo_solidario0"))->findall("id_amortizacion0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud",array(':solicitud'=>$this->id));
		foreach($comisiones as $comision){
			$model=Comisiones::model()->find("nombre=:comision AND id_producto=:producto",array(':comision'=>$comision->nombre,':producto'=>$this->id_producto));
			if($model->tipo_comision=="Inicial"){
				if($comision->id_amortizacion0->status=="Registrado"){
					$total+=$comision->importe*(1+$comision->id_impuesto0->porcentaje);
				}else{
					$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$comision->id_amortizacion));
					$pagado=0;
					foreach ($parcialidades as $parcialidad){
						$pagado+=$parcialidad->pago_comisiones;
					}
					$total+=$pagado*($comision->importe*(1+$comision->id_impuesto0->porcentaje))/$comision->id_amortizacion0->pago_comisiones;
				}
			}
		}
		return $total;
	}
	public function getMontoComisionesPermanentesCobrado(){
		$total=0;
		//Las amortizaciones pueden estar relacionadas con una solicitud, con una disposicion, o con un cliente de grupo solidario
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0.id_disposicion0","id_amortizacion0.id_grupo_solidario0"))->findall("id_amortizacion0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud",array(':solicitud'=>$this->id));
		foreach($comisiones as $comision){
			$model=Comisiones::model()->find("nombre=:comision AND id_producto=:producto",array(':comision'=>$comision->nombre,':producto'=>$this->id_producto));
			if($model->tipo_comision=="Permanente"){
				if($comision->id_amortizacion0->status=="Registrado"){
					$total+=$comision->importe*(1+$comision->id_impuesto0->porcentaje);
				}else{
					$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$comision->id_amortizacion));
					$pagado=0;
					foreach ($parcialidades as $parcialidad){
						$pagado+=$parcialidad->pago_comisiones;
					}
					$total+=$pagado*($comision->importe*(1+$comision->id_impuesto0->porcentaje))/$comision->id_amortizacion0->pago_comisiones;
				}
			}
		}
		return $total;
	}
	public function getMontoComisionesAtrasoCobrado(){
		$total=0;
		//Las amortizaciones pueden estar relacionadas con una solicitud, con una disposicion, o con un cliente de grupo solidario
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0.id_disposicion0","id_amortizacion0.id_grupo_solidario0"))->findall("id_amortizacion0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud",array(':solicitud'=>$this->id));
		foreach($comisiones as $comision){
			$model=Comisiones::model()->find("nombre=:comision AND id_producto=:producto",array(':comision'=>$comision->nombre,':producto'=>$this->id_producto));
			if($model->tipo_comision=="Atraso"){
				if($comision->id_amortizacion0->status=="Registrado"){
					$total+=$comision->importe*(1+$comision->id_impuesto0->porcentaje);
				}else{
					$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$comision->id_amortizacion));
					$pagado=0;
					foreach ($parcialidades as $parcialidad){
						$pagado+=$parcialidad->pago_comisiones;
					}
					$total+=$pagado*($comision->importe*(1+$comision->id_impuesto0->porcentaje))/$comision->id_amortizacion0->pago_comisiones;
				}
			}
		}
		return $total;
	}
	public function getMontoComisionesEspecialesCobrado(){
		$total=0;
		//Las amortizaciones pueden estar relacionadas con una solicitud, con una disposicion, o con un cliente de grupo solidario
		$comisiones=ComisionesAmortizaciones::model()->with(array("id_amortizacion0.id_disposicion0","id_amortizacion0.id_grupo_solidario0"))->findall("id_amortizacion0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud",array(':solicitud'=>$this->id));

		foreach($comisiones as $comision){
			$model=Comisiones::model()->find("nombre=:comision AND id_producto=:producto",array(':comision'=>$comision->nombre,':producto'=>$this->id_producto));
			if($model->tipo_comision=="Especial"){
				if($comision->id_amortizacion0->status=="Registrado"){
					$total+=$comision->importe*(1+$comision->id_impuesto0->porcentaje);
				}else{
					$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$comision->id_amortizacion));
					$pagado=0;
					foreach ($parcialidades as $parcialidad){
						$pagado+=$parcialidad->pago_comisiones;
					}
					$total+=$pagado*($comision->importe*(1+$comision->id_impuesto0->porcentaje))/$comision->id_amortizacion0->pago_comisiones;
				}
			}
		}
		return $total;
	}
	///
	public function getTiposCalificacion(){
		$data=array(
				'inicial'=>'Inicial',
				'seguimiento'=>'Seguimiento',
		);
		return $data;
	}
	public function getTiposCalificacionI(){
		$data=array(
				'inicial'=>'Inicial',
		);
		return $data;
	}
	public function getTiposCalificacionS(){
		$data=array(
				'seguimiento'=>'Seguimiento',
		);
		return $data;
	}
	public function getTiposSolicitudes(){
		$data=array(
				'individual'=>'Individual',
				'grupal'=>'Grupal',
		);
		return $data;
	}
	public function getTiposSolicitudesI(){
		$data=array(
				'individual'=>'Individual'
		);
		return $data;
	}
	public function getTiposSolicitudesG(){
		$data=array(
				'grupal'=>'Grupal'
		);
		return $data;
	}
	public function getClientesCalificaciones(){
		
		unset($filtro);
			if(Yii::app()->user->getPerfil()=='Administrador de Sucursal'){
			
			$sql="select usuarios_asignados from usuarios where id=".Yii::app()->user->getId();
			$res=Yii::app()->db->createCommand($sql)->queryall();
			foreach($res as $r){
					$res=$r['usuarios_asignados'];
					unset($arreglo);
					if($res<>"" && $res<>"," && !is_null($res))$arreglo=explode(",",$res);
					if(!is_null($arreglo) && isset($arreglo)){
						
						unset($sql);
						foreach($arreglo as $arr){
							$sql=$sql.$arr.",";
						}
						$sql=substr($sql,0,strlen($sql)-1);
						$filtro=$sql;
						
						$filtro='id_ejecutivo in ( select id from ejecutivos where id_usuario in('.$filtro.')) and ';
						//$model->search($sql);
						//$model=Solicitudes::model()->findAll("id_cliente in (select id from clientes where id_ejecutivo in (select id from ejecutivos where id_usuario in (".$sql.")))");
						
						
					
							
						
					}
			}}
		
		
		if($this->tipoCalificacion=="inicial"){
			return CHtml::listData(Clientes::model()->findAll(array('condition'=>$filtro.'id IN (SELECT id_cliente FROM solicitudes s WHERE (s.id_cliente=t.id) AND s.status_calculado IN(\'Registrada\',\'En Revisión\') AND s.etapa IN(2,3) AND ((s.status_asignado<>\'Aceptada\' AND s.status_asignado<>\'Pagado\') OR s.status_asignado IS NULL))','order'=>'t.nombre ASC')), "id", "fullName");
		}else{
			return CHtml::listData(Clientes::model()->findAll(array('condition'=>$filtro.'id IN (SELECT id_cliente FROM solicitudes s WHERE s.status_asignado="Aceptada" or id_producto IN (SELECT id FROM productos WHERE tabla_disposiciones="individual") AND id IN (SELECT id_solicitud FROM amortizaciones WHERE id_disposicion IN (SELECT id FROM disposiciones WHERE id_solicitud=s.id ) AND status ="Calculado"))','order'=>'t.nombre ASC')), "id", "fullName");
		}
	}
	public function getGruposCalificaciones(){
		if($this->tipoCalificacion=="inicial"){
			return CHtml::listData(GruposClientes::model()->findAll(array('condition'=>'EXISTS (SELECT * FROM solicitudes s LEFT JOIN grupos_solidarios gs ON(s.id=gs.id_solicitud) LEFT JOIN clientes c ON(c.id=gs.id_cliente) WHERE (c.id_grupo_cliente=t.id) AND s.status_calculado IN(\'Registrada\',\'En Revisión\') AND ((s.status_asignado<>\'Aceptada\' AND s.status_asignado<>\'Pagado\') OR s.status_asignado IS NULL))','order'=>'t.nombre ASC')), "id", "nombre");
		}else{
			return CHtml::listData(GruposClientes::model()->findAll(array('condition'=>'EXISTS (SELECT * FROM solicitudes s LEFT JOIN grupos_solidarios gs ON(s.id=gs.id_solicitud) LEFT JOIN clientes c ON(gs.id_cliente=c.id) WHERE (c.id_grupo_cliente=t.id) AND s.status_asignado=\'Aceptada\')','order'=>'t.nombre ASC')), "id", "nombre");
		}
	}
	///
	public function getSolicitudes(){
		return CHtml::listData(Solicitudes::model()->with("solidarios0")->findAll(array('condition'=>'t.id_cliente=:cliente OR solidarios0.id_cliente=:cliente','order'=>'clave','params'=>array(':cliente'=>$this->id_cliente))), "id", "clave");
	}
	public function getSolicitudesGrupo(){
		return CHtml::listData(Solicitudes::model()->findAll(array('condition'=>'t.id_grupo_cliente=:grupo','order'=>'clave','params'=>array(':grupo'=>$this->id_grupo_cliente))), "id", "clave");
	}
	public function getStatusSolicitudes($array = false){
		return $array ? StatusSolicitudes::model()->findAll() :  CHtml::listData(StatusSolicitudes::model()->findAll(), "id", "nombre");
	}
	public function getEstatusSolicitudesCobro($array = false){
		return $array ? EstatusCobroSolicitudes::model()->findAll() :  CHtml::listData(EstatusCobroSolicitudes::model()->findAll(), "id", "nombre");
	}
	public function getEstatusSolicitudesPago($array = false){
		return $array ? StatusPagos::model()->findAll() :  CHtml::listData(StatusPagos::model()->findAll(), "id", "estatus_pago");
	}
    public function getTiposCartera($array = false){
        return $array ? TiposCartera::model()->findAll() :  CHtml::listData(TiposCartera::model()->findAll(), "id", "nombre");
    }
	public function getBancos($array = false){
		return $array ? Bancos::model()->findAll(array('order'=>'nombre ASC'))  : CHtml::listData(Bancos::model()->findAll(array('order'=>'nombre ASC')), "id", "nombre");
	}
	public function getBancosSTP($array = false){
		return $array ? ListadoBancos::model()->findAll(array('condition'=>'status=1', 'order'=>'nombre_banco ASC'))  : CHtml::listData(ListadoBancos::model()->findAll(array('condition'=>'status=1', 'order'=>'nombre_banco ASC')), "id", "nombre_banco");
	}
	public function getDeudores($array = false){
		return $array ? Deudores::model()->findAll(array('order'=>'nombre_completo ASC')) :  CHtml::listData(Deudores::model()->findAll(array('order'=>'nombre_completo ASC')), "id", "nombre_completo");
	}
	public function getBancosClientes(){
		return CHtml::listData(BancosClientes::model()->findAll(array('condition'=>'id_cliente=:cliente','order'=>'nombre ASC','params'=>array(':cliente'=>$this->id_cliente))), "id", "nombre");
	}
	public function getNumerosCalificacion(){
		if(isset($this->id_grupo_cliente)){
			return CHtml::listData(Calificaciones::model()->with("id_solicitud0.solidarios0")->findAll(array('condition'=>'solidarios0.id_cliente=:cliente AND id_solicitud0.id=:solicitud','order'=>'clave','params'=>array(':cliente'=>$this->id_cliente,':solicitud'=>$this->id))), "id", "fecha");
		}else{
			return CHtml::listData(Calificaciones::model()->with("id_solicitud0")->findAll(array('condition'=>'id_solicitud0.id=:solicitud','order'=>'clave','params'=>array(':solicitud'=>$this->id))), "id", "fecha");
		}
	}

	public function getNumerosCalificacionSol($clave){
		$modelSol=Solicitudes::model()->find('clave="'.$clave.'"');
		$dataCalificacion=$modelSol->getNumerosCalificacion();
		$data=array();
		$data['']='--Nuevo--';
		// if(in_array($modelSol->status_asignado,array("Aceptada","Pagado","Reestructurado"))){
		// 	$data['value']=$modelSol->fecha_aceptacion;
		// }
		foreach ($dataCalificacion as $id => $value ) {
			$data[$id]=$value;
		}
		return $data;
	}
	
	public function getMetodosCalificacion(){
		$data=array(
				'0'=>'Seguimiento',
		);
		return $data;
	}

	public function getMetodosCalificacionP(){
		$data=array(
				'1'=>'Parametrico',
		);
		return $data;
	}
	public function getMetodosCalificacionD(){
		$data=array(
				'2'=>'Directo',
		);
		return $data;
	}
	public function getMetodosCalificacionAll(){
		$data=array(
				'1'=>'Parametrico',
				'2'=>'Directo',
		);
		return $data;
	}
	
	public function getStatusCartera(){
		$fecha=date("Y/m/d");
		if(!isset($this->fecha_disposicion) || $this->fecha_disposicion==0){
			$status="Sin actividad";
		}else{
			$n=Amortizaciones::model()->count("id_solicitud=:solicitud AND fecha_amortizacion<'$fecha' AND status<>'Registrado'");
			if($n>0){
				$status="Vencida";
			}else{
				$status="Al corriente";
			}
		}
		return $status;
	}
	
	////////////////////////////////////////PROVISION DEL CREDITO
	public function createPolizaDiarioProvision(){

		if(isset($this->id_grupo_cliente)){
			$status=$this->getStatusSolidario();
		}else{
			$status=$this->status_asignado;
		}
		if($status=="Aceptada"){
			$modelClaves=Claves::model()->find();

			$fecha=date("Y-m-d",strtotime($this->fecha_disposicion));
			$tipo="Diario";
			$operacion="provisión de crédito";
			$concepto="Provisiòn del crédito ".$this->clave;

			$data=array(
				'tipo'=>'poliza',
				'tipo_poliza'=>substr($tipo,0,1),
				'year'=>date("Y",strtotime($fecha)),
				'mes'=>date("m",strtotime($fecha)),
			);
			$clavePoliza=$modelClaves->getClave($data);

			$solicitud=$this;

			if($this->id_producto0->id_tipo_producto==8){
				$plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>'provisión de crédito'));
			}else{
				$plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>'provisión de crédito'));
			}
			$polizasAutomaticas=PolizasAutomaticas::model()->findAll("nombre_poliza=:nombre_poliza",array(':nombre_poliza'=>$plantilla->nombre_poliza));

			

			$success=true;
			//CARGOS
			if(isset($this->id_grupo_cliente)){
				$solidarios=GruposSolidarios::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
				$n=count($solidarios);
			}else{
				$n=1;
			}
			for($i=1;$i<=$n;$i++){
				if(isset($solicitud->id_grupo_cliente)){
					$cliente=$solidarios[$i-1]->id_cliente0;

					$amortizaciones=Amortizaciones::model()->getAmortizacionesGrupoSolidario($solidarios[$i-1],array(),array(),array());
				}else{
					$cliente=$solicitud->id_cliente0;
					$amortizaciones=Amortizaciones::model()->getAmortizaciones($this,array(),array(),array());
				}
				$interes_por_pagar=0;
				$iva_interes_por_pagar=0;
				foreach ($amortizaciones as $amortizacion){
					$interes_por_pagar+=$amortizacion["pago_interes"]-$amortizacion["iva_interes_generado"];
					$iva_interes_por_pagar+=$amortizacion["iva_interes_generado"];
				}

				foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
					if(!isset($polizaAutomatica->id_cuenta_cargo) || $polizaAutomatica->id_cuenta_cargo==0){
						continue;
					}
					//Se obtiene el monto
					switch ($polizaAutomatica->concepto) {
						case 'capital':
							if(isset($solicitud->id_grupo_cliente)){
								$monto=$solidarios[$i-1]->monto-$solidarios[$i-1]->getMontoComisionesFinanciadas()-$solidarios[$i-1]->getIvaComisionesFinanciadas();
							}else{
								$monto=$solicitud->entregable-$solicitud->getMontoComisionesFinanciadasPrincipal()-$solicitud->getIvaComisionesFinanciadasPrincipal();
							}
							break;
						case 'comisiones_financiadas':
							if(isset($solicitud->id_grupo_cliente)){
								$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
							}else{
								$monto=$solicitud->getMontoComisionesFinanciadasPrincipal();
							}
							break;
						case 'iva_comisiones_financiadas':
							if(isset($solicitud->id_grupo_cliente)){
								$monto=$solidarios[$i-1]->getIvaComisionesFinanciadas();
							}else{
								$monto=$solicitud->getIvaComisionesFinanciadasPrincipal();
							}
							break;
						case 'total_disposicion':
							if(isset($solicitud->id_grupo_cliente)){
								$monto=$solidarios[$i-1]->monto;
							}else{
								$monto=$solicitud->entregable;
							}
							
							break;
						case 'interes':
							$monto=$interes_por_pagar;
							break;
						case 'iva_interes':
							$monto=$iva_interes_por_pagar;
							break;
						case 'valor_equipo':
							$monto=$solicitud->valor_sin_iva;
							break;
						case 'iva_equipo':
							$monto=$solicitud->iva_equipo;
							break;
						case 'seguro':
							$monto=$solicitud->seguro/(1+$solicitud->id_impuesto0->porcentaje);//El seguro se coloca con IVA
							break;
						case 'iva_seguro':
							$monto=$solicitud->seguro-$solicitud->seguro/(1+$solicitud->id_impuesto0->porcentaje);//El seguro se coloca con IVA
							break;
						case 'costo_adicional_financiado':
							$monto=$solicitud->gastos_iniciales;//se coloca sin IVA
							break;
						case 'iva_costo_adicional_financiado':
							$monto=$solicitud->gastos_iniciales*(1+$solicitud->id_impuesto0->porcentaje);//se coloca sin IVA
							break;
					}
					//Se obtiene la cuenta
					$cuenta=$polizaAutomatica->id_cuenta_cargo0;

					//Se desglosa la cuenta
					$params=array(
						'banco'=>$solicitud->id_banco,
						'moneda'=>$solicitud->id_moneda,
						'producto'=>$solicitud->id_producto,
						'producto_factoraje'=>null,
						'acreedor'=>null,
						'proveedor'=>null,
						'deudor'=>$solicitud->id_deudor,
						'cliente'=>$cliente->id,
						'empleado'=>null,
                        'solicitud'=>$solicitud->id,
                        'concepto'=>$polizaAutomatica->concepto
					);

					$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
					if($desglose['success']){
						$cuentaCargo=CatalogoCuentas::model()->findByPk($desglose["id"]);

					}else{
						$success=false;
						$msg=$desglose["msg"];
					}

					//Se genera la poliza
					if($success && $monto>0){
						$poliza=new PolizasDiario();
						$poliza->tipo=$tipo;
						$poliza->operacion=$operacion;
						$poliza->relacionado=$solicitud->id;
						$poliza->id_usuario=Yii::app()->user->getId();
						$poliza->fecha=$fecha;
						$poliza->poliza=$clavePoliza;
						$poliza->id_cuenta=$cuentaCargo->id;
						$poliza->id_moneda=$solicitud->id_moneda;
						$poliza->cargo=$monto;
						$poliza->concepto=$concepto;
						$poliza->concepto_importe=$polizaAutomatica->concepto;
						$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                        $poliza->id_cliente=$this->id_cliente;
                        $poliza->id_solicitud=$this->id;
						$success=$poliza->save();
						if(!$success){
							break;
						}
					}
				}
			}
			if($success){
				//ABONOS
				for($i=1;$i<=$n;$i++){
					if(isset($solicitud->id_grupo_cliente)){
						$cliente=$solidarios[$i-1]->id_cliente0;
					}else{
						$cliente=$solicitud->id_cliente0;
					}

					foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
						if(!isset($polizaAutomatica->id_cuenta_abono) || $polizaAutomatica->id_cuenta_abono==0){
							continue;
						}

						//Se obtiene el monto
						switch ($polizaAutomatica->concepto) {
							case 'capital':
								if(isset($solicitud->id_grupo_cliente)){
									$monto=$solidarios[$i-1]->monto-$solidarios[$i-1]->getMontoComisionesFinanciadas()-$solidarios[$i-1]->getIvaComisionesFinanciadas();
								}else{
									$monto=$solicitud->entregable-$solicitud->getMontoComisionesFinanciadasPrincipal()-$solicitud->getIvaComisionesFinanciadasPrincipal();
								}
								break;
							case 'comisiones_financiadas':
								if(isset($solicitud->id_grupo_cliente)){
									$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
								}else{
									$monto=$solicitud->getMontoComisionesFinanciadasPrincipal();
								}
								break;
							case 'iva_comisiones_financiadas':
								if(isset($solicitud->id_grupo_cliente)){
									$monto=$solidarios[$i-1]->getIvaComisionesFinanciadas();
								}else{
									$monto=$solicitud->getIvaComisionesFinanciadasPrincipal();
								}
								break;
							case 'comisiones':
									if(isset($solicitud->id_grupo_cliente)){
										//$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
									}else{
										$monto=$solicitud->getMontoComisionesDeducible();
									}
									break;
							case 'iva_comisiones':
									if(isset($solicitud->id_grupo_cliente)){
										//$monto=$solidarios[$i-1]->getIvaComisionesFinanciadas();
									}else{
										$monto=$solicitud->getIvaComisionesDeducible();
									}
									break;
							case 'total_disposicion':
								if(isset($solicitud->id_grupo_cliente)){
									$monto=$solidarios[$i-1]->monto;
								}else{
									$comprobacion_amor_comi=Amortizaciones::model()->find('id_solicitud=:sol AND numero_amortizacion=0', array(':sol'=>$solicitud->id));
									$comisiones=ComisionesAmortizaciones::model()->findAll('id_amortizacion=:id and descontar_dispocision=1',array(':id'=>$comprobacion_amor_comi->id));
									if(!is_null($comisiones[0])){
									$monto_1=EntregasDisposiciones::model()->find('id_solicitud=:id', array(':id'=>$solicitud->id));
										$monto=$monto_1->monto;
									}else{
										$monto=$solicitud->entregable;
									}

								}
								break;
							case 'interes':
								$monto=$interes_por_pagar;
								break;
							case 'iva_interes':
								$monto=$iva_interes_por_pagar;
								break;
							case 'valor_equipo':
								$monto=$solicitud->valor_sin_iva;
								break;
							case 'iva_equipo':
								$monto=$solicitud->iva_equipo;
								break;
							case 'seguro':
								$monto=$solicitud->seguro/(1+$solicitud->id_impuesto0->porcentaje);//El seguro se coloca con IVA
								break;
							case 'iva_seguro':
								$monto=$solicitud->seguro-$solicitud->seguro/(1+$solicitud->id_impuesto0->porcentaje);//El seguro se coloca con IVA
								break;
							case 'costo_adicional_financiado':
								$monto=$solicitud->gastos_iniciales;//se coloca sin IVA
								break;
							case 'iva_costo_adicional_financiado':
								$monto=$solicitud->gastos_iniciales*(1+$solicitud->id_impuesto0->porcentaje);//se coloca sin IVA
								break;
						}
						//Se obtiene la cuenta
						$cuenta=$polizaAutomatica->id_cuenta_abono0;

						//Se desglosa la cuenta
						$params=array(
							'banco'=>$solicitud->id_banco,
							'moneda'=>$solicitud->id_moneda,
							'producto'=>$solicitud->id_producto,
							'producto_factoraje'=>null,
							'acreedor'=>null,
							'proveedor'=>null,
							'deudor'=>$solicitud->id_deudor,
							'cliente'=>$cliente->id,
							'empleado'=>null,
                            'solicitud'=>$solicitud->id,
                            'concepto'=>$polizaAutomatica->concepto
						);
						$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
							$banco=Bancos::model()->findByPK($this->id_banco);
						if($desglose['success']){
							$cuentaAbono=CatalogoCuentas::model()->findByPk($desglose["id"]);
						}else{
							$success=false;
							$msg=$desglose["msg"];
						}
						//var_dump($polizaAutomatica,'<br>',$key,'<br>',$monto,$cuentaAbono);
						//if($key==4){exit;}

						//Se genera la poliza
						if($success && $monto>0){
							$poliza=new PolizasDiario();
							$poliza->tipo=$tipo;
							$poliza->operacion=$operacion;
							$poliza->relacionado=$solicitud->id;
							$poliza->id_usuario=Yii::app()->user->getId();
							$poliza->fecha=$fecha;
							$poliza->poliza=$clavePoliza;
							$poliza->id_cuenta=$cuentaAbono["id"];
							$poliza->id_moneda=$solicitud->id_moneda;
							$poliza->abono=$monto;
							$poliza->concepto=$concepto;
							$poliza->concepto_importe=$polizaAutomatica->concepto;
							$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                            $poliza->id_cliente=$this->id_cliente;
                            $poliza->id_solicitud=$this->id;
							$success=$poliza->save();
							if(!$success){
								break;
							}
						}
					}
				}
			}
		}
		Yii::app()->session['statusSolicitudTesoreria']=$status;
		Yii::app()->session['modelPoliza']=$poliza;
		return $success;
	}

	////////////////////////////////////////DISPOSICION INICIAL
	public function createPolizaDiario(){
		if(isset($this->id_grupo_cliente)){
			$status=$this->getStatusSolidario();
		}else{
			$status=$this->status_asignado;
		}
		$success=false;
		$msg="";
		if($status=="Aceptada"){
			$modelClaves=Claves::model()->find();

			$fecha=date("Y-m-d",strtotime($this->fecha_disposicion));
			$tipo="Egreso";
			$operacion="disposicion_inicial";
			$concepto="Disposición Inicial del crédito ".$this->clave;

			$data=array(
				'tipo'=>'poliza',
				'tipo_poliza'=>substr($tipo,0,1),
				'year'=>date("Y",strtotime($fecha)),
				'mes'=>date("m",strtotime($fecha)),
			);
			$clavePoliza=$modelClaves->getClave($data);

			$solicitud=$this;

			if($this->id_producto0->id_tipo_producto==8){
				$plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>'disposicion_arrendamiento'));
			}else{
				$plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>'disposicion_credito'));
			}
			$polizasAutomaticas=PolizasAutomaticas::model()->findAll("nombre_poliza=:nombre_poliza",array(':nombre_poliza'=>$plantilla->nombre_poliza));


			//CARGOS
			if(isset($this->id_grupo_cliente)){
				$solidarios=GruposSolidarios::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
				$n=count($solidarios);
			}else{
				$n=1;
			}
			for($i=1;$i<=$n;$i++){
				if(isset($solicitud->id_grupo_cliente)){
					$cliente=$solidarios[$i-1]->id_cliente0;

					$amortizaciones=Amortizaciones::model()->getAmortizacionesGrupoSolidario($solidarios[$i-1],array(),array(),array());
				}else{
					$cliente=$solicitud->id_cliente0;
					$amortizaciones=Amortizaciones::model()->getAmortizaciones($this,array(),array(),array());
				}

				$interes_por_pagar=0;
				$iva_interes_por_pagar=0;
				foreach ($amortizaciones as $amortizacion){
					$interes_por_pagar+=$amortizacion["pago_interes"]-$amortizacion["iva_interes_generado"];
					$iva_interes_por_pagar+=$amortizacion["iva_interes_generado"];
				}

				foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
					if(!isset($polizaAutomatica->id_cuenta_cargo) || $polizaAutomatica->id_cuenta_cargo==0){
						continue;
					}
					//Se obtiene el monto
					switch ($polizaAutomatica->concepto) {
						case 'capital':
							if(isset($solicitud->id_grupo_cliente)){
								$monto=$solidarios[$i-1]->monto-$solidarios[$i-1]->getMontoComisionesFinanciadas()-$solidarios[$i-1]->getIvaComisionesFinanciadas();
							}else{
								$monto=$solicitud->entregable-$solicitud->getMontoComisionesFinanciadasPrincipal()-$solicitud->getIvaComisionesFinanciadasPrincipal();
							}
							break;
						case 'comisiones_financiadas':
							if(isset($solicitud->id_grupo_cliente)){
								$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
							}else{
								$monto=$solicitud->getMontoComisionesFinanciadasPrincipal();
							}
							break;
						case 'iva_comisiones_financiadas':
							if(isset($solicitud->id_grupo_cliente)){
								$monto=$solidarios[$i-1]->getIvaComisionesFinanciadas();
							}else{
								$monto=$solicitud->getIvaComisionesFinanciadasPrincipal();
							}
							break;
						case 'comisiones':
								if(isset($solicitud->id_grupo_cliente)){
									//$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
								}else{
									$monto=$solicitud->getMontoComisionesPoliza();
								}
								break;
						case 'iva_comisiones':
								if(isset($solicitud->id_grupo_cliente)){
									//$monto=$solidarios[$i-1]->getIvaComisionesFinanciadas();
								}else{
									$monto=$solicitud->getIvaComisionesPoliza();
								}
								break;
						case 'comisiones_des':
								if(isset($solicitud->id_grupo_cliente)){
									//$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
								}else{
									$monto=$solicitud->getMontoComisionesDeducible();
								}
								break;
						case 'iva_comisiones_des':
								if(isset($solicitud->id_grupo_cliente)){
									//$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
								}else{
									$monto=$solicitud->getIvaComisionesDeducible();
								}
								break;
						case 'total_disposicion':
							if(isset($solicitud->id_grupo_cliente)){
								$monto=$solidarios[$i-1]->monto;
							}else{
								$monto=$solicitud->entregable;
							}

							break;
						case 'interes':
							$monto=$interes_por_pagar;
							break;
						case 'iva_interes':
							$monto=$iva_interes_por_pagar;
							break;
						case 'valor_equipo':
							$monto=$solicitud->valor_sin_iva;
							break;
						case 'iva_equipo':
							$monto=$solicitud->iva_equipo;
							break;
						case 'seguro':
							$monto=$solicitud->seguro/(1+$solicitud->id_impuesto0->porcentaje);//El seguro se coloca con IVA
							break;
						case 'iva_seguro':
							$monto=$solicitud->seguro-$solicitud->seguro/(1+$solicitud->id_impuesto0->porcentaje);//El seguro se coloca con IVA
							break;
						case 'costo_adicional_financiado':
							$monto=$solicitud->gastos_iniciales;//se coloca sin IVA
							break;
						case 'iva_costo_adicional_financiado':
							$monto=$solicitud->gastos_iniciales*(1+$solicitud->id_impuesto0->porcentaje);//se coloca sin IVA
							break;
					}
					//Se obtiene la cuenta
					$cuenta=$polizaAutomatica->id_cuenta_cargo0;


					//Se desglosa la cuenta
					$params=array(
						'banco'=>$solicitud->id_banco,
						'moneda'=>$solicitud->id_moneda,
						'producto'=>$solicitud->id_producto,
						'producto_factoraje'=>null,
						'acreedor'=>null,
						'proveedor'=>null,
						'deudor'=>$solicitud->id_deudor,
						'cliente'=>$cliente->id,
						'empleado'=>null,
                        'solicitud'=>$solicitud->id,
                        'concepto'=>$polizaAutomatica->concepto
					);


					$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
					if($desglose['success']){
						$cuentaCargo=CatalogoCuentas::model()->findByPk($desglose["id"]);

					}else{
						$success=false;
						$msg=$desglose["msg"];
					}



					//Se genera la poliza
					if($monto>0){
						$poliza=new PolizasDiario();
						$poliza->tipo=$tipo;
						$poliza->operacion=$operacion;
						$poliza->relacionado=$solicitud->id;
						$poliza->id_usuario=Yii::app()->user->getId();
						$poliza->fecha=$fecha;
						$poliza->poliza=$clavePoliza;
						$poliza->id_cuenta=$cuentaCargo->id;
						$poliza->id_moneda=$solicitud->id_moneda;
						$poliza->cargo=$monto;
						$poliza->concepto=$concepto;
						$poliza->concepto_importe=$polizaAutomatica->concepto;
						$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                        $poliza->id_cliente=$this->id_cliente;
                        $poliza->id_solicitud=$this->id;
						$success=$poliza->save();

						if(!$success){
							break;
						}
					}
				}
			}
			if($success){
				//ABONOS
				for($i=1;$i<=$n;$i++){
					if(isset($solicitud->id_grupo_cliente)){
						$cliente=$solidarios[$i-1]->id_cliente0;
					}else{
						$cliente=$solicitud->id_cliente0;
					}

					foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
						if(!isset($polizaAutomatica->id_cuenta_abono) || $polizaAutomatica->id_cuenta_abono==0){
							continue;
						}

						//Se obtiene el monto
						switch ($polizaAutomatica->concepto) {
							case 'capital':
								if(isset($solicitud->id_grupo_cliente)){
									$monto=$solidarios[$i-1]->monto-$solidarios[$i-1]->getMontoComisionesFinanciadas()-$solidarios[$i-1]->getIvaComisionesFinanciadas();
								}else{
									$monto=$solicitud->entregable-$solicitud->getMontoComisionesFinanciadasPrincipal()-$solicitud->getIvaComisionesFinanciadasPrincipal()-($solicitud->getMontoComisionesDeducible()+$solicitud->getIvaComisionesPoliza());
								}
								break;
							case 'comisiones_financiadas':
								if(isset($solicitud->id_grupo_cliente)){
									$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
								}else{
									$monto=$solicitud->getMontoComisionesFinanciadasPrincipal();
								}
								break;
							case 'iva_comisiones_financiadas':
								if(isset($solicitud->id_grupo_cliente)){
									$monto=$solidarios[$i-1]->getIvaComisionesFinanciadas();
								}else{
									$monto=$solicitud->getIvaComisionesFinanciadasPrincipal();
								}
								break;
							case 'comisiones':
									if(isset($solicitud->id_grupo_cliente)){
										//$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
									}else{
										$monto=$solicitud->getMontoComisionesPoliza();
									}
									break;
							case 'iva_comisiones':
									if(isset($solicitud->id_grupo_cliente)){
										//$monto=$solidarios[$i-1]->getIvaComisionesFinanciadas();
									}else{
										$monto=$solicitud->getIvaComisionesPoliza();
									}
									break;
							case 'comisiones_des':
								if(isset($solicitud->id_grupo_cliente)){
									//$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
								}else{
									$monto=$solicitud->getMontoComisionesDeducible();
								}
								break;
							case 'iva_comisiones_des':
								if(isset($solicitud->id_grupo_cliente)){
									//$monto=$solidarios[$i-1]->getMontoComisionesFinanciadas();
								}else{
									$monto=$solicitud->getIvaComisionesDeducible();
								}
								break;								
							case 'total_disposicion':
								if(isset($solicitud->id_grupo_cliente)){
									$monto=$solidarios[$i-1]->monto;
								}else{
									$comprobacion_amor_comi=Amortizaciones::model()->find('id_solicitud=:sol AND numero_amortizacion=0', array(':sol'=>$solicitud->id));
									$comisiones=ComisionesAmortizaciones::model()->findAll('id_amortizacion=:id and descontar_dispocision=1',array(':id'=>$comprobacion_amor_comi->id));
									if(!is_null($comisiones[0])){
									$monto_1=EntregasDisposiciones::model()->find('id_solicitud=:id', array(':id'=>$solicitud->id));
										$monto=$monto_1->monto;
									}else{
										$monto=$solicitud->entregable;
									}

								}
								break;
							case 'interes':
								$monto=$interes_por_pagar;
								break;
							case 'iva_interes':
								$monto=$iva_interes_por_pagar;
								break;
							case 'valor_equipo':
								$monto=$solicitud->valor_sin_iva;
								break;
							case 'iva_equipo':
								$monto=$solicitud->iva_equipo;
								break;
							case 'seguro':
								$monto=$solicitud->seguro/(1+$solicitud->id_impuesto0->porcentaje);//El seguro se coloca con IVA
								break;
							case 'iva_seguro':
								$monto=$solicitud->seguro-$solicitud->seguro/(1+$solicitud->id_impuesto0->porcentaje);//El seguro se coloca con IVA
								break;
							case 'costo_adicional_financiado':
								$monto=$solicitud->gastos_iniciales;//se coloca sin IVA
								break;
							case 'iva_costo_adicional_financiado':
								$monto=$solicitud->gastos_iniciales*(1+$solicitud->id_impuesto0->porcentaje);//se coloca sin IVA
								break;
						}
						//Se obtiene la cuenta
						$cuenta=$polizaAutomatica->id_cuenta_abono0;

						//Se desglosa la cuenta
						$params=array(
							'banco'=>$solicitud->id_banco,
							'moneda'=>$solicitud->id_moneda,
							'producto'=>$solicitud->id_producto,
							'producto_factoraje'=>null,
							'acreedor'=>null,
							'proveedor'=>null,
							'deudor'=>$solicitud->id_deudor,
							'cliente'=>$cliente->id,
							'empleado'=>null,
                            'solicitud'=>$solicitud->id,
                            'concepto'=>$polizaAutomatica->concepto
						);
						$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
							$banco=Bancos::model()->findByPK($this->id_banco);
						if($desglose['success']){
							$cuentaAbono=CatalogoCuentas::model()->findByPk($desglose["id"]);
						}else{
							$success=false;
							$msg=$desglose["msg"];
						}
						$nombre_empresa=Empresa::model()->find()->nombre_comercial;
						//var_dump($desglose,$banco["id_cuenta_contable"]); exit;
						if($nombre_empresa=="RAPIDITO MEXL G " OR $nombre_empresa=="INNOVATION FINTECH"){
							$cuentaAbono["id"]=$banco["id_cuenta_contable"];
						}



						//Se genera la poliza
						if($success && $monto>0){
							$poliza=new PolizasDiario();
							$poliza->tipo=$tipo;
							$poliza->operacion=$operacion;
							$poliza->relacionado=$solicitud->id;
							$poliza->id_usuario=Yii::app()->user->getId();
							$poliza->fecha=$fecha;
							$poliza->poliza=$clavePoliza;
							$poliza->id_cuenta=$cuentaAbono["id"];
							$poliza->id_moneda=$solicitud->id_moneda;
							$poliza->abono=$monto;
							$poliza->concepto=$concepto;
							$poliza->concepto_importe=$polizaAutomatica->concepto;
							$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                            $poliza->id_cliente=$this->id_cliente;
                            $poliza->id_solicitud=$this->id;
							/*if($plantilla->poliza =="disposicion_credito"){
								$poliza->claveTipoCredito=74;
							}*/
							$success=$poliza->save();
							if(!$success){
								break;
							}
						}
					}
				}
			}
		}
        Yii::app()->session['errorCuenta']=$msg;
		Yii::app()->session['statusSolicitudTesoreria']=$status;
		Yii::app()->session['modelPoliza']=$poliza;

		return $success;
	}

	////////////////////////////////////////CARTERA VENCIDA
	public function createPolizaDiarioVencido(){
		$modelClaves=Claves::model()->find();

		$fecha=date("Y-m-d",strtotime($this->fecha_cartera_vencida));
		$tipo="Diario";
		$operacion="cartera_vencida";
		$concepto="Envío a Cartera Vencida del crédito ".$this->clave;

		$data=array(
			'tipo'=>'poliza',
			'tipo_poliza'=>substr($tipo,0,1),
			'year'=>date("Y",strtotime($fecha)),
			'mes'=>date("m",strtotime($fecha)),
		);
		$clavePoliza=$modelClaves->getClave($data);

		$solicitud=$this;

		$cartera=new ReporteCartera();
		$cartera->solicitud=$this->id;
		$data=$cartera->getData();
		$totales=$cartera->getDataTotal();

		$capital=$totales[0]["capital_vencido"]+$totales[0]["capital_por_vencer"];
		$comisiones_financiadas=$totales[0]["comisiones_financiadas_vencido"]+$totales[0]["comisiones_financiadas_por_vencer"];
		$iva_comisiones_financiadas=$totales[0]["iva_comisiones_financiadas_vencido"]+$totales[0]["iva_comisiones_financiadas_por_vencer"];
		$interes=$totales[0]["interes_vencido"]+$totales[0]["interes_por_vencer"];
		$iva_interes=$totales[0]["iva_interes_vencido"]+$totales[0]["iva_interes_por_vencer"];
		$moratorios=$totales[0]["moratorios_vencido"]+$totales[0]["moratorios_por_vencer"];
		$iva_moratorios=$totales[0]["iva_moratorios_vencido"]+$totales[0]["iva_moratorios_por_vencer"];
		$comisiones=$totales[0]["comisiones_vencido"]+$totales[0]["comisiones_por_vencer"];
		$iva_comisiones=$totales[0]["iva_comisiones_vencido"]+$totales[0]["iva_comisiones_por_vencer"];

		$plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>'cartera_vencida'));
		$polizasAutomaticas=PolizasAutomaticas::model()->findAll("nombre_poliza=:nombre_poliza",array(':nombre_poliza'=>$plantilla->nombre_poliza));

		$success=true;
		//CARGOS
		foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
			if(!isset($polizaAutomatica->id_cuenta_cargo) || $polizaAutomatica->id_cuenta_cargo==0){
				continue;
			}
			//Se obtiene el monto
			switch ($polizaAutomatica->concepto) {
				case 'saldo_capital':
					$monto=$capital;
					break;
				case 'saldo_comisiones_financiadas':
					$monto=$comisiones_financiadas;
					break;
				case 'saldo_iva_comisiones_financiadas':
					$monto=$iva_comisiones_financiadas;
					break;
				case 'saldo_interes':
					$monto=$interes;
					break;
				case 'saldo_iva_interes':
					$monto=$iva_interes;
					break;
				case 'saldo_comisiones':
					$monto=$comisiones;
					break;
				case 'saldo_iva_comisiones':
					$monto=$iva_comisiones;
					break;
				case 'saldo_moratorios':
					$monto=$moratorios;
					break;
				case 'saldo_iva_moratorios':
					$monto=$iva_moratorios;
					break;
				case 'saldo_total':
					$monto=$capital+$comisiones_financiadas+$iva_comisiones_financiadas+$interes+$iva_interes+$comisiones+$iva_comisiones+$moratorios+$iva_moratorios;
					break;
			}
			//Se obtiene la cuenta
			$cuenta=$polizaAutomatica->id_cuenta_cargo0;

			//Se desglosa la cuenta
			$params=array(
				'banco'=>$solicitud->id_banco,
				'moneda'=>$solicitud->id_moneda,
				'producto'=>$solicitud->id_producto,
				'producto_factoraje'=>null,
				'acreedor'=>null,
				'proveedor'=>null,
				'deudor'=>$solicitud->id_deudor,
				'cliente'=>$cliente->id,
				'empleado'=>null,
                'solicitud'=>$solicitud->id,
                'concepto'=>$polizaAutomatica->concepto
			);
			$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
			if($desglose['success']){
				$cuentaCargo=CatalogoCuentas::model()->findByPk($desglose["id"]);
			}else{
				$success=false;
				$msg=$desglose["msg"];
			}

			//Se genera la poliza
			if($success && $monto>0){
				$poliza=new PolizasDiario();
				$poliza->tipo=$tipo;
				$poliza->operacion=$operacion;
				$poliza->relacionado=$solicitud->id;
				$poliza->id_usuario=Yii::app()->user->getId();
				$poliza->fecha=$fecha;
				$poliza->poliza=$clavePoliza;
				$poliza->id_cuenta=$cuentaCargo->id;
				$poliza->cargo=$monto;
				$poliza->concepto=$concepto;
				$poliza->concepto_importe=$polizaAutomatica->concepto;
				$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                $poliza->id_cliente=$this->id_cliente;
                $poliza->id_solicitud=$this->id;
				$success=$poliza->save();
				if(!$success){
					break;
				}
			}
		}
		if($success){
			//ABONOS
			foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
				if(!isset($polizaAutomatica->id_cuenta_abono) || $polizaAutomatica->id_cuenta_abono==0){
					continue;
				}
				//Se obtiene el monto
				switch ($polizaAutomatica->concepto) {
					case 'saldo_capital':
						$monto=$capital;
						break;
					case 'saldo_comisiones_financiadas':
						$monto=$comisiones_financiadas;
						break;
					case 'saldo_iva_comisiones_financiadas':
						$monto=$iva_comisiones_financiadas;
						break;
					case 'saldo_interes':
						$monto=$interes;
						break;
					case 'saldo_iva_interes':
						$monto=$iva_interes;
						break;
					case 'saldo_comisiones':
						$monto=$comisiones;
						break;
					case 'saldo_iva_comisiones':
						$monto=$iva_comisiones;
						break;
					case 'saldo_moratorios':
						$monto=$moratorios;
						break;
					case 'saldo_iva_moratorios':
						$monto=$iva_moratorios;
						break;
					case 'saldo_total':
						$monto=$capital+$comisiones_financiadas+$iva_comisiones_financiadas+$interes+$iva_interes+$comisiones+$iva_comisiones+$moratorios+$iva_moratorios;
						break;
				}
				//Se obtiene la cuenta
				$cuenta=$polizaAutomatica->id_cuenta_abono0;

				//Se desglosa la cuenta
				$params=array(
					'banco'=>$solicitud->id_banco,
					'moneda'=>$solicitud->id_moneda,
					'producto'=>$solicitud->id_producto,
					'producto_factoraje'=>null,
					'acreedor'=>null,
					'proveedor'=>null,
					'deudor'=>$solicitud->id_deudor,
					'cliente'=>$cliente->id,
					'empleado'=>null,
                    'solicitud'=>$solicitud->id,
                    'concepto'=>$polizaAutomatica->concepto
				);
				$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
				if($desglose['success']){
					$cuentaAbono=CatalogoCuentas::model()->findByPk($desglose["id"]);
				}else{
					$success=false;
					$msg=$desglose["msg"];
				}

				//Se genera la poliza
				if($success && $monto>0){
					$poliza=new PolizasDiario();
					$poliza->tipo=$tipo;
					$poliza->operacion=$operacion;
					$poliza->relacionado=$solicitud->id;
					$poliza->id_usuario=Yii::app()->user->getId();
					$poliza->fecha=$fecha;
					$poliza->poliza=$clavePoliza;
					$poliza->id_cuenta=$cuentaAbono->id;
					$poliza->abono=$monto;
					$poliza->concepto=$concepto;
					$poliza->concepto_importe=$polizaAutomatica->concepto;
					$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                    $poliza->id_cliente=$this->id_cliente;
                    $poliza->id_solicitud=$this->id;
					$success=$poliza->save();
					if(!$success){
						break;
					}
				}
			}
		}
		return $success;
	}

	public function createPolizaDiarioVigente(){
		$modelClaves=Claves::model()->find();

		$fecha=date("Y-m-d",strtotime($this->fecha_cartera_vencida));
		$tipo="Diario";
		$operacion="cartera_vigente";
		$concepto="Envío a Cartera Vigente del crédito ".$this->clave;

		$data=array(
			'tipo'=>'poliza',
			'tipo_poliza'=>substr($tipo,0,1),
			'year'=>date("Y",strtotime($fecha)),
			'mes'=>date("m",strtotime($fecha)),
		);
		$clavePoliza=$modelClaves->getClave($data);

		$solicitud=$this;

		$cartera=new ReporteCartera();
		$cartera->solicitud=$this->id;
		$data=$cartera->getData();
		$totales=$cartera->getDataTotal();

		$capital=$totales[0]["capital_vencido"]+$totales[0]["capital_por_vencer"];
		$comisiones_financiadas=$totales[0]["comisiones_financiadas_vencido"]+$totales[0]["comisiones_financiadas_por_vencer"];
		$iva_comisiones_financiadas=$totales[0]["iva_comisiones_financiadas_vencido"]+$totales[0]["iva_comisiones_financiadas_por_vencer"];
		$interes=$totales[0]["interes_vencido"]+$totales[0]["interes_por_vencer"];
		$iva_interes=$totales[0]["iva_interes_vencido"]+$totales[0]["iva_interes_por_vencer"];
		$moratorios=$totales[0]["moratorios_vencido"]+$totales[0]["moratorios_por_vencer"];
		$iva_moratorios=$totales[0]["iva_moratorios_vencido"]+$totales[0]["iva_moratorios_por_vencer"];
		$comisiones=$totales[0]["comisiones_vencido"]+$totales[0]["comisiones_por_vencer"];
		$iva_comisiones=$totales[0]["iva_comisiones_vencido"]+$totales[0]["iva_comisiones_por_vencer"];

		//Se toma la misma poliza de cartera vencida pero se utiliza de forma contraria, es decir, los cargos como abonos y viceversa
		$plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>'cartera_vencida'));
		$polizasAutomaticas=PolizasAutomaticas::model()->findAll("nombre_poliza=:nombre_poliza",array(':nombre_poliza'=>$plantilla->nombre_poliza));

		$success=true;
		//CARGOS
		foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
			if(!isset($polizaAutomatica->id_cuenta_abono) || $polizaAutomatica->id_cuenta_abono==0){//Abono en lugar de cargo porque es invertido
				continue;
			}
			//Se obtiene el monto
			switch ($polizaAutomatica->concepto) {
				case 'saldo_capital':
					$monto=$capital;
					break;
				case 'saldo_comisiones_financiadas':
					$monto=$comisiones_financiadas;
					break;
				case 'saldo_iva_comisiones_financiadas':
					$monto=$iva_comisiones_financiadas;
					break;
				case 'saldo_interes':
					$monto=$interes;
					break;
				case 'saldo_iva_interes':
					$monto=$iva_interes;
					break;
				case 'saldo_comisiones':
					$monto=$comisiones;
					break;
				case 'saldo_iva_comisiones':
					$monto=$iva_comisiones;
					break;
				case 'saldo_moratorios':
					$monto=$moratorios;
					break;
				case 'saldo_iva_moratorios':
					$monto=$iva_moratorios;
					break;
				case 'saldo_total':
					$monto=$capital+$comisiones_financiadas+$iva_comisiones_financiadas+$interes+$iva_interes+$comisiones+$iva_comisiones+$moratorios+$iva_moratorios;
					break;
			}
			//Se obtiene la cuenta
			$cuenta=$polizaAutomatica->id_cuenta_abono0;//Abono en lugar de cargo porque es invertido

			//Se desglosa la cuenta
			$params=array(
				'banco'=>$solicitud->id_banco,
				'moneda'=>$solicitud->id_moneda,
				'producto'=>$solicitud->id_producto,
				'producto_factoraje'=>null,
				'acreedor'=>null,
				'proveedor'=>null,
				'deudor'=>$solicitud->id_deudor,
				'cliente'=>$cliente->id,
				'empleado'=>null,
                'solicitud'=>$solicitud->id,
                'concepto'=>$polizaAutomatica->concepto
			);
			$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
			if($desglose['success']){
				$cuentaCargo=CatalogoCuentas::model()->findByPk($desglose["id"]);
			}else{
				$success=false;
				$msg=$desglose["msg"];
			}

			//Se genera la poliza
			if($success && $monto>0){
				$poliza=new PolizasDiario();
				$poliza->tipo=$tipo;
				$poliza->relacionado=$solicitud->id;
				$poliza->id_usuario=Yii::app()->user->getId();
				$poliza->fecha=$fecha;
				$poliza->poliza=$clavePoliza;
				$poliza->id_cuenta=$cuentaCargo->id;
				$poliza->cargo=$monto;
				$poliza->concepto=$concepto;
				$poliza->concepto_importe=$polizaAutomatica->concepto;
				$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                $poliza->id_cliente=$this->id_cliente;
                $poliza->id_solicitud=$this->id;
				$success=$poliza->save();
				if(!$success){
					break;
				}
			}
		}

		if($success){
			//ABONOS
			foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
				if(!isset($polizaAutomatica->id_cuenta_cargo) || $polizaAutomatica->id_cuenta_cargo==0){//Cargo en lugar de abono porque es invertido
					continue;
				}
				//Se obtiene el monto
				switch ($polizaAutomatica->concepto) {
					case 'saldo_capital':
						$monto=$capital;
						break;
					case 'saldo_comisiones_financiadas':
						$monto=$comisiones_financiadas;
						break;
					case 'saldo_iva_comisiones_financiadas':
						$monto=$iva_comisiones_financiadas;
						break;
					case 'saldo_interes':
						$monto=$interes;
						break;
					case 'saldo_iva_interes':
						$monto=$iva_interes;
						break;
					case 'saldo_comisiones':
						$monto=$comisiones;
						break;
					case 'saldo_iva_comisiones':
						$monto=$iva_comisiones;
						break;
					case 'saldo_moratorios':
						$monto=$moratorios;
						break;
					case 'saldo_iva_moratorios':
						$monto=$iva_moratorios;
						break;
					case 'saldo_total':
						$monto=$capital+$comisiones_financiadas+$iva_comisiones_financiadas+$interes+$iva_interes+$comisiones+$iva_comisiones+$moratorios+$iva_moratorios;
						break;
				}
				//Se obtiene la cuenta
				$cuenta=$polizaAutomatica->id_cuenta_cargo0;//Cargo en lugar de abono porque esta invertido

				//Se desglosa la cuenta
				$params=array(
					'banco'=>$solicitud->id_banco,
					'moneda'=>$solicitud->id_moneda,
					'producto'=>$solicitud->id_producto,
					'producto_factoraje'=>null,
					'acreedor'=>null,
					'proveedor'=>null,
					'deudor'=>$solicitud->id_deudor,
					'cliente'=>$cliente->id,
					'emplado'=>null,
                    'solicitud'=>$solicitud->id,
                    'concepto'=>$polizaAutomatica->concepto
				);
				$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
				if($desglose['success']){
					$cuentaAbono=CatalogoCuentas::model()->findByPk($desglose["id"]);
				}else{
					$success=false;
					$msg=$desglose["msg"];
				}

				//Se genera la poliza
				if($success && $monto>0){
					$poliza=new PolizasDiario();
					$poliza->tipo=$tipo;
					$poliza->relacionado=$solicitud->id;
					$poliza->id_usuario=Yii::app()->user->getId();
					$poliza->fecha=$fecha;
					$poliza->poliza=$clavePoliza;
					$poliza->id_cuenta=$cuentaAbono->id;
					$poliza->abono=$monto;
					$poliza->concepto=$concepto;
					$poliza->concepto_importe=$polizaAutomatica->concepto;
					$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                    $poliza->id_cliente=$this->id_cliente;
                    $poliza->id_solicitud=$this->id;
					$success=$poliza->save();
					if(!$success){
						break;
					}
				}
			}
		}
		return $success;
	}

	public function createPolizaDiarioUPReestructura(){
        $modelClaves=Claves::model()->find();
        $fecha=date("Y-m-d",strtotime($this->fecha_disposicion));
        $tipo="Diario";
        $operacion="utilidad_perdida_reestructura";
        $concepto="Reestructura de la solicitud ".$this->clave;
        $solicitud=$this;
        $cliente=$this->id_cliente0;

        $data=array(
            'tipo'=>'poliza',
            'tipo_poliza'=>substr($tipo,0,1),
            'year'=>date("Y",strtotime($fecha)),
            'mes'=>date("m",strtotime($fecha)),
        );
        $clavePoliza=$modelClaves->getClave($data);

        $plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>'utilidad_perdida_reestructura'));
        $polizasAutomaticas=PolizasAutomaticas::model()->findAll("nombre_poliza=:nombre_poliza",array(':nombre_poliza'=>$plantilla->nombre_poliza));
        $success=true;

        $conceptos=$this->getUtilidadPerdidaReestructura();

        //CARGOS
        foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
            if(!isset($polizaAutomatica->id_cuenta_cargo) || $polizaAutomatica->id_cuenta_cargo==0){
                continue;
            }
            //Se obtiene el monto
            $monto=0;
            switch ($polizaAutomatica->concepto) {
                case 'utilidad_reestructura':
                    $monto=$conceptos["utilidad"];
                    break;
                case 'perdida_reestructura':
                    $monto=$conceptos["perdida"];
                    break;
            }

            //Se obtiene la cuenta
            $cuenta=$polizaAutomatica->id_cuenta_cargo0;

            //Se desglosa la cuenta
            $params=array(
                'banco'=>$solicitud->id_banco,
                'moneda'=>$solicitud->id_moneda,
                'producto'=>$solicitud->id_producto,
                'producto_factoraje'=>null,
                'acreedor'=>null,
                'proveedor'=>null,
                'deudor'=>$solicitud->id_deudor,
                'cliente'=>$cliente->id,
                'empleado'=>null,
                'solicitud'=>$solicitud->id,
                'concepto'=>$polizaAutomatica->concepto
            );
            $desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
            if($desglose['success']){
                $cuentaCargo=CatalogoCuentas::model()->findByPk($desglose["id"]);
            }else{
                $success=false;
                $msg=$desglose["msg"];
            }

            //Se genera la poliza
            if($success && $monto>0){
                $poliza=new PolizasDiario();
                $poliza->tipo=$tipo;
                $poliza->operacion=$operacion;
                $poliza->relacionado=$this->id;
                $poliza->id_usuario=Yii::app()->user->getId();
                $poliza->fecha=$fecha;
                $poliza->poliza=$clavePoliza;
                $poliza->id_cuenta=$cuentaCargo->id;
                $poliza->cargo=$monto;
                $poliza->concepto=$concepto;
                $poliza->concepto_importe=$polizaAutomatica->concepto;
                $poliza->plantilla=$polizaAutomatica->nombre_poliza;
                $poliza->id_cliente=$this->id_cliente;
                $poliza->id_solicitud=$this->id;
                $success=$poliza->save();
                if(!$success){
                    break;
                }
            }
        }
        if($success){
            //ABONOS
            foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
                if(!isset($polizaAutomatica->id_cuenta_abono) || $polizaAutomatica->id_cuenta_abono==0){
                    continue;
                }
                //Se obtiene el monto
                $monto=0;
                switch ($polizaAutomatica->concepto) {
                    case 'utilidad_reestructura':
                        $monto=$conceptos["utilidad"];
                        break;
                    case 'perdida_reestructura':
                        $monto=$conceptos["perdida"];
                        break;
                }

                //Se obtiene la cuenta
                $cuenta=$polizaAutomatica->id_cuenta_abono0;

                //Se desglosa la cuenta
                $params=array(
                    'banco'=>$solicitud->id_banco,
                    'moneda'=>$solicitud->id_moneda,
                    'producto'=>$solicitud->id_producto,
                    'producto_factoraje'=>null,
                    'acreedor'=>null,
                    'proveedor'=>null,
                    'deudor'=>$solicitud->id_deudor,
                    'cliente'=>$cliente->id,
                    'empleado'=>null,
                    'solicitud'=>$solicitud->id,
                    'concepto'=>$polizaAutomatica->concepto
                );
                $desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
                if($desglose['success']){
                    $cuentaAbono=CatalogoCuentas::model()->findByPk($desglose["id"]);
                }else{
                    $success=false;
                    $msg=$desglose["msg"];
                }

                //Se genera la poliza
                if($success && $monto>0){
                    $poliza=new PolizasDiario();
                    $poliza->tipo=$tipo;
                    $poliza->operacion=$operacion;
                    $poliza->relacionado=$this->id;
                    $poliza->id_usuario=Yii::app()->user->getId();
                    $poliza->fecha=$fecha;
                    $poliza->poliza=$clavePoliza;
                    $poliza->id_cuenta=$cuentaAbono->id;
                    $poliza->abono=$monto;
                    $poliza->concepto=$concepto;
                    $poliza->concepto_importe=$polizaAutomatica->concepto;
                    $poliza->plantilla=$polizaAutomatica->nombre_poliza;
                    $poliza->id_cliente=$this->id_cliente;
                    $poliza->id_solicitud=$this->id;
                    $success=$poliza->save();
                    if(!$success){
                        break;
                    }
                }
            }
        }

        return $success;
    }

    public function getUtilidadPerdidaReestructura(){
        $reestructura=HistoricoReestructuras::model()->find("id_solicitud_nueva=$this->id");
        $vlo=$reestructura->capital_reestructurado+$reestructura->interes_reestructurado;
        $vlo=$reestructura->capital_reestructurado+$reestructura->interes_reestructurado+$reestructura->monto_adicional;
        $solicitudAnterior=Solicitudes::model()->findByPk($reestructura->id_solicitud_original);
        $tir=$solicitudAnterior->tir/100;
        $vlr=0;
        $amortizaciones=Amortizaciones::model()->findAll("id_solicitud=$this->id");
        foreach($amortizaciones as $amortizacion){
            if($amortizacion->numero_amortizacion>0){
                $vlr+=($amortizacion->pago_total/pow((1+($tir)),$amortizacion->numero_amortizacion));
            }
        }
        $vlr-=$reestructura->monto_adicional;
        if($vlr>=$vlo){
            $utilidad=$vlr-$vlo;
            $perdida=0;
        }else{
            $utilidad=0;
            $perdida=$vlo-$vlr;
        }
        return array(
            'utilidad'=>$utilidad,
            'perdida'=>$perdida
        );
    }

	public function getClaveOtorganteEncabezado($aval=null,$accionista=null){
		return Empresa::model()->find()->clave_otorgante;
	}

	//REPORTE DE CIRCULO DE CRÉDITO DE PERSONAS MORALES
	public function getClaveOtorganteEncabezadoPM($aval=null,$accionista=null){
		return Empresa::model()->find()->clave_otorgante_pm;
	}
	public function getClaveOtorgantePFPM($clave=null,$tPersona=null){
		$conexion = 'servicioscc';
		return CuentasUsuariosPass::model()->find("producto_conexion=:conexion and tipo_persona=:tPersona",array(":conexion"=>$conexion,":tPersona"=>$tPersona))->clave;
	}
	public function getClaveOtorganteAnteriorEncabezado($aval=null,$accionista=null){
		return "";
	}
	public function getNombreOtorganteEncabezado($aval=null,$accionista=null){
		return Empresa::model()->find()->nombre_otorgante;
	}
	public function getInstitucionEncabezado($aval=null,$accionista=null){
		return Empresa::model()->find()->id_tipo_institucion0->clave;
	}
	public function getFormatoEncabezado($aval=null,$accionista=null){
		return "1";
	}
	public function getFechaGeneracionEncabezado($aval=null,$accionista=null){
		return date("dmY",strtotime($this->fechaCorte));
	}
	public function getFechaCorteCirculo($aval=null,$accionista=null){
		return date("Ymd",strtotime($this->fechaCorte));
	}
	public function getPeriodoReportaEncabezado($aval=null,$accionista=null){
		return date("mY",strtotime($this->fechaCorte));
	}
	public function getVersionEncabezado($aval=null,$accionista=null){
		return "05";
	}
	public function getRfcEmpresa($aval=null,$accionista=null){
		$rfc= Clientes::model()->findbyPk($this->id_cliente)->rfc;
		//var_dump($this->id,$this->id_cliente,$this->id_cliente0->rfc," entro ");
		return $rfc;
	}
	public function getCurpEmpresa($aval=null,$accionista=null){
		return $this->id_cliente0->curp;
	}
	public function getRazonSocialEmpresa($aval=null,$accionista=null){
		return $this->id_cliente0->id_pld_cliente0->razon_social;
	}
	public function getNombre1Empresa($aval=null,$accionista=null){
		if ($this->id_cliente0->actividad_empresarial==1) {
			return $this->id_cliente0->nombre;
		}else{
			return "";
		}
	}
	public function getNombre2Empresa($aval=null,$accionista=null){
		if ($this->id_cliente0->actividad_empresarial==1) {
			return $this->id_cliente0->nombre2;
		}else{
			return "";
		}
	}
	public function getApellidoPaternoEmpresa($aval=null,$accionista=null){
		if ($this->id_cliente0->actividad_empresarial==1) {
			return $this->id_cliente0->id_pld_cliente0->apellido_paterno;
		}else{
			return "";
		}
	}
	public function getApellidoMaternoEmpresa($aval=null,$accionista=null){
		if ($this->id_cliente0->actividad_empresarial==1) {
			return $this->id_cliente0->id_pld_cliente0->apellido_materno;
		}else{
			return "";
		}
	}
	public function getNacionalidadEmpresa($aval=null,$accionista=null){
		$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
		return $pais->iso;
	}
	public function getCalificacionCarteraEmpresa($aval=null,$accionista=null){//pendientePreguntar
		$calificacion=$this->id_cliente0->id_calificacion_cartera;
		$nombre=CalificacionesCartera::model()->find('id=:id',array(':id'=>$calificacion));
		return $nombre->clave;
	}
	public function getClaveBanxico1Empresa($aval=null,$accionista=null){//pendientePreguntar
		$actividad_economica=ActividadesEconomicas::model()->find("id=:id",array(':id'=>$this->id_cliente0->id_pld_cliente0->actividad_economica));
		
		// Nota: Cuando no se tiene el dato Entidades Financieras deben reportar siette veces el numero nueve.
		$return = (($actividad_economica->clave ?? "") != "" ? $actividad_economica->clave : "9999999");
		
		return $return;


	}
	public function getClaveBanxico2Empresa($aval=null,$accionista=null){
		// $actividad_economica=ActividadesEconomicasScian::model()->find("id=:id",array(':id'=>$this->id_cliente0->id_pld_cliente0->actividad_economica_scian));
		// $return= $actividad_economica->clave;
		// return $return;
	}
	public function getClaveBanxico3Empresa($aval=null,$accionista=null){
		return "";
	}
	public function getDireccion1Empresa($aval=null,$accionista=null){
		return trim(trim($this->id_cliente0->calle." ".$this->id_cliente0->numero_exterior)." ".$this->id_cliente0->numero_interior);
		if ($this->id_cliente0->calle == "" AND $this->id_cliente0->numero_exterior == "" AND $this->id_cliente0->numero_interior == "") {
			return 'Domicilio Conocido.';
		}
	}
	public function getDireccion2Empresa($aval=null,$accionista=null){
		return "";
	}
	public function getColoniaPoblacionEmpresa($aval=null,$accionista=null){
		return $this->id_cliente0->colonia;
	}
	public function getDelegacionMunicipioEmpresa($aval=null,$accionista=null){
		return $this->id_cliente0->municipio;
	}
	public function getCiudadEmpresa($aval=null,$accionista=null){
		if (isset($this->id_cliente0->localidad) AND $this->id_cliente0->localidad != "") {
			return $this->id_cliente0->localidad;
		}else{
			return $this->id_cliente0->municipio;
		}
	}
	public function getEstadoEmpresa($aval=null,$accionista=null){
		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$this->id_cliente0->estado));

		return $estado->clave_buro;
	}
	public function getEstadoEmpresaPM($aval=null,$accionista=null){
		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$this->id_cliente0->estado));

		return $estado->clave_circulo_pm;
	}
	public function getCodigoPostalEmpresa($aval=null,$accionista=null){
		return $this->id_cliente0->codigo_postal;
	}
	public function getTelefonoEmpresa($aval=null,$accionista=null){
		return $this->id_cliente0->telefono;
	}
	public function getExtensionEmpresa($aval=null,$accionista=null){
		return "";
	}
	public function getFaxEmpresa($aval=null,$accionista=null){
		return "";
	}
	public function getTipoClienteEmpresa($aval=null,$accionista=null){
		if($this->id_cliente0->tipo_persona=="Persona Moral"){
			$return="1";
		}else{
			$return="2";
		}
		return $return;
	}
	public function getEstadoExtranjeroEmpresa($aval=null,$accionista=null){
		return "";
	}
	public function getPaisEmpresa($aval=null,$accionista=null){
		$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
		return $pais->iso;
	}
	//seccion de accionista
	public function getAccionista() {
		$contacto=Contactos::model()
			->find(
				array(
					"condition"=>"id_cliente=:cliente AND acciones != 0", // Se pone la condicion de que las acciones de los contactos sean mayor de 0 para ser considerado accionista
					'order'=>'acciones DESC',
					'params'=>array(
						':cliente'=>$this->id_cliente0->id
					)
				)
			);
	
		if ($contacto !== NULL) {
			return $contacto;
		}
	
		return AccionistasClientes::model()
			->find(
				array(
					"condition"=>"id_cliente=:cliente",
					'order'=>'acciones DESC',
					'params'=>array(
						':cliente'=>$this->id_cliente0->id
					)
				)
			);
	}
	
	public function getRfcAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));

		if (isset($contacto) AND $contacto != "") {
		   return $contacto->rfc;
		}else{
			return $accionista->rfc;
		}
	}
	public function getCurpAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			return $contacto->curp;
		}else{
			return $accionista->curp;
		}
	}
	public function getNombreEmpresaAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			 if($contacto->tipo_persona=="Persona Moral"){
				$return=$contacto->nombre;
			}
		}else{
			 if($accionista->tipo_persona=="Persona Moral"){
				$return=$accionista->nombre1;
			}
		}
		return $return;
	}
	public function getNombre1Accionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				if($contacto->tipo_persona!="Persona Moral"){
					$return=$contacto->nombre;
				}
			}else{
				 if($accionista->tipo_persona!="Persona Moral"){
					$return=$accionista->nombre1;
				}
			}
		return $return;
	}
	public function getNombre2Accionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				if($contacto->tipo_persona!="Persona Moral"){
					$return=$contacto->nombre2;
				}
			}else{
				if($accionista->tipo_persona!="Persona Moral"){
					$return=$accionista->nombre2;
				}
			}
		return $return;
	}
	public function getApellidoPaternoAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				if($contacto->tipo_persona!="Persona Moral"){
					$return=$contacto->apellido_paterno;
				}
			}else{
				if($accionista->tipo_persona!="Persona Moral"){
					$return=$accionista->apellido_paterno;
				}
			}
		return $return;
	}
	public function getApellidoMaternoAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				if($contacto->tipo_persona!="Persona Moral"){
					$return=$contacto->apellido_materno;
				}
			}else{
				if($accionista->tipo_persona!="Persona Moral"){
					$return=$accionista->apellido_materno;
				}
			}
		return $return;
	}
	public function getPorcentajeAccionesAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente AND acciones > 0",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				return $contacto->acciones;
			}else{
			   return $accionista->acciones;
			}
	}
	public function getDireccion1Accionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				$calle=$contacto->calle." ".$contacto->numero_exterior." ".$contacto->numero_interior;
				if (!isset($calle) and $calle != "") {
					return "Domicilio Conocido";
				}else{
					return $calle;
				}
			}else{
				$calle= $accionista->calle." ".$accionista->numero_exterior." ".$accionista->numero_interior;
				if (!isset($calle) and $calle != "") {
					return "Domicilio Conocido";
				}else{
					return $calle;
				}
			}

	}
	public function getDireccion2Accionista($aval=null,$accionista=null){
		return "";
	}
	public function getColoniaAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				return $contacto->colonia;
			}else{
				return $accionista->colonia;
			}
	}
	public function getDelegacionMunicipioAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				return $contacto->municipio;
			}else{
				return $accionista->municipio;
			}
	}
	public function getCiudadAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			if (isset($contacto->localidad) AND $contacto->localidad != "") {
				return $contacto->localidad;
			}else{
				return $contacto->municipio;
			}
		}else{
		   if (isset($accionista->localidad) AND $accionista->localidad != "") {
				return $accionista->localidad;
			}else{
				return $accionista->municipio;
			}
		}
	}
	public function getEstadoAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));

		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$contacto->estado));

		$estado2=Estados::model()->find("estado=:estado",array(':estado'=>$accionista->estado));
		if (isset($contacto) AND $contacto != "") {
			return $estado->clave_buro;
		}else{
			return $estado2->clave_buro;
		}
	}
	public function getCodigoPostalAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				return $contacto->codigo_postal;
			}else{
				return $accionista->codigo_postal;
			}
	}
	public function getTelefonoAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				return $contacto->telefono;
			}else{
				return $accionista->telefono;
			}
	}
	public function getExtensionAccionista($aval=null,$accionista=null){
		return "";
	}
	public function getFaxAccionista($aval=null,$accionista=null){
		return "";
	}
	public function getTipoClienteAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			if (!is_null($contacto->tipo_persona)) {
			   if($contacto->tipo_persona=="Persona Moral"){
					$return="1";
				}else{
					$return="2";
				}
				return $return;
			}

		}else{
			if (!is_null($accionista->tipo_persona)) {
				 if($accionista->tipo_persona=="Persona Moral"){
				$return="1";
				}else{
					$return="2";
				}
				return $return;
			}

		}
	}
	public function getEstadoExtranjeroAccionista($aval=null,$accionista=null){
		return "";
	}
	public function getPaisAccionista($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$pais=Paises::model()->find("pais=:pais",array(':pais'=>$contacto->pais));

		$pais2=Paises::model()->find("pais=:pais",array(':pais'=>$accionista->pais));
		if (isset($contacto) AND $contacto != "") {
			return $pais->iso;
		}else{
			return $pais2->iso;
		}
	}
	//seccion del credito
	public function getRfcCredito($aval=null,$accionista=null){
        if($this->id_cliente0->tipo_persona=="Persona Moral") {

            if(strlen($this->id_cliente0->rfc)!=12)
            {
                $this->id_cliente0->rfc="";
            }
        }else{

            if(strlen($this->id_cliente0->rfc)!=13)
            {
                $this->id_cliente0->rfc="";

            }
        }
		return $this->id_cliente0->rfc;
	}
	public function getExperienciasCrediticiasCredito($aval=null,$accionista=null){
		return "";
	}
	public function getNumeroContratoCredito($aval=null,$accionista=null){
		return $this->contrato;
	}
	public function getNumeroContratoAnteriorCredito($aval=null,$accionista=null){
		return "";
	}
	public function getFechaAperturaCredito($aval=null,$accionista=null){
		return date("dmY",strtotime($this->fecha_disposicion));
	}

	/**
	 * @param object $solicitud representa una solicitud
	 */
	public static function getPlazoMesesCreditoStatic($solicitud, $rounded = true) {
		if (gettype($solicitud) !== 'object') {
            throw new TypeError('Argument 1 passed must be an object, ' . gettype($solicitud) . ' given');
        }

		// Amortizaciones mensuales
		if (in_array($solicitud->id_tipo_amortizacion, [8])) {
			return $solicitud->plazo_autorizado * 12;
		}

		// Amortizaciones semestrales
		else if (in_array($solicitud->id_tipo_amortizacion, [7,18,19,30,37])) {
			return $solicitud->plazo_autorizado * 6;
		}

		// Amortizaciones trimestrales
		else if (in_array($solicitud->id_tipo_amortizacion, [6])) {
			return $solicitud->plazo_autorizado * 3;
		}

		// Amortizaciones mensuales
		else if (in_array($solicitud->id_tipo_amortizacion, [5,11,12,15,16,17,25,26,29,32,33,36,40])) {
			return $solicitud->plazo_autorizado;
		}

		// Amortizaciones quincenales
		else if (in_array($solicitud->id_tipo_amortizacion, [4,13,20,27,34, /*3 Catorcenal se omite y se deja que se calcule en abse a días */])) {
			return $solicitud->plazo_autorizado / 2;
		}

		// Los tipos de amortizacion con PAGO UNICO se calcula en base al plazo autorizado (Meses)
		else if (in_array($solicitud->id_tipo_amortizacion, [10])) {
			return $solicitud->plazo_autorizado;
		}

		// Amortizaciones catorcenales, semanales, diarias, etc. (Aqui se calculan los meses con los dias, asi que es un aproximado)
		else {
			$fecha_vencimiento = (
				isset($solicitud->fecha_ultimo_vencimiento) && $solicitud->fecha_ultimo_vencimiento != 0
				? $solicitud->fecha_ultimo_vencimiento
				: $solicitud->fecha_vencimiento
			);

			$dias = round((strtotime($fecha_vencimiento) - strtotime($solicitud->fecha_disposicion)) / 60 / 60 / 24);

			if (in_array($solicitud->id_tipo_amortizacion, [14])) {
				$dias=$solicitud->plazo_autorizado;
			}

			$meses=$dias/30.4;

			if ($rounded) {
				return round($meses, 0);
			}

			return $meses;
		}
	}

	/**
	 * @param object $aval representa un aval de la solicitud (Actualmente no se usa)
	 * @param object $accionista representa un accionista de la solicitud (Actualmente no se usa)
	 * @param object $customSolicitud representa un objeto de solicitud, se usa para cuando se quiere usar la funcion pero no se tiene una instancia de Solicitudes
	 *
	 * @return float Devuelve el numero de meses que dura un credito
	 */
	public function getPlazoMesesCredito($aval=null,$accionista=null, $customSolicitud = []) {
		//TODO: Usar la funcion getPlazoMesesCreditoStatic

		// Amortizaciones mensuales
		if (in_array($this->id_tipo_amortizacion, [8])) {
			return $this->plazo_autorizado * 12;
		}

		// Amortizaciones semestrales
		else if (in_array($this->id_tipo_amortizacion, [7,18,19,30,37])) {
			return $this->plazo_autorizado * 6;
		}

		// Amortizaciones trimestrales
		else if (in_array($this->id_tipo_amortizacion, [6])) {
			return $this->plazo_autorizado * 3;
		}

		// Amortizaciones mensuales
		else if (in_array($this->id_tipo_amortizacion, [5,11,12,15,16,17,25,26,29,32,33,36,40])) {
			return $this->plazo_autorizado;
		}

		// Amortizaciones quincenales
		else if (in_array($this->id_tipo_amortizacion, [4,13,20,27,34, /*3 Catorcenal se omite y se deja que se calcule en abse a días */])) {
			return $this->plazo_autorizado / 2;
		}

		// Los tipos de amortizacion con PAGO UNICO se calcula en base al plazo autorizado (Meses)
		else if (in_array($this->id_tipo_amortizacion, [10])) {
			return $this->plazo_autorizado;
		}

		// Amortizaciones catorcenales, semanales, diarias, etc. (Aqui se calculan los meses con los dias, asi que es un aproximado)
		else {
			$fecha_vencimiento = (
				isset($this->fecha_ultimo_vencimiento) && $this->fecha_ultimo_vencimiento != 0
				? $this->fecha_ultimo_vencimiento
				: $this->fecha_vencimiento
			);

			$dias = round((strtotime($fecha_vencimiento) - strtotime($this->fecha_disposicion)) / 60 / 60 / 24);

			if (in_array($this->id_tipo_amortizacion, [14])) {
				$dias=$this->plazo_autorizado;
			}

			$meses=round($dias/30.4,0);

			return $meses;
		}
	}

	public function getTipoCredito($aval=null,$accionista=null){
		return $this->id_producto0->id_tipo_credito0->clave;
	}

	/**
	 * El monto inicial es el monto del crédito otorgado en la apertura
	 * En resumen, el monto autorizado es la cantidad máxima que una institución financiera está dispuesta a prestar,
	 * mientras que el monto entregable es la cantidad real que el prestatario recibe después de considerar todos los
	 * costos y deducciones asociados con el préstamo. 
	 */
	public function getSaldoInicialCredito($aval=null,$accionista=null){
		//Notese que cuando es solidario temporalmente se asignan a la solicitud los datos individuales de cada integrante del grupo de modo que el monto autorizado es de un integrante
		$return=round($this->entregable);
		return $return;
	}

	/**
	 * Tipo de moneda con el que se aperturó el crédito
	 */
	public function getMonedaCredito($aval=null,$accionista=null){
		return $this->id_moneda0->clave_circulo_credito;
	}

	/**
	 * Reportar el total de pagos acordados con el usuario para la liquidación del credito
	 * Unicamente se acepta cero para tipos de credito:
	 *  - Tarjeta de credito empresarial
	 *  - Credito simple y creditos en cuenta corriente
	 *  - Linea de credito
	 *  - Tarjeta de servicio
	 */
	public function getNumeroPagosCredito($aval=null,$accionista=null){
		if (in_array($this->id_producto0->id_tipo_credito0->clave, [1380,6280,6280,6250])) {
			return 0;
		}

		return $this->plazo_autorizado;
	}

	public function getFrecuenciaPagosCredito($aval=null,$accionista=null){
		$return = $this->id_tipo_amortizacion0->dias;

		if ($this->id_tipo_amortizacion == 10) {
		   $mes= $this->plazo_autorizado;
		   $return = round($mes*30.4);
		}
		if ($this->id_tipo_amortizacion == 14) {
		   $return= $this->plazo_autorizado;
		}
		return $return;
	}
	public function getImportePagosCredito($aval=null,$accionista=null, $descontarPagosRealizados = true){
		$periodo=$this->getPeriodoReportaEncabezado();
		$mes=intval(substr($periodo, 0,2));
		$año=intval(substr($periodo, 2));
		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with("id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND YEAR(fecha_amortizacion)=:year AND MONTH(fecha_amortizacion)=:mes",array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes));
		} else {
			$amortizaciones=Amortizaciones::model()->findAll(array(
				"condition" => "
				id_solicitud=:solicitud
					AND DATE(t.fecha_amortizacion)<= DATE(:fechaCorte)
					AND (
						CASE WHEN t.numero_amortizacion = 0 THEN t.pago_total > 0 ELSE TRUE END
					) -- Amortización cero sin comisiones --
				",
				'order' => 't.fecha_amortizacion DESC',
				'limit' => 1,
				'params' => array(
					':solicitud'=>$this->id,
					':fechaCorte'=>$this->fechaCorte,
				)
			));

			if (!count($amortizaciones)) {
				$amortizaciones=Amortizaciones::model()->findAll(array(
					"condition" => "
						id_solicitud=:solicitud
						AND DATE(t.fecha_amortizacion) > DATE(:fechaCorte)
						AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
						AND (
							CASE WHEN t.numero_amortizacion = 0 THEN t.pago_total > 0 ELSE TRUE END
						) -- Amortización cero sin comisiones --
					",
					'order' => 't.fecha_amortizacion ASC',
					'limit' => 1,
					'params' => array(
						':solicitud'=>$this->id,
						':fechaCorte'=>$this->fechaCorte,
						':fechaPago'=> $this->fechaCorte . " 23:59:59",
					)
				));
			}
		}

		if ((bool) $descontarPagosRealizados == false) {
			return round($amortizaciones[count($amortizaciones) - 1]['pago_total'], 0);
		}

		$total=0;
		foreach ($amortizaciones as $amortizacion){
			if ($amortizacion->fecha_pago != null AND $amortizacion->fecha_pago != '0000-00-00 00:00:00' AND strtotime($amortizacion->fecha_pago) <= strtotime($this->fechaCorte)) {
				continue;
			}

			$total=$amortizacion->pago_total;
			$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion->id));
			foreach ($parcialidades as $parcialidad){
				if (strtotime($parcialidad->fecha_pago) <= strtotime($this->fechaCorte)) {
					$total-=$parcialidad->pago_total;
				}
			}
		}

		if ($total < 0) {
			$total=0;
		}
		return round($total,0);
	}

	/**
	 * Es la fecha mas reciente en la que el cliente efectuó un pago
	 */
	public function getFechaUltimoPagoCredito($fechaCorte = null, $formatoFecha = "Ymd", $fechaDummie = "19010101"){
		$periodo = $fechaCorte;

		if (strlen($periodo) === 10) {
			$periodo = $periodo . " 23:59:59";
		}

		// Se hace esta condición solo para compatibilidad
		if ($fechaCorte === null) {
			$periodo=$this->getFechaBM();
			$dia=intval(substr($periodo, 0,2));
			$mes=intval(substr($periodo, 2,2));
			$año=intval(substr($periodo, 4));
			$periodo=$periodo." 23:59:59";
		}

		if(isset($this->id_grupo_cliente)){
			//Notese que toma el id del cliente, pero esto es porque temporalmente se asignan los datos inviduales de cada integrante del grupo a la solicitud y el id_cliente se coloca de que integrante corresponde
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND t.fecha_pago<:periodo","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,'cliente'=>$this->id_cliente,':periodo'=>$periodo)));
			$ultimaAmortizacion=Amortizaciones::model()->with("id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND t.fecha_pago<:periodo AND t.status='Registrado'","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':periodo'=>$periodo)));
		}else{
			$ultimaAmortizacion = Amortizaciones::model()
				->with('id_disposicion0')
				->find(
					array(
						"condition"=>"
							t.id_solicitud = :solicitud
							AND DATE(t.fecha_pago) <= DATE(:periodo)
							AND t.status = 'Registrado'
							OR (
								id_disposicion0.id_solicitud=:solicitud2
								AND t.fecha_pago <= :fechaAmortizacion2
								AND t.status = 'Registrado'
							)
						",
						"order"=>"t.fecha_pago DESC",
						'params'=>array(
							':solicitud'=>$this->id,
							':periodo'=>$periodo,
							':solicitud2'=>$this->id,
							':fechaAmortizacion2'=>$periodo,
						)
					)
				);

			$ultimaParcialidad = ParcialidadesAmortizaciones::model()
				->with("id_amortizacion0.id_disposicion0")
				->find(
					array(
						"condition"=>"
							id_amortizacion0.id_solicitud=:solicitud
							AND DATE(t.fecha_pago) <= DATE(:periodo)
							OR (
								id_disposicion0.id_solicitud=:solicitud2
								AND DATE(t.fecha_pago) <= DATE(:periodo)
							)
						",
						"order"=>"t.fecha_pago DESC",
						'params'=>array(
							':solicitud'=>$this->id,
							':periodo'=>$periodo,
							':solicitud2'=>$this->id,
						)
					)
				);
		}

		$fechaUltimoPago="";
		if(!is_null($ultimaParcialidad)){
			if(!is_null($ultimaAmortizacion)){
				if(strtotime($ultimaParcialidad->fecha_pago)>strtotime($ultimaAmortizacion->fecha_pago)){
					$fechaUltimoPago=date($formatoFecha,strtotime($ultimaParcialidad->fecha_pago));
				}else{
					$fechaUltimoPago=date($formatoFecha,strtotime($ultimaAmortizacion->fecha_pago));
				}
			}else{
				$fechaUltimoPago=date($formatoFecha,strtotime($ultimaParcialidad->fecha_pago));
			}
		}else{
			if(!is_null($ultimaAmortizacion)){
				$fechaUltimoPago=date($formatoFecha,strtotime($ultimaAmortizacion->fecha_pago));
			}
		}
		// Para cuentas que aún no han realizado si primero pago es requerido reportar la fecha dummie 19010101
		if ($fechaUltimoPago == "") {
			return $fechaDummie;
		}


		return self::atributosBDCF('Fecha_Ultimo_Pago', $fechaUltimoPago);
	}

	public function getFechaLiquidacionCreditoCC($fechaCorte = null, $formatoFecha = "Ymd", $fechaDummie = "19010101"){
		$periodo = $fechaCorte;
		$return="";
		$mes_ant=date("Y-m-d",strtotime($periodo."- 1 month"));
		$mes_ant=date("Y-m-d",strtotime($mes_ant."- 15 days"));
		// Se hace esta condición solo para compatibilidad
		if ($fechaCorte === null) {
			$periodo=$this->getFechaBM();
			$dia=intval(substr($periodo, 0,2));
			$mes=intval(substr($periodo, 2,2));
			$año=intval(substr($periodo, 4));
			$periodo=$periodo." 00:00:00";
		}

		$n=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->count(
			array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Calculado'",
			'order'=>'fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		if($n==0){
			$valSol=Solicitudes::model()->find("id=".$this->id." AND status_asignado = 'Pagado'");
			if(isset($valSol)){
				$sql="SELECT * from amortizaciones a 
				WHERE id_solicitud =$valSol->id AND a.numero_amortizacion=$valSol->plazo_autorizado AND 
				date(a.fecha_pago) <= '$periodo' ORDER by a.fecha_amortizacion DESC limit 1";
				$ultimaAmortizacion=Yii::app()->db->createCommand($sql)->queryAll();
				$fechaLiquidacion=$ultimaAmortizacion[0]["fecha_pago"];
				if(!is_null($fechaLiquidacion)){
					$return=date($formatoFecha,strtotime($fechaLiquidacion));
				}
			}
		}
		return $return;
	}

	public function getSaldoInsolutoCreditoMoralCC(){
		$periodo = $this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";

		$return = 0;
		if (isset($this->id_grupo_cliente)) {
			$amortizaciones = Amortizaciones::model()
				->with(
					array('id_grupo_solidario0')
				)
				->findAll(
					array(
						'condition' => "
							id_grupo_solidario0.id_solicitud = :solicitud
							AND id_grupo_solidario0.id_cliente = :cliente
							AND (t.fecha_pago >= :fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
							AND (t.status = 'Calculado' OR t.status = 'Registrado')",
						'order' => 't.fecha_pago ASC',
						'params' => array(
							':solicitud'	=> $this->id,
							':cliente'		=> $this->id_cliente,
							':fechaPago'	=> $fecha_completa
						)
					)
				);
		} else {
			$amortizaciones = Amortizaciones::model()
			->with(
				array(
					'id_disposicion0' => array(
						'select' => 'fecha,id_solicitud'
					),
					'id_solicitud0'=> array(
						'select' => 'fecha_disposicion'
					),
					'rel_parcialidades' => array(
						'select' => 'fecha_pago,pago_capital,pago_interes,pago_moratorios'
					),
				)
			)
			->findAll(
				array(
					'condition' => "(
						t.id_solicitud = :solicitud
						AND id_solicitud0.fecha_disposicion <= :soli
						AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
						AND (t.status='Calculado' OR t.status = 'Registrado')
						OR (
							id_disposicion0.id_solicitud = :solicitud2
							AND (t.status='Calculado' OR t.status = 'Registrado')
							AND id_disposicion0.fecha <= :disposicion
							AND (t.fecha_pago > :fechaPago2 OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
						)
					)",
					'order' => 't.fecha_amortizacion ASC',
					'params'=> array(
						':solicitud' 	=> $this->id,
						':solicitud2'	=> $this->id,
						':disposicion'	=> $periodo,
						':soli' 		=> $periodo,
						':fechaPago' 	=> $fecha_completa,
						':fechaPago2' 	=> $fecha_completa
					)
				)
			);
		}

		foreach ($amortizaciones as $amortizacion){
			$return += $amortizacion->pago_capital;
			
			foreach ($amortizacion->rel_parcialidades as $parcialidad) {
				if (strtotime($parcialidad->fecha_pago) <= strtotime($fecha_completa)) {
					$return -= $parcialidad->pago_capital;
				}
			}
			
		}
		
		
		if($this->id_producto0->id_tipo_producto==8){
			foreach ($amortizaciones as $amortizacion){		
				if (!is_null($amortizacion->fecha_pago) && !($amortizacion->fecha_pago === "0000-00-00 00:00:00") && (strtotime($amortizacion->fecha_pago) <= strtotime($fecha_completa))) {
					continue;
				}

				$return+=$amortizacion->pago_interes;
				foreach ($amortizacion->rel_parcialidades as $parcialidad) {
					if (strtotime($parcialidad->fecha_pago) <= strtotime($fecha_completa)) {
						$return -= $parcialidad->pago_interes;
					}
				}
			}
		}

		$return=round($return);
		return $this-> atributosCDCPF('Cantidad',$return);
	}

	public function getFechaUltimoPagoCreditoPM($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";

		if(isset($this->id_grupo_cliente)){
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND (t.fecha_pago)<=:fecha1","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,'cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));
			$ultimaAmortizacion=Amortizaciones::model()->with(array('id_grupo_solidario0'))->find(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Registrado') AND (t.fecha_pago)<=:fecha1 ",'order'=>'t.fecha_pago DESC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));

		}else{
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0")->find(array("condition"=>"id_amortizacion0.id_solicitud=:solicitud AND (t.fecha_pago)<=:fecha1","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':fecha1'=>$fecha_completa)));
			$ultimaAmortizacion=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->find(array('condition'=>"(t.id_solicitud=:solicitud AND t.status='Registrado' AND id_solicitud0.fecha_disposicion<=:soli AND (t.fecha_pago)<=:fecha1  OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.status='Registrado' AND id_disposicion0.fecha<=:disposicion AND (t.fecha_pago)<=:fecha2
		))",'order'=>'t.fecha_pago DESC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':disposicion'=>$periodo,':soli'=>$periodo,':fecha1'=>$fecha_completa,':fecha2'=>$fecha_completa)));
		}

		if(!is_null($ultimaAmortizacion)){
			if(!is_null($ultimaParcialidad)){
				if(strtotime($ultimaParcialidad)>strtotime($ultimaAmortizacion)){
					$return=date("dmY",strtotime($ultimaParcialidad->fecha_pago));
				}else{
					$return=date("dmY",strtotime($ultimaAmortizacion->fecha_pago));
				}
			}else{
				$return=date("dmY",strtotime($ultimaAmortizacion->fecha_pago));
			}
		}else{
			$return="";
		}

		$return=$return;
		return self::atributosBDCF('Fecha_Ultimo_Pago',$return);
	}
	public function getFechaReestructuraCredito($aval=null,$accionista=null){
		if (isset($this->id_reestructura0->fecha_solicitud) && ($this->id_reestructura0->fecha_solicitud != "0000-00-00 00:00:00")) {
			return date("dmY",strtotime($this->id_reestructura0->fecha_solicitud));
		} else {
			return "";
		}
	}
	public function getPagoEfectivoCredito($aval=null,$accionista=null){
		return "";//Pendiente
	}
	public function getFechaLiquidacionCredito($aval=null,$accionista=null){
		$n=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->count(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Calculado'",'order'=>'fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		if($n==0){
			$ultimaAmortizacion=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->find(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Registrado'",'order'=>'fecha_pago DESC','params'=>array(':solicitud'=>$this->id)));
			if(!is_null($ultimaAmortizacion)){
				$return=date("dmY",strtotime($ultimaAmortizacion->fecha_pago));
			}
		}
		return $return;
	}
	public function getQuitaCredito($aval=null,$accionista=null){
		return "";
	}
	public function getDacionCredito($aval=null,$accionista=null){
		return "";
	}
	public function getQuebrantoCredito($aval=null,$accionista=null){
		$return = "";
		if ($this->status_asignado == "Quebrantado") {
			$amortizacionesQuebrantadas=Amortizaciones::model()
				->with(array('id_grupo_solidario0','id_disposicion0'))
				->findAll(
					array(
						'condition'=>"
							(
								t.id_solicitud=:solicitud
								OR id_grupo_solidario0.id_solicitud=:solicitud
								OR id_disposicion0.id_solicitud=:solicitud
							) AND ( t.status='Quebrantado' )",
						'params'=>array(
							':solicitud'=>$this->id
						)
					)
				);

			$sumaTotalQuebranto = 0;
			foreach ($amortizacionesQuebrantadas as $amortizacionQuebrantada) {
				$sumaTotalQuebranto += $amortizacionQuebrantada->pago_total;
			}
			$return = $sumaTotalQuebranto;
			return round($return);
		}

		return $return;
	}
	public function getClaveObservacionCredito($aval=null,$accionista=null){
		return $this->id_clave_observacion0->clave;
	}
	public function getultimaAmortizacionStatus() {
		if (isset($this->_ultimaAmortizacionStatus)) {
			return $this->_ultimaAmortizacionStatus;
		}

		$ultimaAmortizacion=Amortizaciones::model()->find(array('condition'=>"t.id_solicitud=:solicitud AND DATE(t.fecha_amortizacion) <= DATE('{$this->fechaCorte}')", 'order'=>'fecha_amortizacion DESC', 'params'=>array(':solicitud'=>$this->id)));
		$this->_ultimaAmortizacionStatus = $ultimaAmortizacion->status;
		return $ultimaAmortizacion->status;
	}
	public function getEspecialesCredito($aval=null,$accionista=null){
		return "";
	}
	public function getFechaPrimerIncumplimientoCredito($aval=null,$accionista=null){
		if(isset($this->id_grupo_cliente)){
			$primeraAmortizacionMoratorios=Amortizaciones::model()->with(array('id_grupo_solidario0'))->find(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND IFNULL(t.pago_moratorios,0)>0",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente)));
		}else{
			$primeraAmortizacionMoratorios = Amortizaciones::model()
			->with(
				array('id_disposicion0')
			)->find(
				array(
					'condition'=>"
						(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud)
						AND t.fecha_pago > t.fecha_amortizacion
						AND fecha_pago <= :fecha_corte",
					'order'=>'t.fecha_amortizacion ASC',
					'params'=>array(
						':solicitud'=>$this->id,
						':fecha_corte'=>$this->fechaCorte
					)
				)
			);

			// Si no hay ni una amortizacion pagada a destiempo entonces hacemos otra validacion
			// verificamos que la primer
		}

		$return = "00000000";
		if(!is_null($primeraAmortizacionMoratorios)){
			$return=date("dmY",strtotime($primeraAmortizacionMoratorios->fecha_amortizacion));
		}
		return $return;
	}
	public function getFechaPrimerIncumplimientoCreditoPF($aval=null,$accionista=null, $fechaDummie = "19010101", $formato = 'Ymd'){
		$sql = 
		"	SELECT fecha_amortizacion
			FROM amortizaciones
			WHERE id_solicitud = $this->id
				AND DATE(fecha_amortizacion) <= DATE('{$this->fechaCorte}')
				AND (DATE(fecha_amortizacion) < DATE(fecha_pago)  || fecha_pago LIKE '%0000%' OR fecha_pago IS NULL )
				AND (
					CASE WHEN numero_amortizacion = 0 THEN pago_total > 0 ELSE TRUE END
				) -- Amortización cero sin comisiones --
			ORDER BY id ASC
			LIMIT 1
		";

		$fechaPrimerIncumplimiento = Yii::app()->db->createCommand($sql)->queryRow();

		if ($fechaPrimerIncumplimiento !== false) {
			$return = date($formato, strtotime($fechaPrimerIncumplimiento["fecha_amortizacion"]));
		} else {
			$return = $fechaDummie;
		}

		return $return;
	}
	public function getFechaPrimerIncumplimientoCreditoPM($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";
		if(isset($this->id_grupo_cliente)){
			$primeraAmortizacionMoratorios=Amortizaciones::model()->with(array('id_grupo_solidario0'))->find(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado') AND (t.fecha_amortizacion)<=:fecha1",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));
		}else{
			$primeraAmortizacionMoratorios=Amortizaciones::model()
			->with(array('id_disposicion0','id_solicitud0'))
			->find(
				array(
					'condition'=>"
						(
							t.id_solicitud=:solicitud
							AND id_solicitud0.fecha_disposicion<=:soli
							AND t.fecha_amortizacion<=:fechaAmortizacion
							AND (DATE(t.fecha_pago) > DATE(t.fecha_amortizacion) OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
							AND (t.status='Calculado' OR t.status = 'Registrado')
							AND (
								CASE WHEN t.numero_amortizacion = 0 THEN t.pago_total > 0 ELSE TRUE END
							) -- Amortización cero sin comisiones --
							OR (
								id_disposicion0.id_solicitud=:solicitud2
								AND t.fecha_amortizacion<=:fechaAmortizacion2
								AND (t.status='Calculado' OR t.status = 'Registrado')
								AND id_disposicion0.fecha<=:disposicion
								AND (DATE(t.fecha_pago) > DATE(t.fecha_amortizacion) OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
								AND (
									CASE WHEN t.numero_amortizacion = 0 THEN t.pago_total > 0 ELSE TRUE END
								) -- Amortización cero sin comisiones --
							)
						)",
					'order'=>'t.fecha_amortizacion ASC',
					'params'=>array(
						':solicitud'=>$this->id,
						':solicitud2'=>$this->id,
						':fechaAmortizacion'=>$fecha_completa,
						':disposicion'=>$periodo,
						':soli'=>$periodo,
						':fechaAmortizacion2'=>$fecha_completa
					)
				)
			);
		}
		if(!is_null($primeraAmortizacionMoratorios)){
			if ($primeraAmortizacionMoratorios->pago_total > 0) {
				$return=date("dmY",strtotime($primeraAmortizacionMoratorios->fecha_amortizacion));
			}else{
				$return="00000000";
			}
		}else{
			$return="00000000";
		}

		return $return;

	}
	public function getSaldoInsolutoCredito($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";

		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.fecha_pago>=:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null) AND (t.status='Calculado' OR t.status = 'Registrado')",'order'=>'t.fecha_pago ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fechaPago'=>$fecha_completa)));
		}else{
			$banderaDisposiciones = "TRUE";

			if ($this->id_producto0->tabla_disposiciones === "unica") {
				$banderaDisposiciones = "FALSE";
			}

			$amortizaciones = Amortizaciones::model()->with(
				array(
					'id_disposicion0' => array(
						'select' => 'fecha,id_solicitud'
					),
					'id_solicitud0'=> array(
						'select' => 'fecha_disposicion'
					),
					'rel_parcialidades' => array(
						'select' => 'fecha_pago,pago_capital'
					),
				)
			)->findAll(
				array(
					'condition' => "
					(
						t.id_solicitud=:solicitud
							AND id_solicitud0.fecha_disposicion<=:soli
							AND (DATE(t.fecha_pago) > DATE(:fechaPago) OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
							AND (t.status='Calculado' OR t.status = 'Registrado')
							OR (
								id_disposicion0.id_solicitud=:solicitud2
									AND (t.status='Calculado' OR t.status = 'Registrado')
									AND id_disposicion0.fecha<=:disposicion
									AND (t.fecha_pago>:fechaPago2 OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null
									AND $banderaDisposiciones
								)
							)
					)",
					'order'=>'t.fecha_amortizacion ASC',
					'params'=>array(
						':solicitud'=>$this->id,
						':solicitud2'=>$this->id,
						':disposicion'=>$periodo,
						':soli'=>$periodo,
						':fechaPago'=>$fecha_completa,
						':fechaPago2'=>$fecha_completa
					)
				)
			);
		}

		foreach ($amortizaciones as $amortizacion) {
			$return += $amortizacion->pago_capital;

			foreach ($amortizacion->rel_parcialidades as $parcialidad) {
				if (strtotime(date('Y-m-d', strtotime($parcialidad->fecha_pago))) <= strtotime(date('Y-m-d', strtotime($fecha_completa)))) {
					$return -= $parcialidad->pago_capital;
				}
			}
		}

		$return = round($return);

		return self::atributosBDCF('Cantidad',$return);
	}

	public function getSaldoInsolutoCreditoMoral($aval=null,$accionista=null){
		$periodo = $this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";
		
		$return = 0;
		if (isset($this->id_grupo_cliente)) {
			$amortizaciones = Amortizaciones::model()
				->with(
					array('id_grupo_solidario0')
				)
				->findAll(
					array(
						'condition' => "
							id_grupo_solidario0.id_solicitud = :solicitud
							AND id_grupo_solidario0.id_cliente = :cliente
							AND (t.fecha_pago >= :fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
							AND (t.status = 'Calculado' OR t.status = 'Registrado')",
						'order' => 't.fecha_pago ASC',
						'params' => array(
							':solicitud'	=> $this->id,
							':cliente'		=> $this->id_cliente,
							':fechaPago'	=> $fecha_completa
						)
					)
				);
		} else {
			$amortizaciones = Amortizaciones::model()
			->with(
				array(
					'id_disposicion0' => array(
						'select' => 'fecha,id_solicitud'
					),
					'id_solicitud0'=> array(
						'select' => 'fecha_disposicion'
					),
					'rel_parcialidades' => array(
						'select' => 'fecha_pago,pago_capital,pago_interes,pago_moratorios'
					),
				)
			)
			->findAll(
				array(
					'condition' => "(
						t.id_solicitud = :solicitud
						AND id_solicitud0.fecha_disposicion <= :soli
						AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
						AND (t.status='Calculado' OR t.status = 'Registrado')
						OR ( 
							id_disposicion0.id_solicitud = :solicitud2
							AND (t.status='Calculado' OR t.status = 'Registrado')
							AND id_disposicion0.fecha <= :disposicion
							AND (t.fecha_pago > :fechaPago2 OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
						)
					)",
					'order' => 't.fecha_amortizacion ASC',
					'params'=> array(
						':solicitud' 	=> $this->id,
						':solicitud2'	=> $this->id,
						':disposicion'	=> $periodo,
						':soli' 		=> $periodo,
						':fechaPago' 	=> $fecha_completa,
						':fechaPago2' 	=> $fecha_completa
					)
				)
			);
		}

		foreach ($amortizaciones as $amortizacion){
			$return += $amortizacion->pago_capital;
			
			foreach ($amortizacion->rel_parcialidades as $parcialidad) {
				if (strtotime($parcialidad->fecha_pago) <= strtotime($fecha_completa)) {
					$return -= $parcialidad->pago_capital;
				}
			}
		}
		
		if($this->id_producto0->id_tipo_producto==8){
			foreach ($amortizaciones as $amortizacion){
				if (!is_null($amortizacion->fecha_pago) && !($amortizacion->fecha_pago === "0000-00-00 00:00:00") && (strtotime($amortizacion->fecha_pago) <= strtotime($fecha_completa))) {
					continue;
				}

				$return+=$amortizacion->pago_interes;

				foreach ($amortizacion->rel_parcialidades as $parcialidad) {
					if (strtotime($parcialidad->fecha_pago) <= strtotime($fecha_completa)) {
						$return -= $parcialidad->pago_interes;
					}
				}
			}
		}

		$return=round($return);
		return $this-> atributosCDCPF('Cantidad',$return);
	}
	public function getCreditoMaximoUtilizado($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$return=$this->entregable;
		}else{
			$disposiciones=Disposiciones::model()->findAll("id_solicitud=:solicitud AND fecha<=:fecha ORDER BY importe DESC",array(':solicitud'=>$this->id,':fecha'=>$fecha_completa));
			$return=$this->entregable;
			foreach($disposiciones as $disposicion){
				if ($disposicion->importe >= $this->entregable) {
					$return+= $disposicion->importe;
				}else{
					$return+= $disposicion->importe;
				}
			}
		}
		return round($return);
	}
	public function getRfcDetalleCredito($aval=null,$accionista=null){
		return $this->id_cliente0->rfc;
	}
	public function getNumeroContratoDetalleCredito($aval=null,$accionista=null){
		return $this->contrato;
	}

	public function getTipoProductoSolicitud(){
		$sqlTipoProducto = "SELECT
								tp.id tipoProducto, tp.nombre
							FROM
								solicitudes s
							LEFT JOIN productos p ON (p.id = s.id_producto)
							LEFT JOIN tipos_productos tp ON (tp.id = p.id_tipo_producto)
							WHERE
								s.id =" . $this->id;
        $RowsTipoProducto = Yii::app()->db->createCommand($sqlTipoProducto)->queryAll();
        return $RowsTipoProducto[0]['tipoProducto'];

	}

	public function getDetalleCreditoTotalDeuda($options = []) {
		$periodo = $this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";

		$return = 0;
		if (isset($this->id_grupo_cliente)) {
			$amortizaciones = Amortizaciones::model()
				->with(
					array('id_grupo_solidario0')
				)
				->findAll(
					array(
						'condition' => "
							id_grupo_solidario0.id_solicitud = :solicitud
							AND id_grupo_solidario0.id_cliente = :cliente
							AND (t.fecha_pago >= :fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
							AND (t.status = 'Calculado' OR t.status = 'Registrado')",
						'order' => 't.fecha_pago ASC',
						'params' => array(
							':solicitud'	=> $this->id,
							':cliente'		=> $this->id_cliente,
							':fechaPago'	=> $fecha_completa
						)
					)
				);
		} else {
			$banderaDisposiciones = "TRUE";

			if ($this->id_producto0->tabla_disposiciones === "unica") {
				$banderaDisposiciones = "FALSE";
			}

			$cuentaQuebrantada = $options['solicitud_quebrantada'] ?? false;

			$statusAmortizaciones = "t.status='Calculado' OR t.status = 'Registrado'";
			$conditionAmortizaciones = "t.fecha_pago >= :fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null";

			if ($cuentaQuebrantada) {
				$statusAmortizaciones = "t.status='Calculado' OR t.status = 'Registrado' OR t.`status` = 'Quebrantado'";
				$conditionAmortizaciones = "t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null OR t.`status` = 'Quebrantado'";
			}

			$amortizaciones = Amortizaciones::model()
			->with(
				array(
					'id_disposicion0' => array(
						'select' => 'fecha,id_solicitud'
					),
					'id_solicitud0'=> array(
						'select' => 'fecha_disposicion'
					),
					'rel_parcialidades' => array(
						'select' => 'fecha_pago,pago_capital,pago_interes,pago_moratorios'
					),
				)
			)
			->findAll(
				array(
					'condition' => "(
						t.id_solicitud = :solicitud
						AND id_solicitud0.fecha_disposicion <= :soli
						AND ($conditionAmortizaciones)
						AND ($statusAmortizaciones)
						OR (
							id_disposicion0.id_solicitud = :solicitud2
							AND ($statusAmortizaciones)
							AND DATE(id_disposicion0.fecha) <= DATE(:disposicion)
							AND ($conditionAmortizaciones)
							AND $banderaDisposiciones
						)
					)",
					'order' => 't.fecha_amortizacion ASC',
					'params'=> array(
						':solicitud' 	=> $this->id,
						':solicitud2'	=> $this->id,
						':disposicion'	=> $periodo,
						':soli' 		=> $periodo,
						':fechaPago'	=> $fecha_completa
					),
					'select' => 'id, fecha_amortizacion, numero_amortizacion, pago_capital, pago_interes, pago_restante'
				)
			);
		}

		foreach ($amortizaciones as $amortizacion){
			$return += $amortizacion->pago_capital;

			if (strtotime($amortizacion->fecha_amortizacion) <= strtotime($periodo) || $this->id_producto0->id_tipo_producto==8) {
				$return += $amortizacion->pago_interes;
			}

			foreach ($amortizacion->rel_parcialidades as $parcialidad) {
				if (strtotime($parcialidad->fecha_pago) <= strtotime($fecha_completa)) {
					$return-=$parcialidad->pago_capital;
					$return-=$parcialidad->pago_interes;
					$return-=$parcialidad->pago_moratorios;
				}
			}
		}

		// Se suman los moratorios a la fecha de corte
		$sqlMoratorios = 'SELECT SUM(monto_moratorio) FROM `moratorios_amortizaciones` LEFT JOIN amortizaciones ON moratorios_amortizaciones.id_amortizacion = amortizaciones.id WHERE id_amortizacion IN (' . implode(',', array_column(array_filter($amortizaciones, function ($amortizacion) use ($periodo) {
			return $amortizacion->numero_amortizacion > 0 AND $amortizacion->pago_restante > 0 AND strtotime($amortizacion->fecha_amortizacion) <= strtotime($periodo);
		}) ?? [['id' => -1]], 'id')) . ') AND DATE ( fecha) <= DATE("' . $fecha_completa . '") AND DATE(DATE_ADD(amortizaciones.fecha_amortizacion, INTERVAL ' . ($this->id_producto0->aplicacion_moratorios ?? 0) . ' DAY )) <= DATE("' . $fecha_completa . '")';
		$moratorios = 0;

		try {
			$moratorios = Yii::app()->db->createCommand($sqlMoratorios)->queryScalar();
		} catch (Exception $th) {
			// nothing
		}

		if ($moratorios > 0) {
			$return += $moratorios;
		}

		return round(max($return, 0));
	}

	public function getDiasVencidoDetalleCredito($aval=null,$accionista=null, $options = []){
		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."23:59:59";
		if(isset($this->id_grupo_cliente)){
			$primeraAmortizacionVencida=Amortizaciones::model()->with(array('id_grupo_solidario0'))->find(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND t.status='Calculado' AND t.fecha_amortizacion<:fecha AND t.pago_total>0",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha'=>$fecha_completa)));
		}else{
			$cuentaQuebrantada = $options['solicitud_quebrantada'] ?? false;

			$statusAmortizaciones = "t.status='Calculado'";
			if ($cuentaQuebrantada) {
				$statusAmortizaciones = "t.status='Calculado' OR t.`status` = 'Quebrantado'";
			}

			$primeraAmortizacionVencida=Amortizaciones::model()->with(
				array('id_disposicion0')
			)->find(
				array(
					'condition'=>"
						(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud)
						AND $statusAmortizaciones
						AND t.fecha_amortizacion<=:fecha
						AND t.pago_total>0
					",
					'order'=>'t.fecha_amortizacion ASC',
					'params'=>array(':solicitud'=>$this->id,':fecha'=>$fecha_completa)
				)
			);
		}
		if(!is_null($primeraAmortizacionVencida)){
			if (strtotime($fecha_completa)==strtotime($primeraAmortizacionVencida->fecha_amortizacion)) {
				$return=1;
			}else{
				$return=round((strtotime($fecha_completa)-strtotime($primeraAmortizacionVencida->fecha_amortizacion))/60/60/24,0);
			}
		}else{
			$return=0;
		}

		return $return;
	}

	public function getDiasVencidosCCPF($claveFrecuenciaPago, $pagoActual) {
		if ($claveFrecuenciaPago == "V") {
			return 0;
		}

		switch ($claveFrecuenciaPago) {
			case 'B':
				return round((int) $pagoActual * 60);
			case 'M':
				return round((int) $pagoActual * 30);
			case 'Q':
				return round((int) $pagoActual * 15);
			case 'A':
				return round((int) $pagoActual * 365);
			case 'T':
				return round((int) $pagoActual * 90);
			case 'S':
				return round((int) $pagoActual * 7);
			case 'E':
				return round((int) $pagoActual * 180);
			case 'C':
				return round((int) $pagoActual * 14);

			default:
				return $this->getDiasVencidoDetalleCredito();
		}
	}

	public function getCantidadDetalleCredito($aval=null,$accionista=null, $options = []){
		$periodo = $this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";
		$return = 0;

		if (isset($this->id_grupo_cliente)) {
			$amortizaciones = Amortizaciones::model()
				->with(
					array('id_grupo_solidario0')
					)
				->findAll(
					array(
						'condition' => "
							id_grupo_solidario0.id_solicitud = :solicitud
							AND id_grupo_solidario0.id_cliente = :cliente
						 	AND t.status = 'Calculado'
							AND t.fecha_amortizacion <= :fecha1",
						'order' => 't.fecha_amortizacion ASC',
						'params' => array(
							':solicitud'	=>$this->id,
							':cliente'		=>$this->id_cliente,
							':fecha1'		=>$fecha_completa
						)
					)
				);
		} else {
			$cuentaQuebrantada = $options['solicitud_quebrantada'] ?? false;

			$statusAmortizaciones = "t.status = 'Calculado' OR t.status = 'Registrado'";
			$conditionAmortizaciones = "DATE(t.fecha_pago) > DATE('$fecha_completa') OR t.fecha_pago LIKE '%0000%' OR t.fecha_pago IS NULL";
			if ($cuentaQuebrantada) {
				$statusAmortizaciones = "t.status = 'Calculado' OR t.status = 'Registrado' OR t.`status` = 'Quebrantado'";
				$conditionAmortizaciones = "DATE(t.fecha_pago) > DATE('$fecha_completa') OR t.fecha_pago LIKE '%0000%' OR t.fecha_pago IS NULL OR t.`status` = 'Quebrantado'";
			}

			$amortizaciones=Amortizaciones::model()
				->with(
					array(
						'id_disposicion0',
						'id_solicitud0',
						'rel_parcialidades',
					)
				)
				->findAll(
					array(
						'condition' => "(
							t.id_solicitud = :solicitud
							AND id_solicitud0.fecha_disposicion <= :soli
							AND t.fecha_amortizacion <= :fechaAmortizacion
							AND ($conditionAmortizaciones)
							AND ($statusAmortizaciones)
							OR (
								id_disposicion0.id_solicitud = :solicitud2
								AND (t.status='Calculado' OR t.status = 'Registrado')
								AND id_disposicion0.fecha <= :disposicion
								AND t.fecha_pago >= :fechaPago2
							)
						)",
						'order' => 't.fecha_amortizacion ASC',
						'params' => array(
							':solicitud'		 => $this->id,
							':solicitud2'		 => $this->id,
							':fechaAmortizacion' => $fecha_completa,
							':disposicion'		 => $fecha_completa,
							':soli'				 => $fecha_completa,
							':fechaPago'		 => $fecha_completa,
							':fechaPago2'		 => $fecha_completa
						)
					)
				);
		}

		foreach ($amortizaciones as $amortizacion){
			$return += $amortizacion->pago_capital + $amortizacion->pago_interes;

			foreach ($amortizacion->rel_parcialidades as $parcialidad) {
				if (strtotime($parcialidad->fecha_pago) <= strtotime($fecha_completa)) {
					$return-=$parcialidad->pago_capital;
					$return-=$parcialidad->pago_interes;
					$return-=$parcialidad->pago_moratorios;
				}
			}
		}

		return round($return);

	}
	public function getRfcAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$return=$aval->rfc;

		return self::atributosBDCM('RFC',$return);
	}
	public function getCurpAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$return=$aval->curp;

		return self::atributosBDCM('Codigo_Ciudadano',$return);
	}
	public function getNombreEmpresaAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		if($aval->tipo_persona=="Persona Moral"){
			$return=$empleo->razon;
		}
		return self::atributosBDCM('Compañía',$return);
	}
	public function getNombre1Aval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		if($aval->tipo_persona=="Persona Fisica"){
			$return=$aval->nombre;
		}
		return self::atributosBDCM('Nombre_1',$return);
	}
	public function getNombre2Aval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		if($aval->tipo_persona=="Persona Fisica"){
			$return=$aval->nombre2;
		}
		return self::atributosBDCM('Nombre_2',$return);
	}
	public function getApellidoPaternoAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		if($aval->tipo_persona=="Persona Fisica"){
			$return=$aval->apellido_paterno;
		}
		return self::atributosBDCM('Paterno',$return);
	}
	public function getApellidoMaternoAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		if($aval->tipo_persona=="Persona Fisica"){
			$return=$aval->apellido_materno;
		}
		return self::atributosBDCM('Materno',$return);
	}
	public function getDireccion1Aval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$return=trim(trim($aval->calle." ".$aval->numero_exterior)." ".$aval->numero_interior);
		if (!isset($return) and $return == "") {
			$return="Domicilio Conocido";
		}
		return self::atributosBDCM('Direccion_1',$return);;
	}
	public function getDireccion2Aval($aval=null,$accionista=null){
		return "";
	}
	public function getColoniaAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$return=$aval->colonia;
		return self::atributosBDCM('Colonia/Poblacion',$return);
	}
	public function getDelegacionMunicipioAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

		$return=$aval->municipio;
		return self::atributosBDCM('Delegacion/Municipio',$return);
	}
	public function getCiudadAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

		$return=$aval->localidad;
		return self::atributosBDCM('Ciudad',$return);
	}
	public function getEstadoAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$aval->estado));
		$return=$estado->clave_buro;

		return self::atributosBDCM('Estado',$return);
	}
	public function getEstadoAvalCDCPM($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$aval->estado));
		$return=$estado->clave_circulo_pm;

		return self::atributosBDCM('Estado',$return);
	}
	public function getCodigoPostalAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$return=$aval->codigo_postal;
		return self::atributosBDCM('C.P.',$return);
	}
	public function getTelefonoAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		if (!is_null($aval)) {
			$return=$aval->telefono;
			return self::atributosBDCM('Telefono',$return);
		}
	}
	public function getExtensionAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$return="";

		return self::atributosBDCM('Extension',$return);
	}
	public function getFaxAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

		$return="";

		return self::atributosBDCM('Fax',$return);
	}
	public function getTipoClienteAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		if (!is_null($aval)){
			if($aval->tipo_persona=="Persona Moral"){
				$return="1";
			}else{
				$return="2";
			}
			return self::atributosBDCM('Tipo_Cliente',$return);
		}
	}
	public function getEstadoExtranjeroAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

		$return="";

		return self::atributosBDCM('Estado_extranjero',$return);
	}
	public function getPaisAval($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$pais=Paises::model()->find("pais=:pais",array(':pais'=>$aval->pais));
		$return=$pais->iso;
		return self::atributosBDCM('Pais',$return);
	}
	//nuevos campos CDCPM
	//cambranoCDCPF
	public function getTelefonoMovilEmpresa($aval=null,$accionista=null){
		return $this->id_cliente0->celular;
	}
	public function getCorreoElectronicoEmpresa($aval=null,$accionista=null){
		return $this->id_cliente0->email;
	}
	public function getFechaIngresoCarteraVencida($aval=null,$accionista=null){

		$solicitudes = Solicitudes::model()->findAll('id=:id',array(':id'=>$this->id));

		foreach ($solicitudes as $solicitud){
			if (isset($solicitud->fecha_cartera_vencida) and $solicitud->fecha_cartera_vencida != "" ) {
				$fecha = $solicitud->fecha_cartera_vencida;
				$fecha2 = strtotime($fecha);
				$return=date("Ymd",$fecha2);
			}else{
				$return = " ";
			}
		}

		return$return;
	}
	public function getFechaIngresoCarteraVencidaPM($aval=null,$accionista=null){

		$solicitudes = Solicitudes::model()->findAll('id=:id',array(':id'=>$this->id));

		foreach ($solicitudes as $solicitud){
			if (isset($solicitud->fecha_cartera_vencida) and $solicitud->fecha_cartera_vencida != "" ) {
				$fecha = $solicitud->fecha_cartera_vencida;
				$fecha2 = strtotime($fecha);
				$return=date("dmY",$fecha2);
			}else{
				$return = " ";
			}
		}

		return$return;
	}
	public function getInteresesDetalleCredito($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";
		$return=0;

		if (isset($this->id_grupo_cliente)) {
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.fecha_pago>=:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00') AND (t.status='Calculado' OR t.status = 'Registrado')",'order'=>'t.fecha_pago ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fechaPago'=>$fecha_completa)));
		} else {
		   $amortizaciones = Amortizaciones::model()->with(
			array(
				'id_disposicion0' => array(
					'select' => 'fecha,id_solicitud'
				),
				'id_solicitud0'=> array(
					'select' => 'fecha_disposicion'
				),
				'rel_parcialidades' => array(
					'select' => 'fecha_pago,pago_capital,pago_interes,pago_moratorios'
				),
				'rel_moratorios' => array(
					'select' => 'fecha,monto_moratorio'
				),
			)
			)->findAll(
				array('condition' => "
					(
						t.id_solicitud=:solicitud
						AND id_solicitud0.fecha_disposicion<=:soli
						AND (t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
						AND (t.status='Calculado' OR t.status = 'Registrado')
						OR (
							id_disposicion0.id_solicitud=:solicitud2
							AND (t.status='Calculado' OR t.status = 'Registrado')
							AND id_disposicion0.fecha<=:disposicion
							AND (t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)
						)
					)",
					'order'=>'t.fecha_amortizacion ASC',
					'params'=>array(
						':solicitud'=>$this->id,
						':solicitud2'=>$this->id,
						':disposicion'=>$periodo,
						':soli'=>$periodo,
					)
				)
			);
		}

		$return = 0;
		foreach ($amortizaciones as $amortizacion) {
			if ($this->id_producto0->id_tipo_producto != 8) {
				$return += $amortizacion->pago_interes;

				foreach ($amortizacion->rel_parcialidades as $parcialidad) {
					if (strtotime(date('Y-m-d', strtotime($parcialidad->fecha_pago))) <= strtotime(date('Y-m-d', strtotime($fecha_completa)))) {
						$return -= $parcialidad->pago_interes;
						$return -= $parcialidad->pago_moratorios;
					}
				}
			}

			foreach ($amortizacion->rel_moratorios as $moratorio) {
				if (strtotime(date('Y-m-d', strtotime($moratorio->fecha))) <= strtotime(date('Y-m-d', strtotime($periodo)))) {
					$return += $moratorio->monto_moratorio;
				}
			}
		}

		$return = round($return);

		return self::atributosBDCF('Cantidad',$return);
	}

	///////////////////////////////////////////
	//////////////BURO DE CRÉDITO PM///////////
	///////////////////////////////////////////
	public function getIdentificadorInstitucionBM($aval=null,$accionista=null){
		return "BNCPM";

	}
	public function getInstitucionBM($aval=null,$accionista=null){
		return Empresa::model()->find()->clave_buro;

	}
	public function getInstitucionAnteriorBM($aval=null,$accionista=null){
		return "";
	}
	public function getTipoInstitucionBM($aval=null,$accionista=null){
		$empresa=Empresa::model()->find();
		$clave=TiposInstituciones::model()->find('id=:id',array(':id'=>$empresa->tipo_empresa_buro));
		return $clave->clave;

	}
	public function getFormatoBM($aval=null,$accionista=null){
		return "1";
	}
	public function getFechaBM($aval=null,$accionista=null){
		return date("dmY",strtotime($this->fechaCorte));
	}
	public function getPeriodoBM($aval=null,$accionista=null){
		$return=date("mY",strtotime($this->fechaCorte));
		return $return;
	}
	public function getUsuarioBM($aval=null,$accionista=null){
		return Empresa::model()->find()->nombre_usuario_buro;
	}
	//EMPRESA
	public function getIdentificadorEmpresaBM($aval=null,$accionista=null){
		return "EM";
	}
	public function getRfcEmpresaBM($aval=null,$accionista=null){

		return self::atributosBDCM('RFC',$this->id_cliente0->rfc);
	}
	public function getCodigoCiudadanoEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Codigo_Ciudadano',$this->id_cliente0->curp);
	}
	public function getNumeroDunEmpresaBM($aval=null,$accionista=null){
		return "";
	}
	public function getRazonSocialEmpresaBM($aval=null,$accionista=null){
		$return=self::atributosBDCM('Compañía',$this->id_cliente0->id_pld_cliente0->razon_social);

		return $return;
	}
	public function getNombre1EmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Nombre_1','');
	}
	public function getNombre2EmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Nombre_2','');
	}
	public function getApellidoPaternoEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Paterno','');
	}
	public function getApellidoMaternoEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Materno','');
	}
	public function getNacionalidadEmpresaBM($aval=null,$accionista=null){
		$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
		return self::atributosBDCM('Nacionalidad',$pais->iso);
	}
	public function getCalificacionBancoMexicoEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Calificacion_Banco_de_Mex','');
	}
	public function getBanxico1EmpresaBM($aval=null,$accionista=null){
		$actividad_economica=ActividadesEconomicasScian::model()->find("id=:id",array(':id'=>$this->id_cliente0->id_pld_cliente0->actividad_economica_scian));
		$return= $actividad_economica->clave;
		return self::atributosBDCM('Banxico_1',$return);
	}
	public function getBanxico2EmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Banxico_2','');
	}
	public function getBanxico3EmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Banxico_3','');
	}
	public function getDireccion1EmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Direccion_1',trim(trim($this->id_cliente0->calle." ".$this->id_cliente0->numero_exterior)." ".$this->id_cliente0->numero_interior));
	}
	public function getDireccion2EmpresaBM($aval=null,$accionista=null){
		return "";
	}
	public function getColoniaEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Colonia/Poblacion',$this->id_cliente0->colonia);
	}
	public function getDelegacionMunicipioEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Delegacion/Municipio',$this->id_cliente0->municipio);
	}
	public function getCiudadEmpresaBM($aval=null,$accionista=null){
		if (isset($this->id_cliente0->ciudad) AND $this->id_cliente0->ciudad != "") {
		   return self::atributosBDCM('Ciudad',$this->id_cliente0->ciudad);
		}else{
			return self::atributosBDCM('Ciudad',$this->id_cliente0->municipio);
		}
	}

	public function getEstadoEmpresaBM($aval=null,$accionista=null){
		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$this->id_cliente0->estado));

		return self::atributosBDCM('Estado',$estado->clave_buro);
	}
	public function getCodigoPostalEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('C.P.',$this->id_cliente0->codigo_postal);
	}
	public function getTelefonoEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Telefono',$this->id_cliente0->telefono);
	}
	public function getExtensionEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Extension','');
	}
	public function getFaxEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Fax','');
	}
	public function getTipoClienteEmpresaBM($aval=null,$accionista=null){
		if($this->id_cliente0->tipo_persona=="Persona Moral"){
			$tipo_persona_numero="1";
		}else{
			$tipo_persona_numero="2";
		}
		return self::atributosBDCM('Tipo_Cliente',$tipo_persona_numero);
	}
	public function getEstadoExtranjeroEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Estado_extranjero','');
	}
	public function getPaisEmpresaBM($aval=null,$accionista=null){
		$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));

		return self::atributosBDCM('Pais',$pais->iso);
	}
	public function getClaveConsolidacionEmpresaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Clave_de_Cosolidación','');
	}
	//accionista
	public function getIdentificadorAccionistaBM($aval=null,$accionista=null){
		return "AC";
	}
	public function getRfcAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));

		if (isset($contacto) AND $contacto != "") {
		   return self::atributosBDCM('RFC',$contacto->rfc);
		}else{
			return self::atributosBDCM('RFC',$accionista->rfc);
		}
	}
	public function getCodigoCiudadanoAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			return self::atributosBDCM('Codigo_Ciudadano',$contacto->curp);
		}else{
			return self::atributosBDCM('Codigo_Ciudadano',$accionista->curp);
		}
	}

	public function getNumeroDumAccionistaBM($aval=null,$accionista=null){
		return '';
	}

	public function getEmpresaAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			if($accionista->tipo_persona=="Persona Moral"){
				$return=$contacto->nombre1;
			}
		}else{
			if($accionista->tipo_persona=="Persona Moral"){
				$return=$accionista->nombre1;
			}
		}
		return self::atributosBDCM('Compañía',$return);
	}

	public function getNombre1AccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			return self::atributosBDCM('nombre_1',$contacto->nombre);
		}else{
			return self::atributosBDCM('nombre_1',$accionista->nombre1);
		}
	}

	public function getNombre2AccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			return self::atributosBDCM('nombre_2',$contacto->nombre2);
		}else{
			return self::atributosBDCM('nombre_2',$accionista->nombre2);
		}
	}

	public function getApellidoPaternoAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			return self::atributosBDCM('Paterno',$contacto->apellido_paterno);
		}else{
			return self::atributosBDCM('Paterno',$accionista->apellido_paterno);
		}
	}
	public function getApellidoMaternoAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			return self::atributosBDCM('Materno',$contacto->apellido_materno);
		}else{
			return self::atributosBDCM('Materno',$accionista->apellido_materno);
		}
	}
	public function getPorcentajeAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente AND acciones > 0",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			return $contacto->acciones;
		}else{
			return $accionista->acciones;
		}
	}
	public function getDireccion1AccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				 return self::atributosBDCM('Direccion_1',$contacto->calle." ".$contacto->numero_exterior." ".$contacto->numero_interior);
			}else{
				 return self::atributosBDCM('Direccion_1',$accionista->calle." ".$accionista->numero_exterior." ".$accionista->numero_interior);
			}
	}
	public function getDireccion2AccionistaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Direccion_2','');
	}
	public function getColoniaAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				return self::atributosBDCM('Colonia/Poblacion',$contacto->colonia);
			}else{
				return self::atributosBDCM('Colonia/Poblacion',$accionista->colonia);
			}


	}
	public function getDelegacionMunicipioAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				return self::atributosBDCM('Delegacion/Municipio',$contacto->municipio);
			}else{
				return self::atributosBDCM('Delegacion/Municipio',$accionista->municipio);
			}

	}
	public function getCiudadAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			if (isset($contacto->ciudad) AND $contacto->ciudad != "") {
				return self::atributosBDCM('Ciudad',$contacto->ciudad);
			}else{
				return self::atributosBDCM('Ciudad',$contacto->municipio);
			}
		}else{
			if (isset($accionista->ciudad) AND $accionista->ciudad != "") {
				return self::atributosBDCM('Ciudad',$accionista->ciudad);
			}else{
				return self::atributosBDCM('Ciudad',$accionista->municipio);
			}
		}
	}
	public function getEstadoAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));

		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$contacto->estado));

		$estado2=Estados::model()->find("estado=:estado",array(':estado'=>$accionista->estado));
		if (isset($contacto) AND $contacto != "") {
			return self::atributosBDCM('Estado',$estado->clave_buro);
		}else{
			return self::atributosBDCM('Estado',$estado2->clave_buro);
		}
	}
	public function getCodigoPostalAccionistaBM($aval=null,$accionista=null){

		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
			if (isset($contacto) AND $contacto != "") {
				return self::atributosBDCM('C.P.',$contacto->codigo_postal);
			}else{
				return self::atributosBDCM('C.P.',$accionista->codigo_postal);
			}

	}
	public function getTelefonoAccionistaBM($aval=null,$accionista=null){
		 return "";
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
				if (isset($contacto) AND $contacto != "") {
					return self::atributosBDCM('Telefono',$contacto->telefono);
				}else{
					return self::atributosBDCM('Telefono',$accionista->telefono);
				}
	}
	public function getExtensionAccionistaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Extension','');
	}
	public function getFaxAccionistaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Fax','');
	}
	public function getTipoClienteAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		if (isset($contacto) AND $contacto != "") {
			if (!is_null($contacto->tipo_persona)) {
				if($contacto->tipo_persona=="Persona Moral"){
					$return="1";
				}else{
					$return="2";
				}
				return self::atributosBDCM('Tipo_Cliente',$return);
			}
		}else{
			if (!is_null($accionista->tipo_persona)) {
				if($accionista->tipo_persona=="Persona Moral"){
					$return="1";
				}else{
					$return="2";
				}
				return self::atributosBDCM('Tipo_Cliente',$return);
			}
		}
	}
	public function getEstadoExtranjeroAccionistaBM($aval=null,$accionista=null){
		return self::atributosBDCM('Estado_extranjero','');
	}

	public function getPaisAccionistaBM($aval=null,$accionista=null){
		$contacto=Contactos::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$accionista=AccionistasClientes::model()->find(array("condition"=>"id_cliente=:cliente",'order'=>'acciones DESC','params'=>array(':cliente'=>$this->id_cliente0->id)));
		$pais=Paises::model()->find("pais=:pais",array(':pais'=>$contacto->pais));

		$pais2=Paises::model()->find("pais=:pais",array(':pais'=>$accionista->pais));
		if (isset($contacto) AND $contacto != "") {
			return self::atributosBDCM('Pais',$pais->iso);
		}else{
			return self::atributosBDCM('Pais',$pais2->iso);
		}
	}
	//CREDITO
	public function getIdentificadorCreditoBM($aval=null,$accionista=null){
		return "CR";
	}
	public function getRfcCreditoBM($aval=null,$accionista=null){
		$return= $this->id_cliente0->rfc;
		return self::atributosBDCM('RFC',$return);
	}
	public function getNumeroExperienciasCreditoBM($aval=null,$accionista=null){
		return self::atributosBDCM('Numero_Experiencias','');
	}
	public function getContratoCreditoBM($aval=null,$accionista=null){
		$return= $this->contrato;
		return self::atributosBDCM('Contrato',$return);
	}
	public function getContratoAnteriorCreditoBM($aval=null,$accionista=null){
		$return= '';
		return self::atributosBDCM('Contrato',$return);
	}
	public function getFechaAperturaCreditoBM($aval=null,$accionista=null){
		$return= date("dmY",strtotime($this->fecha_disposicion));
		return self::atributosBDCM('Fecha',$return);
	}
	public function getPlazoMesesCreditoBM($aval=null,$accionista=null){
		if(isset($this->id_grupo_cliente)){
			$amortizacion=Amortizaciones::model()->with("id_grupo_solidario0")->find(array("condition"=>"(id_grupo_solidario0.id_solicitud=:solicitud)",'order'=>'t.fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		}else{
			$amortizacion=Amortizaciones::model()->find(array("condition"=>"(t.id_solicitud=:solicitud)",'order'=>'t.fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		}
		$dias=round((strtotime($amortizacion->fecha_amortizacion)-strtotime($this->fecha_disposicion))/60/60/24);
		$meses=round($dias/30.4,2);
		$return= $meses;
		return self::atributosBDCM('Plazo_En_Meses',$return);
	}
	public function getTipoCreditoCreditoBM($aval=null,$accionista=null){
		$return= $this->id_producto0->id_tipo_credito0->clave;
		return self::atributosBDCM('Tipo_de_Credito',$return);
	}
	public function getSaldoInicialCreditoBM($aval=null,$accionista=null){

		$return=$this->monto_autorizado;
		return self::atributosBDCM('Saldo_Inicial',$return);
	}
	public function getMonedaCreditoBM($aval=null,$accionista=null){
		$return="001";
		return self::atributosBDCM('Moneda',$return);
	}
	public function getNumeroPagosCreditoBM($aval=null,$accionista=null){

		if ($this->id_producto0->id_tipo_credito0->clave == 6280) {
			$return=0;
		}else{
			$return=$this->plazo_autorizado;
		}
		return self::atributosBDCM('Numero_Pagos',$return);
	}
	public function getFrecuenciaPagosCreditoBM($aval=null,$accionista=null){
		$return= $this->id_tipo_amortizacion0->dias;
		if ($this->id_tipo_amortizacion == 10) {
					$mes= $this->plazo_autorizado;
					$return = round($mes*30.4);
		}
		if ($this->id_tipo_amortizacion == 14) {
		   $return= $this->plazo_autorizado;
		}

		return self::atributosBDCM('Frecuencia_de_Pagos',$return);
	}

	public function getImportePagosCreditoBM($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		if($mes<12){
			$mes++;//A diferencia de circulo de crédito se reporta el del periodo siguiente
		}else{
			$mes=1;
			$año++;
		}
		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with("id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND YEAR(fecha_amortizacion)=:year AND MONTH(fecha_amortizacion)=:mes",array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes));
		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND t.status='Calculado' AND id_solicitud0.fecha_disposicion<=:soli AND YEAR(t.fecha_pago)<=:year AND DAY(t.fecha_pago)<=:day AND MONTH(t.fecha_pago)<=:mes OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.status='Calculado' AND id_disposicion0.fecha<=:disposicion AND YEAR(t.fecha_pago)<=:year2 AND DAY(t.fecha_pago)<=:day2 AND MONTH(t.fecha_pago)<=:mes2
		))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':year'=>$año,':day'=>$dia,':day2'=>$dia,':mes'=>$mes,':year2'=>$año,':mes2'=>$mes,':disposicion'=>$periodo,':soli'=>$periodo)));
		}
		$total=0;
		foreach ($amortizaciones as $amortizacion){
			$total=$amortizacion->pago_total;
			$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion->id));
			foreach ($parcialidades as $parcialidad){
				if (strtotime($parcialidad->fecha_pago) <= strtotime($this->fechaCorte)) {
					$total-=$parcialidad->pago_total;
				}
			}
		}

		$return= $total;
		return self::atributosBDCM('Importe_de_Pagos',$return);
	}

	public function getFechaUltimoPagoCreditoBM($aval=null,$accionista=null){
		$periodo=$this->getFechaBM();
		$dia=intval(substr($periodo, 0,2));
		$mes=intval(substr($periodo, 2,2));
		$año=intval(substr($periodo, 4));
		if(isset($this->id_grupo_cliente)){
			//Notese que toma el id del cliente, pero esto es porque temporalmente se asignan los datos inviduales de cada integrante del grupo a la solicitud y el id_cliente se coloca de que integrante corresponde
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)=:mes","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,'cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes)));

			$ultimaAmortizacion=Amortizaciones::model()->with("id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)=:mes AND t.status='Registrado' AND NOT EXISTS(SELECT id FROM parcialidades_amortizaciones WHERE id_amortizacion=t.id)","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes)));
		}else{
			$ultimaAmortizacion=Amortizaciones::model()->find(array("condition"=>"id_solicitud=:solicitud AND YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)<=:mes AND t.status='Registrado' AND NOT EXISTS(SELECT id FROM parcialidades_amortizaciones WHERE id_amortizacion=t.id)","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':year'=>$año,':mes'=>$mes)));

			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0")->find(array("condition"=>"id_amortizacion0.id_solicitud=:solicitud AND YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)=:mes","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':year'=>$año,':mes'=>$mes)));
		}

		if(!is_null($ultimaParcialidad)){
			if(!is_null($ultimaAmortizacion)){
				if(strtotime($ultimaParcialidad)>strtotime($ultimaAmortizacion)){
					$return=date("dmY",strtotime($ultimaParcialidad->fecha_pago));

				}else{
					$return=date("dmY",strtotime($ultimaAmortizacion->fecha_pago));

				}
			}else{
				$return=date("dmY",strtotime($ultimaParcialidad->fecha_pago));

			}
		}else{
			if(!is_null($ultimaAmortizacion)){
				$return=date("dmY",strtotime($ultimaAmortizacion->fecha_pago));

			}
		}
		$return=$return;
		return self::atributosBDCF('Fecha_Ultimo_Pago',$return);
	}

	public function getFechaReestructuraCreditoBM($aval=null,$accionista=null){
		$return= "";
		return self::atributosBDCM('Fecha',$return);
	}
	public function getPagoEfectivoCreditoBM($aval=null,$accionista=null){
		$return= "";//Pendiente
		return self::atributosBDCM('Pago_en_efectivo',$return);
	}
	public function getFechaLiquidacionCreditoBM($aval=null,$accionista=null){

		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		$n=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->count(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Calculado'",'order'=>'t.numero_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		if($n==0){
			$ultimaAmortizacion=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->find(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Registrado' OR t.status='Reestructurado' OR t.status='Quebrantado' OR t.status= 'Registrada')",'order'=>'t.fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));

			if(!is_null($ultimaAmortizacion)){
				if (strtotime($ultimaAmortizacion->fecha_pago) > strtotime($fecha_completa)) {
					$return=null;
				}else{
					$return=date("dmY",strtotime($ultimaAmortizacion->fecha_pago));
				}
			}
		}
		return $return;
	}
	public function getQuitaCreditoBM($aval=null,$accionista=null){
		$return= "";
		return self::atributosBDCM('Quita',$return);
	}
	public function getDacionCreditoBM($aval=null,$accionista=null){
		$return = "";
		return self::atributosBDCM('Dacion',$return);
	}
	public function getQuebrantoCreditoBM($aval=null,$accionista=null){
		$return= "";
		return self::atributosBDCM('Quebranto',$return);
	}
	public function getObservacionesCreditoBM($aval=null,$accionista=null){
		$return= "";
		return self::atributosBDCM('Observaciones',$return);
	}
	public function getEspecialesCreditoBM($aval=null,$accionista=null){
		$return= "";
		return self::atributosBDCM('Especiales',$return);
	}
	public function getFechaPrimerIncumplimientoCreditoBM($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$primeraAmortizacionMoratorios=Amortizaciones::model()->with(array('id_grupo_solidario0'))->find(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado') AND (t.fecha_amortizacion)<=:fecha1",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));
		}else{
			$primeraAmortizacionMoratorios=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->find(array('condition'=>"(t.id_solicitud=:solicitud AND id_solicitud0.fecha_disposicion<=:soli AND t.fecha_amortizacion<=:fechaAmortizacion AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL) AND (t.status='Calculado' OR t.status = 'Registrado') OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.fecha_amortizacion<=:fechaAmortizacion2 AND (t.status='Calculado' OR t.status = 'Registrado') AND id_disposicion0.fecha<=:disposicion AND (t.fecha_pago>:fechaPago2 OR t.fecha_pago = '0000-00-00 00:00:00')
		))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':fechaAmortizacion'=>$fecha_completa,':disposicion'=>$periodo,':soli'=>$periodo,':fechaPago'=>$fecha_completa,':fechaPago2'=>$fecha_completa,':fechaAmortizacion2'=>$fecha_completa)));

		}
		if(!is_null($primeraAmortizacionMoratorios)){
			if ($primeraAmortizacionMoratorios->pago_total > 0) {
				$return=date("dmY",strtotime($primeraAmortizacionMoratorios->fecha_amortizacion));
			}else{
				$return="00000000";
			}
		}else{
			$return="00000000";
		}

		return self::atributosBDCM('Fecha',$return);

	}

	public function getSaldoInsolutoCreditoBM($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00') AND (t.status='Calculado' OR t.status = 'Registrado') AND (t.fecha_amortizacion)<=:fecha1",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));
		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND id_solicitud0.fecha_disposicion<=:soli AND t.fecha_amortizacion<=:fechaAmortizacion AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL) AND (t.status='Calculado' OR t.status = 'Registrado') OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.fecha_amortizacion<=:fechaAmortizacion2 AND (t.status='Calculado' OR t.status = 'Registrado') AND id_disposicion0.fecha<=:disposicion AND (t.fecha_pago>:fechaPago2 OR t.fecha_pago = '0000-00-00 00:00:00')
		))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':fechaAmortizacion'=>$fecha_completa,':disposicion'=>$periodo,':soli'=>$periodo,':fechaPago'=>$fecha_completa,':fechaPago2'=>$fecha_completa,':fechaAmortizacion2'=>$fecha_completa)));
		}
		foreach ($amortizaciones as $amortizacion){
			$return+=$amortizacion->pago_capital;
		}
		$return=round($return);
		return $return;
	}

	public function getCreditoMaximoUtilizadoCreditoBM($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$return=$this->entregable;
		}else{
			$disposiciones=Disposiciones::model()->find("id_solicitud=:solicitud AND fecha<=:fecha ORDER BY importe DESC",array(':solicitud'=>$this->id,':fecha'=>$fecha_completa));
				if ($disposiciones->importe >= $this->entregable) {
					$return= $disposiciones->importe;
				}else{
					$return=$this->entregable;
				}
		}
		return round($return);
	}
	/*nuevo*/
	public function getFechaIngresoCarteraVencidaBM($aval=null,$accionista=null){
		$solicitudes = Solicitudes::model()->FindAll('id=:id',array(':id'=>$this->id));

		foreach ($solicitudes as $solicitud){
			if (isset($solicitud->fecha_cartera_vencida) and $solicitud->fecha_cartera_vencida != "" ) {
				$fecha = $solicitud->fecha_cartera_vencida;
				$fecha2 = strtotime($fecha);
				$return=date("dmY",$fecha2);
			}else{
				$return = " ";
			}
		}

		return$return;
	}
	//DETALLECREDITO
	public function getIdentificadorDetalleCreditoBM($aval=null,$accionista=null){
		return "DE";
	}
	public function getRfcEmpresaDetalleCreditoBM($aval=null,$accionista=null){
		$return= $this->id_cliente0->rfc;
		return self::atributosBDCM('RFC',$return);
	}
	public function getContratoDetalleCreditoBM($aval=null,$accionista=null){
		$return= $this->contrato;
		return self::atributosBDCM('Contrato',$return);
	}
	public function getDiasVencimientoDetalleCreditoBM(){
		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$primeraAmortizacionVencida=Amortizaciones::model()->with(array('id_grupo_solidario0'))->find(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND t.status='Calculado' AND t.fecha_amortizacion<:fecha AND t.pago_total>0",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha'=>"$año-$mes-$dia")));
		}else{
			$primeraAmortizacionVencida=Amortizaciones::model()->with(array('id_disposicion0'))->find(array('condition'=>"(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Calculado' AND t.fecha_amortizacion<=:fecha AND t.pago_total>0",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':fecha'=>$fecha_completa)));
		}
		if(!is_null($primeraAmortizacionVencida)){
			if (strtotime($fecha_completa)==strtotime($primeraAmortizacionVencida->fecha_amortizacion)) {
				$return=1;
			}else{
				$return=round((strtotime($fecha_completa)-strtotime($primeraAmortizacionVencida->fecha_amortizacion))/60/60/24,0);
			}
		}else{
			$return=0;
		}

		return self::atributosBDCM('Dias_Vencimiento',$return);
	}

	public function getCantidadDetalleCreditoBM($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";

		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado') AND (t.fecha_amortizacion)<=:fecha1",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));
		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND id_solicitud0.fecha_disposicion<=:soli AND t.fecha_amortizacion<=:fechaAmortizacion AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL) AND (t.status='Calculado' OR t.status = 'Registrado') OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.fecha_amortizacion<=:fechaAmortizacion2 AND (t.status='Calculado' OR t.status = 'Registrado') AND id_disposicion0.fecha<=:disposicion AND (t.fecha_pago>:fechaPago2 OR t.fecha_pago = '0000-00-00 00:00:00')
		))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':fechaAmortizacion'=>$fecha_completa,':disposicion'=>$periodo,':soli'=>$periodo,':fechaPago'=>$fecha_completa,':fechaPago2'=>$fecha_completa,':fechaAmortizacion2'=>$fecha_completa)));
		}
		foreach ($amortizaciones as $amortizacion){
			$return+=$amortizacion->pago_capital+$amortizacion->pago_interes;
		}
		$return=round($return);
		return $return;

	}
	/*nuevo*/
	public function getInteresDetalleCreditoBM($aval=null,$accionista=null){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado') AND (t.fecha_amortizacion)<=:fecha1",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa)));
		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND id_solicitud0.fecha_disposicion<=:soli AND t.fecha_amortizacion<=:fechaAmortizacion AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL) AND (t.status='Calculado' OR t.status = 'Registrado') OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.fecha_amortizacion<=:fechaAmortizacion2 AND (t.status='Calculado' OR t.status = 'Registrado') AND id_disposicion0.fecha<=:disposicion AND (t.fecha_pago>:fechaPago2 OR t.fecha_pago = '0000-00-00 00:00:00')
		))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':fechaAmortizacion'=>$fecha_completa,':disposicion'=>$periodo,':soli'=>$periodo,':fechaPago'=>$fecha_completa,':fechaPago2'=>$fecha_completa,':fechaAmortizacion2'=>$fecha_completa)));

		}
		foreach ($amortizaciones as $amortizacion){
			$return+=$amortizacion->pago_interes;
		}
		$return=round($return);
		return $return;
	}
	public function getCantidadVencido(){

		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";

		if(isset($this->id_grupo_cliente)){
			$AmortizacionesVencida=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado' or t.status='Registrado') AND t.fecha_amortizacion<=:fecha AND ( t.fecha_pago is null or t.fecha_pago like '%0000-00-00%')",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha'=>"$año-$mes-$dia")));
		}else{
			$AmortizacionesVencida=Amortizaciones::model()->with(array('id_disposicion0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Calculado' or t.status='Registrado') AND t.fecha_amortizacion<=:fecha AND ( t.fecha_pago is null or t.fecha_pago like '%0000-00-00%')",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':fecha'=>$fecha_completa)));
		}

		$total=0;

		foreach($AmortizacionesVencida as $AmortizacionVencida){



				$total+=($AmortizacionVencida->pago_capital+$AmortizacionVencida->pago_interes);
		}


		return self::atributosBDCM('Cantidad',$total);

	}

	public function getCantidadInteresVencido(){

		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";

		if(isset($this->id_grupo_cliente)){
			$AmortizacionesVencida=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado' or t.status='Registrado') AND t.fecha_amortizacion<=:fecha AND ( t.fecha_pago is null or t.fecha_pago like '%0000-00-00%')",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha'=>"$año-$mes-$dia")));
		}else{
			$AmortizacionesVencida=Amortizaciones::model()->with(array('id_disposicion0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Calculado' or t.status='Registrado') AND t.fecha_amortizacion<=:fecha AND ( t.fecha_pago is null or t.fecha_pago like '%0000-00-00%')",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':fecha'=>$fecha_completa)));
		}

		$total=0;

		foreach($AmortizacionesVencida as $AmortizacionVencida){
				$total+=($AmortizacionVencida->pago_interes);
		}

		return self::atributosBDCM('Cantidad',$total);

	}

	public function getCantidadSinVencer(){

		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";

		if(isset($this->id_grupo_cliente)){
			$AmortizacionesVencida=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado' or t.status='Registrado') AND t.fecha_amortizacion<=:fecha AND ( t.fecha_pago is not null and t.fecha_pago not like '%0000-00-00%')",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha'=>"$año-$mes-$dia")));
		}else{
			$AmortizacionesVencida=Amortizaciones::model()->with(array('id_disposicion0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Calculado' or t.status='Registrado') AND t.fecha_amortizacion<=:fecha AND ( t.fecha_pago is not null and t.fecha_pago not like '%0000-00-00%')",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':fecha'=>$fecha_completa)));
		}

		$total=0;

		foreach($AmortizacionesVencida as $AmortizacionVencida){
				$total+=($AmortizacionVencida->pago_capital+$AmortizacionVencida->pago_interes);
		}

		return self::atributosBDCM('Cantidad',$total);

	}

	public function getCantidadInteresSinVencer(){

		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";

		if(isset($this->id_grupo_cliente)){
			$AmortizacionesVencida=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado' or t.status='Registrado') AND t.fecha_amortizacion<=:fecha AND ( t.fecha_pago is not null and t.fecha_pago not like '%0000-00-00%')",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha'=>"$año-$mes-$dia")));
		}else{
			$AmortizacionesVencida=Amortizaciones::model()->with(array('id_disposicion0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Calculado' or t.status='Registrado') AND t.fecha_amortizacion<=:fecha AND ( t.fecha_pago is not null and t.fecha_pago not like '%0000-00-00%')",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':fecha'=>$fecha_completa)));
		}

		$total=0;

		foreach($AmortizacionesVencida as $AmortizacionVencida){
				$total+=($AmortizacionVencida->pago_interes);
		}

		return self::atributosBDCM('Cantidad',$total);

	}
	//AVALES
	public function getIdentificadorAvalBM($aval=null,$accionista=null){
		return "AV";
	}
	public function getRfcAvalBM($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$return=$aval->rfc;

		return self::atributosBDCM('RFC',$return);
	}
	public function getCodigoCiudadanoAvalBM($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
		$return=$aval->curp;

		return self::atributosBDCM('Codigo_Ciudadano',$return);
	}
	public function getNumeroDunAvalBM($aval=null,$accionista=null){
		return "";
	}
	public function getEmpresaAvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
			if($aval->tipo_persona=="Persona Moral"){
				$return=$empleo->razon;
			}

		return self::atributosBDCM('Compañía',$return);
	}
	public function getNombre1AvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
			if($aval->tipo_persona=="Persona Fisica"){
				$return=$aval->nombre;
			}
		return self::atributosBDCM('Nombre_1',$return);
	}
	public function getNombre2AvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			if($aval->tipo_persona=="Persona Fisica"){
				$return=$aval->nombre2;
			}

		return self::atributosBDCM('Nombre_2',$return);
	}
	public function getApellidoPaternoAvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			if($aval->tipo_persona=="Persona Fisica"){
				$return=$aval->apellido_paterno;
			}

		return self::atributosBDCM('Paterno',$return);
	}
	public function getApellidoMaternoAvalBM($aval=null,$accionista=null){

		   $aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			if($aval->tipo_persona=="Persona Fisica"){
				$return=$aval->apellido_materno;
			}

		return self::atributosBDCM('Materno',$return);
	}
	public function getDireccion1AvalBM($aval=null,$accionista=null){

			 $aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			$return=trim(trim($aval->calle." ".$aval->numero_exterior)." ".$aval->numero_interior);

		return self::atributosBDCM('Direccion_1',$return);
	}
	public function getDireccion2AvalBM($aval=null,$accionista=null){
		$return= "";
		return self::atributosBDCM('Direccion_1',$return);
	}
	public function getColoniaAvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			$return=$aval->colonia;

		return self::atributosBDCM('Colonia/Poblacion',$return);
	}
	public function getDelegacionMunicipioAvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			$return=$aval->municipio;

		return self::atributosBDCM('Delegacion/Municipio',$return);
	}
	public function getCiudadAvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			$return=$aval->ciudad;
		return self::atributosBDCM('Ciudad',$return);
	}
	public function getEstadoAvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			$estado=Estados::model()->find("estado=:estado",array(':estado'=>$aval->estado));
			$return=$estado->clave_buro;

		return self::atributosBDCM('Estado',$return);
	}
	public function getCodigoPostalAvalBM($aval=null,$accionista=null){

			 $aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			$return=$aval->codigo_postal;
		return self::atributosBDCM('C.P.',$return);
	}
	public function getTelefonoAvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
			 if (!is_null($aval)) {
			  $return=$aval->telefono;

			  return self::atributosBDCM('Telefono',$return);
		  }

	}
	public function getExtensionAvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			$return="";

		return self::atributosBDCM('Extension',$return);
	}
	public function getFaxAvalBM($aval=null,$accionista=null){

			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			$return="";

		return self::atributosBDCM('Fax',$return);
	}
	public function getTipoClienteAvalBM($aval=null,$accionista=null){

			 $aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
			 if (!is_null($aval)) {
				 if($aval->tipo_persona=="Persona Moral"){
					$return="1";
				 }else{
					$return="2";
				 }
			return self::atributosBDCM('Tipo_Cliente',$return);
			 }


	}
	public function getEstadoExtranjeroAvalBM($aval=null,$accionista=null){
		$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));

			$return="";

		return self::atributosBDCM('Estado_extranjero',$return);
	}
	public function getPaisAvalBM($aval=null,$accionista=null){
			$aval=AvalesSolicitudes::model()->find("id_solicitud=:soli",array(':soli'=>$this->id));
			$pais=Paises::model()->find("pais=:pais",array(':pais'=>$aval->pais));
			$return=$pais->iso;
		return self::atributosBDCM('Pais',$return);
	}
	public function getIdentificadorCierreBM($aval=null,$accionista=null){
		return "TS";
	}

	///////////////////////////////////////////
	//////////////BURO DE CRÉDITO PF//////////
	//////////////////////////////////////////
	//encabezado
	public function getClaveOtorganteBF(){
		$clave = Empresa::model()->find()->clave_buropf;
		if (strlen($clave) == 10){
			return $clave;
		}else{
			$bytesFaltantes = 10-strlen($clave);
			for($j=0;$j < $bytesFaltantes; $j++){
				$clave .=" ";
			}
			return $clave;
		}
	}
	public function getBuroInformacionAdicional(){
		$buroInformacionAdicional = Empresa::model()->find()->buro_informacion_adicional;
		if (strlen($buroInformacionAdicional) == 98){
			return $buroInformacionAdicional;
		}else{
			$bytesFaltantes = 98-strlen($buroInformacionAdicional);
			for($j=0; $j < $bytesFaltantes; $j++){
				$buroInformacionAdicional .= " ";
			}
			return $buroInformacionAdicional;
		}
	}
	public function getNombreOtorganteBF(){
		$nombreOtorgante = Empresa::model()->find()->nombre_usuario_buro;
		if (strlen($nombreOtorgante) == 16){
			return $nombreOtorgante;
		}else{
			$bytesFaltantes = 16-strlen($nombreOtorgante);
			for($j = 0; $j < $bytesFaltantes; $j++){
				$nombreOtorgante .=" ";
			}
			return $nombreOtorgante;
		}

	}
	public function getFechaBF(){
		return date("dmY",strtotime($this->fechaCorte));
	}
	//segmento pn
	public function getApellidoPaternoClienteBF(){
		$return="";
		if(isset($this->id_cliente0->id_pld_cliente0)){
			$return=strtoupper($this->id_cliente0->id_pld_cliente0->apellido_paterno);
		}
		return  self::atributosBDCF('APELLIDO_PATERNO',$return);
	}
	public function getApellidoMaternoClienteBF(){
		$return="NO PROPORCIONADO";
		if(isset($this->id_cliente0->id_pld_cliente0)){
			$return=strtoupper($this->id_cliente0->id_pld_cliente0->apellido_materno);
		}
		return  self::atributosBDCF('APELLIDO_MATERNO',$return);
	}
	public function getApellidoAdicionalClienteBF(){
		$return="";
		return  self::atributosBDCF('APELLIDO_ADICIONAL',$return);
	}
	public function getPrimerNombreClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=strtoupper($this->id_cliente0->nombre);
		}
		return  self::atributosBDCF('PRIMER_NOMBRE',$return);
	}
	public function getSegundoNombreClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=strtoupper($this->id_cliente0->nombre2);
		}
		return  self::atributosBDCF('SEGUNDO_NOMBRE',$return);
	}
	public function getFechaNacimientoClienteBF(){
		$return="";
		if(isset($this->id_cliente0->fecha_nacimiento) && $this->id_cliente0->fecha_nacimiento!=0){
			$return=date("dmY",strtotime($this->id_cliente0->fecha_nacimiento));
		}
		return self::atributosBDCF('FECHA_DE_NACIMIENTO',$return);
	}
	public function getRfcClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=strtoupper($this->id_cliente0->rfc);
		}
		return self::atributosBDCF('RFC',$return);
	}
	public function getPrefijoClienteBF(){
		$return="";//Es Opcional
		return self::atributosBDCF('PREFIJO',$return);
	}
	public function getSufijoClienteBF(){
		$return="";//Es Opcional
		return $return;
	}
	public function getNacionalidadClienteBF(){
		if(isset($this->id_cliente0->id_pld_cliente0->nacionalidad) && $this->id_cliente0->id_pld_cliente0->nacionalidad=="Mexicano"){
			$return="MX";
		}else{
			$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->id_pld_cliente0->pais_nacimiento));
			if(!is_null($pais)){
				$return=$pais->iso;
			}else{
				$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
				if(!is_null($pais)){
					$return=$pais->iso;
				}else{
					$return="";
				}
			}
		}
		return self::atributosBDCF('NACIONALIDAD',$return);
	}
	public function getEstadoCivilClienteBF(){
		$return="";
		if(isset($this->id_cliente0->estado_civil)){
			if($this->id_cliente0->estado_civil=="Divorciado"){
				$return="D";
			}elseif($this->id_cliente0->estado_civil=="Unión Libre"){
				$return="F";
			}elseif($this->id_cliente0->estado_civil=="Casado"){
				$return="M";
			}elseif($this->id_cliente0->estado_civil=="Casado con Separación de Bienes"){
				$return="M";
			}elseif($this->id_cliente0->estado_civil=="Casado con Bienes Mancomunados"){
				$return="M";
			}elseif($this->id_cliente0->estado_civil=="Soltero"){
				$return="S";
			}elseif($this->id_cliente0->estado_civil=="Viudo"){
				$return="W";
			}
		}
		return self::atributosBDCF('ESTADO_CIVIL',$return);
	}
	public function getLicenciaClienteBF(){
		$return="";//Es Opcional
		return $return;
	}
	public function getSexoClienteBF(){
		$return="";
		if(isset($this->id_cliente0->id_pld_cliente0)){
			if($this->id_cliente0->id_pld_cliente0->genero=="M"){
				$return="F";
			}elseif($this->id_cliente0->id_pld_cliente0->genero=="H"){
				$return="M";
			}
		}
		return self::atributosBDCF('SEXO',$return);
	}
	public function getSeguroClienteBF(){
		$return="";//Es Opcional
		return $return;
	}
	public function getRecidenciaClienteBF(){
		$return="";//Es Opcional
		return $return;
	}
	public function getIneClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=strtoupper($this->id_cliente0->ine);
		}
		return $return;
	}
	public function getCurpClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=strtoupper($this->id_cliente0->curp);
		}
		return $return;
	}
	public function getClavePaisClienteBF(){
		if(isset($this->id_cliente0->id_pld_cliente0->nacionalidad) && $this->id_cliente0->id_pld_cliente0->nacionalidad=="Mexicano"){
			$return="MX";
		}else{
			$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->id_pld_cliente0->pais_nacimiento));
			if(!is_null($pais)){
				$return=$pais->iso;
			}else{
				$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
				if(!is_null($pais)){
					$return=$pais->iso;
				}else{
					$return="";
				}
			}
		}
		return self::atributosBDCF('NACIONALIDAD',$return);
	}
	public function getDependientesClienteBF(){
		$return="";
		return $return;
	}
	public function getEdadesDependientesClienteBF(){
		$return="";
		return $return;
	}
	public function getFechaResidenciaClienteBF(){
		$return="";
		return $return;
	}
	public function getExttelefonoClienteBF(){
		$return="";
		return $return;
	}
	public function getFaxClienteBF(){
		$return="";
		return $return;
	}
	public function getTipoDomicilioClienteBF(){
		$return="";
		return $return;
	}
	public function getIndicadorDomicilioClienteBF(){
		$return="";
		return $return;
	}
	public function getFechaDefuncionClienteBF(){
		$return="";//Es Opcional
		return self::atributosBDCF('FECHA_DEFUNCIÓN',$return);
	}
	public function getIndicadorDefuncionClienteBF(){
		$return="";//Es Opcional
		return self::atributosBDCF('INDICADOR_DEFUNCIÓN',$return);
	}
	//segmento pa
	public function getDireccion1ClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=$this->id_cliente0->calle." ".$this->id_cliente0->numero_exterior;
			if(strlen($return)>40){
				$return=substr($return,0,40);
			}
		}
		$return=strtoupper($return);
		return self::atributosBDCF('DIRECCIÓN_CALLE_NÚMERO',$return);
	}
	public function getDireccion2ClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=$this->id_cliente0->calle." ".$this->id_cliente0->numero_exterior;
			if(strlen($return)>40){
				$return=substr($return,40,40);
			}else{
				$return="";
			}
		}
		$return=strtoupper($return);
		return self::atributosBDCF('DIRECCIÓN_COMPLEMENTO',$return);
	}
	public function getColoniaClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=strtoupper($this->id_cliente0->colonia);
		}
		return self::atributosBDCF('COLONIA_O_POBLACIÓN',$return);
	}
	public function getDelegacionMunicipioClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=strtoupper($this->id_cliente0->municipio);
		}
		return self::atributosBDCF('DELEGACIÓN_O_MUNICIPIO',$return);
	}
	public function getCiudadClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			if (isset($this->id_cliente0->ciudad) AND $this->id_cliente0->ciudad != "") {
				$return=strtoupper($this->id_cliente0->ciudad);
			}else{
				$return=strtoupper($this->id_cliente0->municipio);
			}

		}
		return self::atributosBDCF('CIUDAD',$return);
	}
	public function getEstadoClienteBF(){
		$return="";
		$estado=Estados::model()->find("estado=:estado",array(':estado'=>$this->id_cliente0->estado));
		if(isset($estado)){
			$return=$estado->clave_buro;
		}
		return self::atributosBDCF('ESTADO',$return);
	}
	public function getCodigoPostalClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=$this->id_cliente0->codigo_postal;
		}
		return self::atributosBDCF('C.P.',$return);
	}
	public function getTelefonoClienteBF(){
		$return="";
		if(isset($this->id_cliente0)){
			$return=$this->id_cliente0->telefono;
		}
		return self::atributosBDCF('TELÉFONO',$return);
	}

	public function getDireccionOrigenClienteBF(){
		//Pais
		$return="";
		$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
		if(isset($pais)){
			$return=$pais->iso;
		}
		return self::atributosBDCF('DIRECCIÓN_ORIGEN',$return);
	}
	//EMPLEO
	public function getExtEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=$this->id_cliente0->id_empleo0->extension;
		}
		return $return;
	}
	public function getOcupacionEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=$this->id_cliente0->id_empleo0->puesto;
		}
		return $return;
	}
	public function getFechaContratacionEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=$this->id_cliente0->id_empleo0->fecha_contratacion;
		}
		return $return;
	}
	/////////////////////////////////////////////
	public function getClaveMonedaEmpleoBF(){
		$return="";
		return $return;
	}
	////////////////////////////////////////////
	public function getBaseSalarialEmpleoBF(){
		$return="";
		return $return;
	}
	//////////////////////////////////////////
	public function getNumEmpleoBF(){
		$return="";
		return $return;
	}
	public function getFechaultimodiaEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0->fecha_ultimo_dia)){
			if ($this->id_cliente0->id_empleo0->fecha_ultimo_dia == "0000-00-00") {
			  $return="";
			}else{
			  $return=$this->id_cliente0->id_empleo0->fecha_ultimo_dia;
			}
		}
		return $return;
	}
	public function getFechaVerificacionEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=$this->id_cliente0->id_empleo0->fecha_verificacion;
		}
		return $return;
	}
	public function getFaxEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=$this->id_cliente0->id_empleo0->fax;
		}
		return $return;
	}
	public function getEmpresaEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=strtoupper($this->id_cliente0->id_empleo0->empresa);
		}
		return self::atributosBDCF('EMPRESA',$return);
	}
	public function getDireccion1EmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=$this->id_cliente0->id_empleo0->direccion;
			if(strlen($return)>40){
				$return=substr($return,0,40);
			}
		}
		$return=strtoupper($return);
		return self::atributosBDCF('DIRECCIÓN_CALLE_NÚMERO_1',$return);
	}
	public function getDireccion2EmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=$this->id_cliente0->id_empleo0->direccion;
			if(strlen($return)>40){
				$return=substr($return,40,40);
			}else{
				$return="";
			}
		}
		$return=strtoupper($return);
		return self::atributosBDCF('DIRECCIÓN_COMPLEMENTO_1',$return);
	}
	public function getColoniaEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=strtoupper($this->id_cliente0->id_empleo0->colonia);
		}
		return self::atributosBDCF('COLONIA_O_POBLACIÓN_1',$return);
	}
	public function getDelegacionMunicipioEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=strtoupper($this->id_cliente0->id_empleo0->municipio);
		}
		return self::atributosBDCF('DELEGACIÓN_O_MUNICIPIO_1',$return);
	}
	public function getCiudadEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=strtoupper($this->id_cliente0->id_empleo0->ciudad);
		}
		return self::atributosBDCF('CIUDAD_1',$return);
	}
	public function getEstadoEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$estado=Estados::model()->find("estado=:estado",array(':estado'=>$this->id_cliente0->id_empleo0->estado));
			if(isset($estado)){
				$return=$estado->clave_buro;
			}
		}
		return self::atributosBDCF('ESTADO_1',$return);
	}
	public function getCodigoPostalEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=$this->id_cliente0->id_empleo0->codigo_postal;
		}
		return self::atributosBDCF('C.P._1',$return);
	}
	public function getTelefonoEmpleoBF(){
		$return="";
		if(isset($this->id_cliente0->id_empleo0)){
			$return=$this->id_cliente0->id_empleo0->telefono;
		}
		return self::atributosBDCF('TELÉFONO_1',$return);
	}
	public function getSalarioEmpleoBF(){
		$return="";

		return self::atributosBDCF('SALARIO',$return);
	}
	public function getDireccionOrigenEmpleoBF(){
		$return="";//Es fijo por ahora
		if (isset($this->id_cliente0->id_empleo0)) {
			$return = "MX";
		}
		return $return;
	}
	//SEGMENTO TL
	public function getImporteAvaluoCreditoBF(){
		$return="";
		return $return;
	}
	public function getGarantiaCreditoBF(){
		$return="";
		return $return;
	}
	public function getClaveOtorganteCreditoBF(){
		$empresa=Empresa::model()->find();
		$return="";
		if(!is_null($empresa)){
			$return=$empresa->clave_buro;
		}
		return self::atributosBDCF('CLAVE_OTORGANTE',$return);
	}
	public function getNombreOtorganteCreditoBF(){
		$empresa=Empresa::model()->find();
		$return="";
		if(!is_null($empresa)){
			$return=$empresa->nombre_usuario_buro;
		}
		return self::atributosBDCF('NOMBRE_DEL_OTORGANTE',$return);
	}
	public function getNumeroCuentaCreditoBF(){
		//$return=$this->contrato;
		$return=$this->contrato."-".$this->id_cliente0->clave;
		return self::atributosBDCF('NUMERO_CUENTA',$return);
	}
	public function getTipoResponsabilidadCreditoBF(){
		$return="";
		if(isset($this->id_grupo_cliente)){
			$return="J";//Mancomunado (Solidario)
		}else{
			$return="I";//Invididual
		}
		return self::atributosBDCF('TIPO_RESPONSABILIDAD_CUENTA',$return);
	}
	public function getTipoCreditoBF(){
		$return="";
		if(isset($this->id_producto0->id_tipo_cuenta0)){
			$return=$this->id_producto0->id_tipo_cuenta0->valor_buro;
		}
		return self::atributosBDCF('TIPO_CUENTA',$return);
	}
	public function getTipoContratoCreditoBF(){//pendiente
		$return="";
		if($this->id_producto0->id_tipo_producto0->nombre=="Arrendamiento Puro"){
			$return="LS";
		}elseif($this->id_producto0->id_tipo_producto0->nombre=="Nomina"){
			$return="PN";
		}else{
			$return="PL";
		}
		return self::atributosBDCF('TIPO_CONTRATO',$return);
	}
	public function getMonedaCreditoBF(){
		$return="MX";
		return self::atributosBDCF('MONEDA',$return);
	}
	public function getNumeroPagosCreditoBF(){

		if ($this->id_producto0->id_tipo_cuenta0->valor == "R" or $this->id_producto0->id_tipo_cuenta0->valor == "L") {
			$return=" ";
		}else{
			$return=$this->plazo_autorizado;
		}
		return self::atributosBDCM('Numero_Pagos',$return);
	}
	public function getFrecuenciaPagosCreditoBF(){
		$return=$this->id_producto0->id_tipo_amortizacion0->clave_buro_credito;
		return self::atributosBDCF('FRECUENCIA_DE_PAGOS',$return);
	}
	public function getFechaAperturaCreditoBF(){
		$return=date("dmY",strtotime($this->fecha_disposicion));
		return self::atributosBDCF('FECHA_APERTURA',$return);
	}
	public function getMontoPagarCreditoBF(){
		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		if($mes<12){
			$mes++;//A diferencia de circulo de crédito se reporta el del periodo siguiente
		}else{
			$mes=1;
			$año++;
		}
		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with("id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND YEAR(fecha_amortizacion)=:year AND MONTH(fecha_amortizacion)=:mes",array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes));
		}else{


			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND id_solicitud0.fecha_disposicion<=:soli AND YEAR(t.fecha_amortizacion)<=:year AND DAY(t.fecha_amortizacion)<=:day AND MONTH(t.fecha_amortizacion)<=:mes OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.status='Calculado' AND id_disposicion0.fecha<=:disposicion AND YEAR(t.fecha_amortizacion)<=:year2 AND DAY(t.fecha_amortizacion)<=:day2 AND MONTH(t.fecha_amortizacion)<=:mes2
			))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':year'=>$año,':day'=>$dia,':day2'=>$dia,':mes'=>$mes,':year2'=>$año,':mes2'=>$mes,':disposicion'=>$periodo,':soli'=>$periodo)));
		}
		$total=0;
		foreach ($amortizaciones as $amortizacion){
			$total=$amortizacion->pago_total;
			$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion->id));
			foreach ($parcialidades as $parcialidad){
				$total-=$parcialidad->pago_total;
			}
		}
		$return=round($total);
		return self::atributosBDCF('MONTO_A_PAGAR',$return);
	}
	public function getFechaUltimoPagoCreditoBF(){
		$return=date("dmY",strtotime($this->fecha_disposicion));
		$ultimaDisposicion=Disposiciones::model()->find(array('condition'=>"id_solicitud=:solicitud",'order'=>'fecha DESC','params'=>array(':solicitud'=>$this->id)));
		if(!is_null($ultimaDisposicion)){
			$return=date("dmY",strtotime($ultimaDisposicion->fecha));
		}
		$periodo=$this->getPeriodoBM();
		$mes=intval(substr($periodo, 0,2));
		$año=intval(substr($periodo, 2));
		if(isset($this->id_grupo_cliente)){
			//Notese que toma el id del cliente, pero esto es porque temporalmente se asignan los datos inviduales de cada integrante del grupo a la solicitud y el id_cliente se coloca de que integrante corresponde
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)=:mes","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,'cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes)));
			$ultimaAmortizacion=Amortizaciones::model()->with("id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)=:mes AND t.status='Registrado' AND NOT EXISTS(SELECT id FROM parcialidades_amortizaciones WHERE id_amortizacion=t.id)","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes)));
		}else{
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0")->find(array("condition"=>"id_amortizacion0.id_solicitud=:solicitud AND YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)=:mes","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':year'=>$año,':mes'=>$mes)));
			$ultimaAmortizacion=Amortizaciones::model()->find(array("condition"=>"id_solicitud=:solicitud AND YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)=:mes AND t.status='Registrado' AND NOT EXISTS(SELECT id FROM parcialidades_amortizaciones WHERE id_amortizacion=t.id)","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':year'=>$año,':mes'=>$mes)));
		}
		if(!is_null($ultimaParcialidad)){
			if(!is_null($ultimaAmortizacion)){
				if(strtotime($ultimaParcialidad)>strtotime($ultimaAmortizacion)){
					$return=date("dmY",strtotime($ultimaParcialidad->fecha_pago));
				}else{
					$return=date("dmY",strtotime($ultimaAmortizacion->fecha_pago));
				}
			}else{
				$return=date("dmY",strtotime($ultimaParcialidad->fecha_pago));
			}
		}else{
			if(!is_null($ultimaAmortizacion)){
				$return=date("dmY",strtotime($ultimaParcialidad->fecha_pago));
			}
		}
		$return=$return;
		return self::atributosBDCF('FECHA_ÚLTIMO_PAGO',$return);
	}
	public function getFechaUltimaCompraCreditoBF(){
		$return=date("dmY",strtotime($this->fecha_disposicion));
		$ultimaDisposicion=Disposiciones::model()->find(array('condition'=>"id_solicitud=:solicitud",'order'=>'fecha DESC','params'=>array(':solicitud'=>$this->id)));
		if(!is_null($ultimaDisposicion)){
			$return=date("dmY",strtotime($ultimaDisposicion->fecha));
		}
		$return=$return;
		return self::atributosBDCF('FECHA_ULTIMA_COMPRA',$return);
	}
	public function getFechaCierreCreditoBF(){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		$n=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->count(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Calculado'",'order'=>'t.numero_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		if($n==0){
			$ultimaAmortizacion=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->find(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Registrado' OR t.status='Reestructurado' OR t.status='Quebrantado' OR t.status= 'Registrada')",'order'=>'t.fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));

			if(!is_null($ultimaAmortizacion)){
				if ($ultimaAmortizacion->fecha_pago > $fecha_completa) {
					$return=null;
				}else{
					$return=date("dmY",strtotime($ultimaAmortizacion->fecha_pago));
				}
			}
		}
		return $return;
	}

	public function getFechaReporteCreditoBF($returnFormat = "dmY"){
		 return date($returnFormat, strtotime("+1 DAY", strtotime($this->fechaCorte)));
	}

	// TODO Preguntar para que sirve esta funcion
	public function getFechaReporteCreditoMesBM(){
		  return date("Ym"."15",strtotime($this->fechaCorte));
	}

	/**
	 * Este metodo retorna la fecha en que se finalizó un credito
	 * si el credito sigue vigente entonces se retorna NULL
	 */
	public function getFechaCierreCreditoMesBM(){
		$fecha_completa = $this->fechaCorte . " " . "00:00:00";

		// Se hace una consulta de cuantas amortizaciones hay vigentes 
		$n = Amortizaciones::model()
			->with(array('id_grupo_solidario0','id_disposicion0'))
			->count(
				array(
					'condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Calculado'",
					'order'=>'t.numero_amortizacion DESC',
					'params'=>array(':solicitud'=>$this->id)
				)
			);

		// Si ya no hay amortizaciones vigentes (Credito finalizado)
		$return = null;
		if($n==0){
			// Se selecciona la ultima amortizacion del credito
			$ultimaAmortizacion = Amortizaciones::model()
				->with(array('id_grupo_solidario0','id_disposicion0'))
				->find(
					array(
						'condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Registrado' OR t.status='Reestructurado' OR t.status='Quebrantado' OR t.status= 'Registrada')",
						'order'=>'t.fecha_amortizacion DESC',
						'params'=>array(':solicitud'=>$this->id)
					)
				);

			// Si existe el registro
			if(!is_null($ultimaAmortizacion)){
				// Si la fecha de pago de la ultima amortizacion es menor que la fecha del reporte (Fecha de corte)
				if ($ultimaAmortizacion->fecha_pago < $fecha_completa) {
					$return = date("Ym"."15", strtotime($ultimaAmortizacion->fecha_pago));
				}
			}
		}

		return $return;
	}

	public function getFechaCierreCreditoMesBF(){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		$n=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->count(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Calculado'",'order'=>'t.numero_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		if($n==0){
			$ultimaAmortizacion=Amortizaciones::model()->with(array('id_grupo_solidario0','id_disposicion0'))->find(array('condition'=>"(t.id_solicitud=:solicitud OR id_grupo_solidario0.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Registrado' OR t.status='Reestructurado' OR t.status='Quebrantado' OR t.status= 'Registrada')",'order'=>'t.fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));

			if(!is_null($ultimaAmortizacion)){
				if ($ultimaAmortizacion->fecha_pago > $fecha_completa) {
					$return=null;
				}else{
					$return=date("dmY",strtotime($ultimaAmortizacion->fecha_pago));
				}
			}
		}
		return $return;
	}
	public function getFechaReporteCreditoMesBF(){
		  return date("Ym"."15",strtotime($this->fechaCorte));
	}
	public function getCreditoMaximoCreditoBF(){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$return=$this->entregable;
		}else{
			$disposiciones=Disposiciones::model()->findAll("id_solicitud=:solicitud AND fecha<=:fecha ORDER BY importe DESC",array(':solicitud'=>$this->id,':fecha'=>$fecha_completa));
			foreach ($disposiciones as $disposición) {
				if ($disposición->importe >= $this->entregable) {
					$return+= $disposición->importe;
				}else{
					$return=$this->entregable;
				}
			}

		}
		return round($return);
	}
	public function getSaldoActualCreditoBF(){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));

		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.fecha_pago>=:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00') AND (t.status='Calculado' OR t.status = 'Registrado')",'order'=>'t.fecha_pago ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fechaPago'=>$fecha_completa)));
		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND t.status='Calculado' AND id_solicitud0.fecha_disposicion<=:soli OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.status='Calculado' AND id_disposicion0.fecha<=:disposicion))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':disposicion'=>$periodo,':soli'=>$periodo)));
		}
		foreach ($amortizaciones as $amortizacion){
			$return+=$amortizacion->pago_capital+$amortizacion->pago_interes;
			$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion",array(':amortizacion'=>$amortizacion->id));
			foreach ($parcialidades as $parcialidad){
				$return-=$parcialidad->pago_capital+$amortizacion->pago_interes;
			}
		}
		$return=round($return);
		return self::atributosBDCF('SALDO_ACTUAL',$return);
	}
	public function getLimiteCreditoBF(){
		$return="";
		if($this->id_producto0->id_tipo_producto0->nombre=="Revolvente"){
			$return=$this->monto_autorizado;
		}else{
			$return=0;
		}
		$return=round($return);
		return self::atributosBDCF('LIMITE_DE_CREDITO',$return);
	}
	public function getSaldoVencidoCreditoBF(){
		 $periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";

		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado') AND (YEAR(t.fecha_amortizacion)<=:year AND MONTH(t.fecha_amortizacion)<=:mes)",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes)));

		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND t.status='Calculado' AND id_solicitud0.fecha_disposicion<=:soli AND (t.fecha_amortizacion)<=:fecha1  OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.status='Calculado' AND id_disposicion0.fecha<=:disposicion AND (t.fecha_amortizacion)<=:fecha2
		))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':disposicion'=>$periodo,':soli'=>$periodo,':fecha1'=>$fecha_completa,':fecha2'=>$fecha_completa)));
		}
		foreach ($amortizaciones as $amortizacion){
			$return+=$amortizacion->pago_capital+$amortizacion->pago_interes;
			$parcialidades=ParcialidadesAmortizaciones::model()->findAll("id_amortizacion=:amortizacion AND fecha_pago<=:fecha",array(':amortizacion'=>$amortizacion->id,':fecha'=>$fecha_completa));
			foreach ($parcialidades as $parcialidad){
				$return-=$parcialidad->pago_capital+$amortizacion->pago_interes;
			}
		}
		$return=round($return);
		return self::atributosBDCF('Cantidad',$return);
	}
	public function getNumeroPagosVencidoCreditoBF(){
		$return=0;
		$periodo=$this->getFechaReporteCreditoBF();
		$dia=intval(substr($periodo, 0,2));
		$mes=intval(substr($periodo, 2,2));
		$año=intval(substr($periodo, 4));
		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado' OR (YEAR(t.fecha_pago)>=:year AND MONTH(t.fecha_pago)>:mes))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes)));
		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND (t.status='Calculado' OR (YEAR(t.fecha_pago)>=:year AND MONTH(t.fecha_pago)>:mes))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':year'=>$año,':mes'=>$mes)));
		}
		foreach ($amortizaciones as $amortizacion){
			if(strtotime($amortizacion->fecha_amortizacion)<strtotime("$año-$mes-$dia")){
				if($amortizacion->pago_total>0){
					$return++;
				}else{
					$return = 0;
				}
			}
		}
		return $return;
	}
	public function getFormaPagoMopCreditoBF(){
		$return=0;
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";

	   if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado'  OR t.status = 'Registrado') AND (t.fecha_amortizacion)<=:fecha1 AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa,':fechaPago'=>$fecha_completa)));

	   }else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND (t.status='Calculado'  OR t.status = 'Registrado') AND id_solicitud0.fecha_disposicion<=:soli AND (t.fecha_amortizacion)<=:fecha1 AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null) OR (
		  id_disposicion0.id_solicitud=:solicitud2 AND t.status='Calculado' AND id_disposicion0.fecha<=:disposicion AND (t.fecha_amortizacion)<=:fecha2
	   ))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':disposicion'=>$periodo,':soli'=>$periodo,':fecha1'=>$fecha_completa,':fecha2'=>$fecha_completa,':fechaPago'=>$fecha_completa)));

	   }
	   foreach ($amortizaciones as $amortizacion){
			if(strtotime($amortizacion->fecha_pago)<strtotime($fecha_completa)){
				if($amortizacion->pago_total>0){
					$return++;
				}else{
					$return=0;
				}
			}else{
				$return=0;
			}
		}
		if($return==0){
			$this->_pagoActual="0";
		}else{
			$this->_pagoActual=str_pad($return, 2,"0",STR_PAD_LEFT);
		}

		return $this->_pagoActual;

	}

	public function getClaveObservacionCreditoBF(){
		$return="";
		return self::atributosBDCF('CLAVE_OBSERVACION',$return);
	}
	public function getClaveAnteriorOtorganteCreditoBF(){
		$return="";
		return self::atributosBDCF('CLAVE_ANTERIOR_OTORGANTE',$return);
	}
	public function getNombreAnteriorOtorganteCreditoBF(){
		$return="";
		return self::atributosBDCF('NOMBRE_ANTERIOR_OTORGANTE',$return);
	}
	public function getNumeroCuentaAnteriorCreditoBF(){
		$return="";
		return self::atributosBDCF('NÚMERO_CTA_ANTERIOR',$return);
	}
	public function getFechaPrimerIncumplimientoCreditoBF(){
		if(isset($this->id_grupo_cliente)){
			$primeraAmortizacionMoratorios=Amortizaciones::model()->with(array('id_grupo_solidario0'))->find(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND IFNULL(t.pago_moratorios,0)>0",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente)));
		}else{
			$primeraAmortizacionMoratorios=Amortizaciones::model()->with(array('id_disposicion0'))->find(array('condition'=>"(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND IFNULL(t.pago_moratorios,0)>0",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id)));
		}
		if(!is_null($primeraAmortizacionMoratorios)){
			$return=date("dmY",strtotime($primeraAmortizacionMoratorios->fecha_amortizacion));
		}else{
			$return="01011900";
		}

		return self::atributosBDCF('FECHA_PRIMER_INCUMPLIMIENTO',$return);
	}
	public function getSaldoInsolutoCreditoBF(){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.fecha_pago>=:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00') AND (t.status='Calculado' OR t.status = 'Registrado')",'order'=>'t.fecha_pago ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fechaPago'=>$fecha_completa)));
		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND id_solicitud0.fecha_disposicion<=:soli AND t.fecha_amortizacion<=:fechaAmortizacion AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL) AND (t.status='Calculado' OR t.status = 'Registrado') OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.fecha_amortizacion<=:fechaAmortizacion2 AND (t.status='Calculado' OR t.status = 'Registrado') AND id_disposicion0.fecha<=:disposicion AND (t.fecha_pago>:fechaPago2 OR t.fecha_pago = '0000-00-00 00:00:00')
		))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':fechaAmortizacion'=>$fecha_completa,':disposicion'=>$periodo,':soli'=>$periodo,':fechaPago'=>$fecha_completa,':fechaPago2'=>$fecha_completa,':fechaAmortizacion2'=>$fecha_completa)));
		}
		foreach ($amortizaciones as $amortizacion){
			$return+=$amortizacion->pago_capital;
		}
		$return=round($return);
		return $return;
	}
	public function getMontoUltimoPagoCreditoBF(){
		$return=$this->entregable;
		$ultimaDisposicion=Disposiciones::model()->find(array('condition'=>"id_solicitud=:solicitud",'order'=>'fecha DESC','params'=>array(':solicitud'=>$this->id)));
		if(!is_null($ultimaDisposicion)){
			$return=$ultimaDisposicion->importe;
		}
		$periodo=$this->getPeriodoBM();
		$mes=intval(substr($periodo, 0,2));
		$año=intval(substr($periodo, 2));
		if(isset($this->id_grupo_cliente)){
			//Notese que toma el id del cliente, pero esto es porque temporalmente se asignan los datos inviduales de cada integrante del grupo a la solicitud y el id_cliente se coloca de que integrante corresponde
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND ((YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)<=:mes) OR YEAR(t.fecha_pago)<:year)","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,'cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes)));
			$ultimaAmortizacion=Amortizaciones::model()->with("id_grupo_solidario0")->find(array("condition"=>"id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente AND ((YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)<=:mes) OR YEAR(t.fecha_pago)<:year) AND t.status='Registrado' AND NOT EXISTS(SELECT id FROM parcialidades_amortizaciones WHERE id_amortizacion=t.id)","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':year'=>$año,':mes'=>$mes)));
		}else{
			$ultimaParcialidad=ParcialidadesAmortizaciones::model()->with("id_amortizacion0")->find(array("condition"=>"id_amortizacion0.id_solicitud=:solicitud AND ((YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)<=:mes) OR YEAR(t.fecha_pago)<:year)","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':year'=>$año,':mes'=>$mes)));
			$ultimaAmortizacion=Amortizaciones::model()->find(array("condition"=>"id_solicitud=:solicitud AND ((YEAR(t.fecha_pago)=:year AND MONTH(t.fecha_pago)<=:mes) OR YEAR(t.fecha_pago)<:year) AND t.status='Registrado' AND NOT EXISTS(SELECT id FROM parcialidades_amortizaciones WHERE id_amortizacion=t.id)","order"=>"t.fecha_pago DESC",'params'=>array(':solicitud'=>$this->id,':year'=>$año,':mes'=>$mes)));
		}
		if(!is_null($ultimaParcialidad)){
			if(!is_null($ultimaAmortizacion)){
				if(strtotime($ultimaParcialidad)>strtotime($ultimaAmortizacion)){
					$return=$ultimaParcialidad->pago_total;
				}else{
					$return=$ultimaAmortizacion->pago_total;
				}
			}else{
				$return=$ultimaParcialidad->pago_total;
			}
		}else{
			if(!is_null($ultimaAmortizacion)){
				$return=$ultimaAmortizacion->pago_total;
			}else{
				$return=0;
			}
		}
		$return=round($return);
		return self::atributosBDCF('MONTO_ULTIMO_PAGO',$return);
	}
	public function getPlazoCreditoBF(){
		if(isset($this->id_grupo_cliente)){
			$amortizacion=Amortizaciones::model()->with("id_grupo_solidario0")->find(array("condition"=>"(id_grupo_solidario0.id_solicitud=:solicitud)",'order'=>'t.fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		}else{
			$amortizacion=Amortizaciones::model()->find(array("condition"=>"(t.id_solicitud=:solicitud)",'order'=>'t.fecha_amortizacion DESC','params'=>array(':solicitud'=>$this->id)));
		}
		$dias=round((strtotime($amortizacion->fecha_amortizacion)-strtotime($this->fecha_disposicion))/60/60/24);
		$meses=round($dias/30.4,2);
		$return=$meses;
		return self::atributosBDCF('PLAZO_CREDITO',$return);
	}
	public function getMontoOriginalCreditoBF(){
		$return=$this->monto_autorizado;
		$return=round($return);
		return self::atributosBDCF('MONTO_CREDITO_ORIGINAL',$return);
	}
	public function getFechaIngresoCarteraVencidaCreditoBF(){
		$solicitudes = Solicitudes::model()->FindAll('id=:id',array(':id'=>$this->id));
		foreach ($solicitudes as $solicitud){
			if (isset($solicitud->fecha_cartera_vencida) and $solicitud->fecha_cartera_vencida != "" ) {
				$fecha = $solicitud->fecha_cartera_vencida;
				$fecha2 = strtotime($fecha);
				$return=date("dmY",$fecha2);
			}else{
				$return = " ";
			}
		}
		return$return;
	}
	public function getMontoInteresesCreditoBF(){
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL) AND (t.status='Calculado' OR t.status = 'Registrado') AND (t.fecha_amortizacion)<=:fecha1",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa,':fechaPago'=>$fecha_completa)));
		}else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND id_solicitud0.fecha_disposicion<=:soli AND t.fecha_amortizacion<=:fechaAmortizacion AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago IS NULL) AND (t.status='Calculado' OR t.status = 'Registrado') OR (
		   id_disposicion0.id_solicitud=:solicitud2 AND t.fecha_amortizacion<=:fechaAmortizacion2 AND (t.status='Calculado' OR t.status = 'Registrado') AND id_disposicion0.fecha<=:disposicion AND (t.fecha_pago>:fechaPago2 OR t.fecha_pago = '0000-00-00 00:00:00')
		))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':fechaAmortizacion'=>$fecha_completa,':disposicion'=>$periodo,':soli'=>$periodo,':fechaPago'=>$fecha_completa,':fechaPago2'=>$fecha_completa,':fechaAmortizacion2'=>$fecha_completa)));
		}
		foreach ($amortizaciones as $amortizacion){
			$return+=$amortizacion->pago_interes;
		}
		$return=round($return);
		return $return;
	}
	public function getFormaPagoMopInteresesCreditoBF(){
		$return=0;
		$periodo=$this->fechaCorte;
		$fecha_completa = $periodo." "."23:59:59";

	   if(isset($this->id_grupo_cliente)){
			$amortizaciones=Amortizaciones::model()->with(array('id_grupo_solidario0'))->findAll(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND (t.status='Calculado'  OR t.status = 'Registrado') AND (t.fecha_amortizacion)<=:fecha1 AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null)",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha1'=>$fecha_completa,':fechaPago'=>$fecha_completa)));

	   }else{
			$amortizaciones=Amortizaciones::model()->with(array('id_disposicion0','id_solicitud0'))->findAll(array('condition'=>"(t.id_solicitud=:solicitud AND (t.status='Calculado'  OR t.status = 'Registrado') AND id_solicitud0.fecha_disposicion<=:soli AND (t.fecha_amortizacion)<=:fecha1 AND (t.fecha_pago >:fechaPago OR t.fecha_pago = '0000-00-00 00:00:00' OR t.fecha_pago is null) OR (
		  id_disposicion0.id_solicitud=:solicitud2 AND t.status='Calculado' AND id_disposicion0.fecha<=:disposicion AND (t.fecha_amortizacion)<=:fecha2
	   ))",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':solicitud2'=>$this->id,':disposicion'=>$periodo,':soli'=>$periodo,':fecha1'=>$fecha_completa,':fecha2'=>$fecha_completa,':fechaPago'=>$fecha_completa)));

	   }
	   foreach ($amortizaciones as $amortizacion){
			if(strtotime($amortizacion->fecha_pago)<strtotime($fecha_completa)){
				if($amortizacion->pago_total>0){
					$return++;
				}else{
					$return=0;
				}
			}else{
				$return=0;
			}
		}
		if($return==0){
			$this->_pagoActual="0";
		}else{
			$this->_pagoActual=str_pad($return, 2,"0",STR_PAD_LEFT);
		}

		return $this->_pagoActual;
	}
	public function getDiasVencimientoCreditoBF(){
		$periodo=$this->fechaCorte;
		$mes=intval(substr($periodo, 6,7));
		$año=intval(substr($periodo, 0,4));
		$dia=intval(substr($periodo, 8,9));
		$fecha_completa = $periodo." "."00:00:00";
		if(isset($this->id_grupo_cliente)){
			$primeraAmortizacionVencida=Amortizaciones::model()->with(array('id_grupo_solidario0'))->find(array('condition'=>"(id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente) AND t.status='Calculado' AND t.fecha_amortizacion<:fecha AND t.pago_total>0",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':cliente'=>$this->id_cliente,':fecha'=>"$año-$mes-$dia")));
		}else{
			$primeraAmortizacionVencida=Amortizaciones::model()->with(array('id_disposicion0'))->find(array('condition'=>"(t.id_solicitud=:solicitud OR id_disposicion0.id_solicitud=:solicitud) AND t.status='Calculado' AND t.fecha_amortizacion<=:fecha AND t.pago_total>0",'order'=>'t.fecha_amortizacion ASC','params'=>array(':solicitud'=>$this->id,':fecha'=>$fecha_completa)));
		}
		if(!is_null($primeraAmortizacionVencida)){
			if (strtotime($fecha_completa)==strtotime($primeraAmortizacionVencida->fecha_amortizacion)) {
				$return=1;
			}else{
				$return=round((strtotime($fecha_completa)-strtotime($primeraAmortizacionVencida->fecha_amortizacion))/60/60/24,0);
			}
		}else{
			$return=0;
		}

		return self::atributosBDCM('Dias_Vencimiento',$return);
	}
	public function getCorreoElectronicoCreditoBF(){
		$return=$this->id_cliente0->email;
		return self::atributosBDCF('CORREO_ELECTRONICO',$return);
	}

	public function getDetallesPeriodo($fecha1,$fecha2,$disposicion=null,$cliente=null){
		$model=$this;
		$data=array();

		if(is_null($cliente)){
			if(is_null($disposicion)){
				$sqlComisiones="
					SELECT
						*
					FROM
						comisiones_amortizaciones c LEFT JOIN
						amortizaciones a ON(c.id_amortizacion=a.id)
					WHERE
						a.id_solicitud={$model->id} AND
						c.financiado<>1
				";
				$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
				$infoComisiones=array();
				foreach ($dataComisiones as $comision) {
					$infoComisiones[$comision["id_amortizacion"]][]=array(
						'comision'=>$comision["nombre"],
						'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
						'iva'=>$comision["monto_impuesto"],
					);
				}
				$amortizaciones=Amortizaciones::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$model->id));
				/*if(strtotime($model->fecha_disposicion)>=strtotime($fecha1) && strtotime($model->fecha_disposicion)<=strtotime($fecha2)){
					//Se hace el cargo de la disposicion con fecha de la disposicion de la solicitud
					$data['resumen']['capital']['cargos']+=$model->entregable;
					$data['resumen']['capital']['abonos']+=0;
					$data['resumen']['capital']['saldo']+=$model->entregable;
					$data['resumen']['capital']['saldo_total']+=$model->entregable;

					$data['detalles'][$model->fecha_disposicion][]=array(
						'operacion'=>'disposicion',
						'fecha'=>$model->fecha_disposicion,
						'concepto'=>"Disposición",
						'cargo'=>$model->entregable,
						'abono'=>0,
						'capital'=>$model->entregable,
						'interes'=>0,
						'mora'=>0,
						'iva'=>0,
					);
				}elseif(strtotime($model->fecha_disposicion)<strtotime($fecha1)){
					//Si la fecha de disposición es menor a la fecha inicial se agrega como saldo anterior
					$data['resumen']['capital']['saldo_anterior']+=$model->entregable;
					$data['resumen']['capital']['saldo_total']+=$model->entregable;
				}*/
				$data['resumen']['capital']['saldo_linea']+=$model->entregable;
			}else{
				$sqlComisiones="
					SELECT
						*
					FROM
						comisiones_amortizaciones c LEFT JOIN
						amortizaciones a ON(c.id_amortizacion=a.id) LEFT JOIN
						disposiciones d ON(a.id_disposicion=d.id)
					WHERE
						d.id_solicitud={$model->id} AND
						c.financiado<>1
				";
				$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
				$infoComisiones=array();
				foreach ($dataComisiones as $comision) {
					$infoComisiones[$comision["id_amortizacion"]][]=array(
						'comision'=>$comision["nombre"],
						'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
						'iva'=>$comision["monto_impuesto"],
					);
				}
				$amortizaciones=Amortizaciones::model()->findAll("id_disposicion=:disposicion",array(':disposicion'=>$disposicion));
				$modelD=Disposiciones::model()->findByPk($disposicion);
				/*if(strtotime($modelD->fecha)>=strtotime($fecha1) && strtotime($modelD->fecha)<=strtotime($fecha2)){
					//Se hace el cargo de la disposicion
					$data['resumen']['capital']['cargos']+=$modelD->importe;
					$data['resumen']['capital']['abonos']+=0;
					$data['resumen']['capital']['saldo']+=$modelD->importe;
					$data['resumen']['capital']['saldo_total']+=$modelD->importe;

					$data['detalles'][$modelD->fecha][]=array(
						'operacion'=>'disposicion',
						'fecha'=>$modelD->fecha,
						'concepto'=>"Disposición",
						'cargo'=>$modelD->importe,
						'abono'=>0,
						'capital'=>$modelD->importe,
						'interes'=>0,
						'mora'=>0,
						'iva'=>0,
					);
				}elseif(strtotime($modelD->fecha)<strtotime($fecha1)){
					//Si la fecha de disposición es menor a la fecha inicial se agrega como saldo anterior
					$data['resumen']['capital']['saldo_anterior']+=$modelD->importe;
					$data['resumen']['capital']['saldo_total']+=$modelD->importe;
				}*/
				$data['resumen']['capital']['saldo_linea']+=$modelD->importe;
			}
		}else{
			if(is_null($disposicion)){
				$sqlComisiones="
					SELECT
						*
					FROM
						comisiones_amortizaciones c LEFT JOIN
						amortizaciones a ON(c.id_amortizacion=a.id) LEFT JOIN
						grupos_solidarios g ON(a.id_grupo_solidario=g.id)
					WHERE
						g.id_solicitud={$model->id} AND
						c.financiado<>1
				";
				$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
				$infoComisiones=array();
				foreach ($dataComisiones as $comision) {
					$infoComisiones[$comision["id_amortizacion"]][]=array(
						'comision'=>$comision["nombre"],
						'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
						'iva'=>$comision["monto_impuesto"],
					);
				}
				$amortizaciones=Amortizaciones::model()->with("id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente",array(':solicitud'=>$model->id,':cliente'=>$cliente));

				/*if(strtotime($model->fecha_disposicion)>=strtotime($fecha1) && strtotime($model->fecha_disposicion)<=strtotime($fecha2)){
					//Se hace el cargo de la disposicion
					$data['resumen']['capital']['cargos']+=$model->entregable;
					$data['resumen']['capital']['abonos']+=0;
					$data['resumen']['capital']['saldo']+=$model->entregable;
					$data['resumen']['capital']['saldo_total']+=$model->entregable;

					$data['detalles'][$model->fecha_disposicion][]=array(
						'operacion'=>'disposicion',
						'fecha'=>$model->fecha_disposicion,
						'concepto'=>"Disposición",
						'cargo'=>$model->entregable,
						'abono'=>0,
						'capital'=>$model->entregable,
						'interes'=>0,
						'mora'=>0,
						'iva'=>0,
					);
				}elseif(strtotime($model->fecha_disposicion)<strtotime($fecha1)){
					//Si la fecha de disposición es menor a la fecha inicial se agrega como saldo anterior
					$data['resumen']['capital']['saldo_anterior']+=$model->entregable;
					$data['resumen']['capital']['saldo_total']+=$model->entregable;
				}*/
				$data['resumen']['capital']['saldo_linea']+=$model->entregable;
			}else{
				$sqlComisiones="
					SELECT
						*
					FROM
						comisiones_amortizaciones c LEFT JOIN
						amortizaciones a ON(c.id_amortizacion=a.id) LEFT JOIN
						disposiciones g ON(a.id_disposicion=d.id)
					WHERE
						g.id_solicitud={$model->id} AND
						c.financiado<>1
				";
				$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
				$infoComisiones=array();
				foreach ($dataComisiones as $comision) {
					$infoComisiones[$comision["id_amortizacion"]][]=array(
						'comision'=>$comision["nombre"],
						'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
						'iva'=>$comision["monto_impuesto"],
					);
				}
				$amortizaciones=Amortizaciones::model()->findAll("id_disposicion=:disposicion",array(':disposicion'=>$disposicion));
				$modelD=Disposiciones::model()->findByPk($disposicion);
				/*if(strtotime($modelD->fecha)>=strtotime($fecha1) && strtotime($modelD->fecha)<=strtotime($fecha2)){
					//Se hace el cargo de la disposicion
					$data['resumen']['capital']['cargos']+=$modelD->importe;
					$data['resumen']['capital']['abonos']+=0;
					$data['resumen']['capital']['saldo']+=$modelD->importe;
					$data['resumen']['capital']['saldo_total']+=$modelD->importe;

					$data['detalles'][$modelD->fecha][]=array(
						'operacion'=>'disposicion',
						'fecha'=>$modelD->fecha,
						'concepto'=>"Disposición",
						'cargo'=>$modelD->importe_pagos,
						'abono'=>0,
						'capital'=>$modelD->importe,
						'interes'=>0,
						'mora'=>0,
						'iva'=>0,
					);
				}elseif(strtotime($modelD->fecha)<strtotime($fecha1)){
					//Si la fecha de disposición es menor a la fecha inicial se agrega como saldo anterior
					$data['resumen']['capital']['saldo_anterior']+=$modelD->importe;
					$data['resumen']['capital']['saldo_total']+=$modelD->importe;
				}*/
				$data['resumen']['capital']['saldo_linea']+=$modelD->importe;
			}
		}

		$fechas=array();
		$data['linea']['disponible']+=$model->monto_autorizado;
		$data['comisiones']=array();
		foreach ($amortizaciones as $amortizacion) {
			//Se ajusta la fecha de pago para quitar las horas
			if($amortizacion->fecha_pago!=0){
				$amortizacion->fecha_pago=date("Y-m-d",strtotime($amortizacion->fecha_pago));
			}

			$parcialidades=ParcialidadesAmortizaciones::model()->findAll(array("condition"=>"id_amortizacion=:amortizacion","order"=>"fecha_pago ASC","params"=>array(':amortizacion'=>$amortizacion->id)));
			if(empty($parcialidades)){
				//Si no tiene parcialidades
				$capital=$amortizacion->pago_capital;
				$interes=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
				$iva_interes=$amortizacion->iva_interes_generado;
				$comisionA=$amortizacion->pago_comisiones;
				$comisionP=$amortizacion->pago_comisiones;
				$fecha_moratorios=0;

				if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0){
					if(strtotime($amortizacion->fecha_pago)<=strtotime($fecha2)){
						//Si la fecha de pago es menor a la fecha de corte se muestran los datos como estan en la amortización
						$mora_anterior=0;
						$iva_mora_anterior=0;
						$moratoriosDevengados=MoratoriosAmortizaciones::model()->findAll("id_amortizacion=:amortizacion AND fecha<=:fecha2",array(':amortizacion'=>$amortizacion->id,':fecha2'=>$fecha2));
						foreach ($moratoriosDevengados as $moratorioDevengado) {
							if(strtotime($moratorioDevengado->fecha)<strtotime($fecha1)){
								$mora_anterior+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
								$iva_mora_anterior+=$moratorioDevengado->monto_impuesto;
							}else{
								$fecha_moratorios=$moratorioDevengado->fecha;
							}
						}

						$mora=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios-$mora_anterior;
						$iva_mora=$amortizacion->iva_moratorios-$iva_mora_anterior;
					}else{
						//Si la fecha de pago es mayor a la fecha de corte se calcula lo generado hasta la fecha de corte
						$mora=0;
						$iva_mora=0;
						$mora_anterior=0;
						$iva_mora_anterior=0;
						$moratoriosDevengados=MoratoriosAmortizaciones::model()->findAll("id_amortizacion=:amortizacion AND fecha<=:fecha2",array(':amortizacion'=>$amortizacion->id,':fecha2'=>$fecha2));
						foreach ($moratoriosDevengados as $moratorioDevengado) {
							if(strtotime($moratorioDevengado->fecha)<strtotime($fecha1)){
								$mora_anterior+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
								$iva_mora_anterior+=$moratorioDevengado->monto_impuesto;
							}else{
								$mora+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
								$iva_mora+=$moratorioDevengado->monto_impuesto;

								$fecha_moratorios=$moratorioDevengado->fecha;
							}
						}
					}
				}else{
					//Si no hay fecha de pago se calcula lo generado hasta la fecha de corte
					$mora=0;
					$iva_mora=0;
					$mora_anterior=0;
					$iva_mora_anterior=0;
					$moratoriosDevengados=MoratoriosAmortizaciones::model()->findAll("id_amortizacion=:amortizacion AND fecha<=:fecha2",array(':amortizacion'=>$amortizacion->id,':fecha2'=>$fecha2));
					foreach ($moratoriosDevengados as $moratorioDevengado) {
						if(strtotime($moratorioDevengado->fecha)<strtotime($fecha1)){
							$mora_anterior+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$iva_mora_anterior+=$moratorioDevengado->monto_impuesto;
						}else{
							$mora+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$iva_mora+=$moratorioDevengado->monto_impuesto;

							$fecha_moratorios=$moratorioDevengado->fecha;
						}
					}
				}

				if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0 && strtotime($amortizacion->fecha_pago)<strtotime($amortizacion->fecha_amortizacion)){
					if(strtotime($amortizacion->fecha_pago)>=strtotime($fecha1) && strtotime($amortizacion->fecha_pago)<=strtotime($fecha2)){
						//Cuando la fecha de pago es menor se carga la amortizacion con la fecha de pago
						if(!in_array($amortizacion->fecha_pago,$fechas)){
							$fechas[]=$amortizacion->fecha_pago;
						}
						$data['resumen']['capital']['cargos']+=$capital;
						$data['resumen']['capital']['saldo']+=$capital;
						$data['resumen']['capital']['saldo_total']+=$capital;
						//$data['resumen']['capital']['saldo_linea']+=$capital;

						$data['resumen']['interes']['cargos']+=$interes;
						$data['resumen']['interes']['saldo']+=$interes;
						$data['resumen']['interes']['saldo_total']+=$interes;
						$data['resumen']['interes']['saldo_linea']+=$interes;
						$data['resumen']['iva_interes']['cargos']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo_total']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo_linea']+=$iva_interes;

						$data['resumen']['mora']['cargos']+=$mora;
						$data['resumen']['mora']['saldo']+=$mora;
						$data['resumen']['mora']['saldo_total']+=$mora;
						$data['resumen']['mora']['saldo_linea']+=$mora;
						$data['resumen']['iva_mora']['cargos']+=$iva_mora;
						$data['resumen']['iva_mora']['saldo']+=$iva_mora;
						$data['resumen']['iva_mora']['saldo_total']+=$iva_mora;
						$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora;

						$data['detalles'][$amortizacion->fecha_pago][]=array(
							'operacion'=>'vencimiento',
							'fecha'=>$amortizacion->fecha_pago,
							'concepto'=>"Vencimiento {$amortizacion->numero_amortizacion}",
							'cargo'=>$capital+$interes+$iva_interes+$mora+$iva_mora,
							'abono'=>0,
							'capital'=>$capital,
							'interes'=>$interes,
							'mora'=>$mora,
							'iva'=>$iva_interes+$iva_mora,
						);
					}elseif(strtotime($amortizacion->fecha_pago)<strtotime($fecha1)){
						//Si la fecha de pago es menor a la fecha inicial se agrega como saldo anterior
						$data['resumen']['capital']['saldo_anterior']+=$capital;
						$data['resumen']['capital']['saldo_total']+=$capital;
						//$data['resumen']['capital']['saldo_linea']+=$capital;

						$data['resumen']['interes']['saldo_anterior']+=$interes;
						$data['resumen']['interes']['saldo_total']+=$interes;
						$data['resumen']['interes']['saldo_linea']+=$interes;
						$data['resumen']['iva_interes']['saldo_anterior']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo_total']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo_linea']+=$iva_interes;

						//Se supone que si la fecha de pago es anterior, toda la mora de la amortización es del saldo anterior
						//y no se coloca en los detalles
						$data['resumen']['mora']['saldo_anterior']+=$mora_anterior;
						$data['resumen']['mora']['saldo_total']+=$mora_anterior;
						$data['resumen']['mora']['saldo_linea']+=$mora_anterior;
						$data['resumen']['iva_mora']['saldo_anterior']+=$iva_mora_anterior;
						$data['resumen']['iva_mora']['saldo_total']+=$iva_mora_anterior;
						$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora_anterior;
					}
				}else{
					if(strtotime($amortizacion->fecha_amortizacion)>=strtotime($fecha1) && strtotime($amortizacion->fecha_amortizacion)<=strtotime($fecha2)){
						//Cuando la fecha de amortizacion es menor se carga la amortizacion con la fecha de la amortizacion
						if(!in_array($amortizacion->fecha_amortizacion,$fechas)){
							$fechas[]=$amortizacion->fecha_amortizacion;
						}

						$data['resumen']['capital']['cargos']+=$capital;
						$data['resumen']['capital']['saldo']+=$capital;
						$data['resumen']['capital']['saldo_total']+=$capital;
						//$data['resumen']['capital']['saldo_linea']+=$capital;

						$data['resumen']['interes']['cargos']+=$interes;
						$data['resumen']['interes']['saldo']+=$interes;
						$data['resumen']['interes']['saldo_total']+=$interes;
						$data['resumen']['interes']['saldo_linea']+=$interes;
						$data['resumen']['iva_interes']['cargos']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo_total']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo_linea']+=$iva_interes;

						$data['resumen']['mora']['cargos']+=$mora;
						$data['resumen']['mora']['saldo']+=$mora;
						$data['resumen']['mora']['saldo_total']+=$mora;
						$data['resumen']['mora']['saldo_linea']+=$mora;
						$data['resumen']['iva_mora']['cargos']+=$iva_mora;
						$data['resumen']['iva_mora']['saldo']+=$iva_mora;
						$data['resumen']['iva_mora']['saldo_total']+=$iva_mora;
						$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora;

						$data['detalles'][$amortizacion->fecha_amortizacion][]=array(
							'operacion'=>'vencimiento',
							'fecha'=>$amortizacion->fecha_amortizacion,
							'concepto'=>"Vencimiento {$amortizacion->numero_amortizacion}",
							'cargo'=>$capital+$interes+$iva_interes+$mora+$iva_mora,
							'abono'=>0,
							'capital'=>$capital,
							'interes'=>$interes,
							'mora'=>$mora,
							'iva'=>$iva_interes+$iva_mora,
						);
					}elseif(strtotime($amortizacion->fecha_amortizacion)<strtotime($fecha1)){
						//Si la fecha de amortizacion es menor a la fecha inicial se agrega como saldo anterior
						$data['resumen']['capital']['saldo_anterior']+=$capital;
						$data['resumen']['capital']['saldo_total']+=$capital;
						//$data['resumen']['capital']['saldo_linea']+=$capital;

						$data['resumen']['interes']['saldo_anterior']+=$interes;
						$data['resumen']['interes']['saldo_total']+=$interes;
						$data['resumen']['interes']['saldo_linea']+=$interes;
						$data['resumen']['iva_interes']['saldo_anterior']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo_total']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo_linea']+=$iva_interes;

						$data['resumen']['mora']['saldo_anterior']+=$mora_anterior;
						$data['resumen']['mora']['saldo_total']+=$mora_anterior;
						$data['resumen']['mora']['saldo_linea']+=$mora_anterior;
						$data['resumen']['iva_mora']['saldo_anterior']+=$iva_mora_anterior;
						$data['resumen']['iva_mora']['saldo_total']+=$iva_mora_anterior;
						$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora_anterior;

						//Si mora e iva_mora tienen valor entonces se agrega en el detalle del periodo
						if($mora>0 || $iva_mora>0){
							if(!in_array($fecha_moratorios,$fechas)){
								$fechas[]=$fecha_moratorios;//Es la ultima fecha que se ha generado moratorios en el periodo
							}

							$data['resumen']['mora']['cargos']+=$mora;
							$data['resumen']['mora']['saldo']+=$mora;
							$data['resumen']['mora']['saldo_total']+=$mora;
							$data['resumen']['mora']['saldo_linea']+=$mora;
							$data['resumen']['iva_mora']['cargos']+=$iva_mora;
							$data['resumen']['iva_mora']['saldo']+=$iva_mora;
							$data['resumen']['iva_mora']['saldo_total']+=$iva_mora;
							$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora;

							$data['detalles'][$fecha_moratorios][]=array(
								'operacion'=>'atraso',
								'fecha'=>$fecha_moratorios,
								'concepto'=>"Atraso Vencimiento {$amortizacion->numero_amortizacion}",
								'cargo'=>$mora+$iva_mora,
								'abono'=>0,
								'capital'=>0,
								'interes'=>0,
								'mora'=>$mora,
								'iva'=>$iva_mora,
							);
						}

					}elseif(strtotime($amortizacion->fecha_amortizacion)>strtotime($fecha2)){

					}
				}
				if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0){
					if(strtotime($amortizacion->fecha_pago)>=strtotime($fecha1) && strtotime($amortizacion->fecha_pago)<=strtotime($fecha2)){
						//Cuando la fecha de pago esta en el periodo se abona la amortizacion con la fecha de la pago
						if(!in_array($amortizacion->fecha_pago,$fechas)){
							$fechas[]=$amortizacion->fecha_pago;
						}

						$data['detalles'][$amortizacion->fecha_pago][]=array(
							'operacion'=>'pago',
							'fecha'=>$amortizacion->fecha_pago,
							'concepto'=>"Pago Vencimiento {$amortizacion->numero_amortizacion}",
							'cargo'=>0,
							'abono'=>$amortizacion->pago_capital+$interes+$iva_interes+$mora+$iva_mora+$mora_anterior+$iva_mora_anterior,
							'capital'=>$amortizacion->pago_capital,
							'interes'=>$interes,
							'mora'=>$mora+$mora_anterior,
							'iva'=>$iva_interes+$iva_mora+$iva_mora_anterior,
						);

						foreach ($infoComisiones[$amortizacion->id] as $infoComision) {
							$data['comisiones'][$amortizacion->fecha_pago][]=array(
								'comision'=>$infoComision['comision'],
								'fecha'=>$amortizacion->fecha_pago,
								'monto'=>$infoComision['monto']*($comisionP/$comisionA),
								'iva'=>$infoComision['iva']*($comisionP/$comisionA),
							);
						}

						$data['resumen']['capital']['abonos']+=$amortizacion->pago_capital;
						$data['resumen']['capital']['saldo']-=$amortizacion->pago_capital;
						$data['resumen']['capital']['saldo_total']-=$amortizacion->pago_capital;
						$data['resumen']['capital']['saldo_linea']-=$amortizacion->pago_capital;

						$data['resumen']['interes']['abonos']+=$interes;
						$data['resumen']['interes']['saldo']-=$interes;
						$data['resumen']['interes']['saldo_total']-=$interes;
						$data['resumen']['interes']['saldo_linea']-=$interes;
						$data['resumen']['iva_interes']['abonos']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo']-=$iva_interes;
						$data['resumen']['iva_interes']['saldo_total']-=$iva_interes;
						$data['resumen']['iva_interes']['saldo_linea']-=$iva_interes;

						$data['resumen']['mora']['abonos']+=$mora+$mora_anterior;
						$data['resumen']['mora']['saldo']-=$mora+$mora_anterior;
						$data['resumen']['mora']['saldo_total']-=$mora+$mora_anterior;
						$data['resumen']['mora']['saldo_linea']-=$mora+$mora_anterior;
						$data['resumen']['iva_mora']['abonos']+=$iva_mora+$iva_mora_anterior;
						$data['resumen']['iva_mora']['saldo']-=$iva_mora+$iva_mora_anterior;
						$data['resumen']['iva_mora']['saldo_total']-=$iva_mora+$iva_mora_anterior;
						$data['resumen']['iva_mora']['saldo_linea']-=$iva_mora+$iva_mora_anterior;

						$data['linea']['capital_pagado']+=$amortizacion->pago_capital;
						$data['linea']['interes_pagado']+=$interes;
						$data['linea']['mora_pagado']+=$mora+$mora_anterior;
						$data['linea']['iva_pagado']+=$iva_interes+$iva_mora+$iva_mora_anterior;
					}elseif(strtotime($amortizacion->fecha_pago)<strtotime($fecha1)){
						//Si la fecha de pago es menor a la fecha inicial se agrega como saldo anterior
						$data['resumen']['capital']['saldo_anterior']-=$amortizacion->pago_capital;
						$data['resumen']['capital']['saldo_total']-=$amortizacion->pago_capital;
						$data['resumen']['capital']['saldo_linea']-=$amortizacion->pago_capital;

						$data['resumen']['interes']['saldo_anterior']-=$interes;
						$data['resumen']['interes']['saldo_total']-=$interes;
						$data['resumen']['interes']['saldo_linea']-=$interes;
						$data['resumen']['iva_interes']['saldo_anterior']-=$iva_interes;
						$data['resumen']['iva_interes']['saldo_total']-=$iva_interes;
						$data['resumen']['iva_interes']['saldo_linea']-=$iva_interes;

						//Se supone que en este caso toda la mora es anterior
						$data['resumen']['mora']['saldo_anterior']-=$mora_anterior;
						$data['resumen']['mora']['saldo_total']-=$mora_anterior;
						$data['resumen']['mora']['saldo_linea']-=$mora_anterior;
						$data['resumen']['iva_mora']['saldo_anterior']-=$iva_mora_anterior;
						$data['resumen']['iva_mora']['saldo_total']-=$iva_mora_anterior;
						$data['resumen']['iva_mora']['saldo_linea']-=$iva_mora_anterior;
					}
				}
			}else{
				$parcialidadCapital=0;
				$parcialidadInteres=0;
				$parcialidadMora=0;
				$parcialidadIVAInteres=0;
				$parcialidadIVAMora=0;
				$parcialidadCargada=false;
				foreach ($parcialidades as $parcialidad) {
					//Se ajusta la fecha de pago para quitar las horas
					$parcialidad->fecha_pago=date("Y-m-d",strtotime($parcialidad->fecha_pago));

					$parcialidadCapital+=$parcialidad->pago_capital;
					$parcialidadInteres+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
					$parcialidadMora+=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
					$parcialidadIVAInteres+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
					$parcialidadIVAMora+=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
					if(strtotime($parcialidad->fecha_pago)<strtotime($amortizacion->fecha_amortizacion)){
						//Cuando la fecha de pago es menor, se carga la parcialidad  a la fecha de pago de la parcialidad
						if($amortizacion->pago_capital>0){
							$capital=$parcialidad->pago_capital;
						}else{
							$capital=0;
						}
						if($amortizacion->pago_interes>0){
							$interes=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							$iva_interes=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
						}else{
							$interes=0;
							$iva_interes=0;
						}
						if($amortizacion->pago_moratorios>0){
							//En teoria no deben haber moratorios porque la parcialidad se hizo antes del vencimiento
							$mora=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							$iva_mora=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
						}else{
							$mora=0;
							$iva_mora=0;
						}
						$comisionA=$amortizacion->pago_comisiones;
						$comisionP=$parcialidad->pago_comisiones;

						//Cuando la parcialidad se paga en el periodo
						if(strtotime($parcialidad->fecha_pago)>=strtotime($fecha1) && strtotime($parcialidad->fecha_pago)<=strtotime($fecha2)){
							if(!in_array($parcialidad->fecha_pago,$fechas)){
								$fechas[]=$parcialidad->fecha_pago;
							}

							$data['resumen']['capital']['cargos']+=$capital;
							$data['resumen']['capital']['saldo']+=$capital;
							$data['resumen']['capital']['saldo_total']+=$capital;
							//$data['resumen']['capital']['saldo_linea']+=$capital;

							$data['resumen']['interes']['cargos']+=$interes;
							$data['resumen']['interes']['saldo']+=$interes;
							$data['resumen']['interes']['saldo_total']+=$interes;
							$data['resumen']['interes']['saldo_linea']+=$interes;
							$data['resumen']['iva_interes']['cargos']+=$iva_interes;
							$data['resumen']['iva_interes']['saldo']+=$iva_interes;
							$data['resumen']['iva_interes']['saldo_total']+=$iva_interes;
							$data['resumen']['iva_interes']['saldo_linea']+=$iva_interes;

							$data['resumen']['mora']['cargos']+=$mora;
							$data['resumen']['mora']['saldo']+=$mora;
							$data['resumen']['mora']['saldo_total']+=$mora;
							$data['resumen']['mora']['saldo_linea']+=$mora;
							$data['resumen']['iva_mora']['cargos']+=$iva_mora;
							$data['resumen']['iva_mora']['saldo']+=$iva_mora;
							$data['resumen']['iva_mora']['saldo_total']+=$iva_mora;
							$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora;

							$data['detalles'][$parcialidad->fecha_pago][]=array(
								'operacion'=>'vencimiento',
								'fecha'=>$parcialidad->fecha_pago,
								'concepto'=>"Vencimiento {$amortizacion->numero_amortizacion}",
								'cargo'=>$capital+$interes+$iva_interes+$mora+$iva_mora,
								'abono'=>0,
								'capital'=>$capital,
								'interes'=>$interes,
								'mora'=>$mora,
								'iva'=>$iva_interes+$iva_mora,
							);
						}elseif(strtotime($parcialidad->fecha_pago)<strtotime($fecha1)){
							//Si la fecha de pago es menor a la fecha inicial se agrega como saldo anterior
							/*$data['resumen']['capital']['saldo_anterior']+=$capital;
							$data['resumen']['capital']['saldo_total']+=$capital;
							//$data['resumen']['capital']['saldo_linea']+=$capital;

							$data['resumen']['interes']['saldo_anterior']+=$interes;
							$data['resumen']['interes']['saldo_total']+=$interes;
							$data['resumen']['interes']['saldo_linea']+=$interes;
							$data['resumen']['iva_interes']['saldo_anterior']+=$iva_interes;
							$data['resumen']['iva_interes']['saldo_total']+=$iva_interes;
							$data['resumen']['iva_interes']['saldo_linea']+=$iva_interes;

							$data['resumen']['mora']['saldo_anterior']+=$mora;
							$data['resumen']['mora']['saldo_total']+=$mora;
							$data['resumen']['mora']['saldo_linea']+=$mora;
							$data['resumen']['iva_mora']['saldo_anterior']+=$iva_mora;
							$data['resumen']['iva_mora']['saldo_total']+=$iva_mora;
							$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora;
							*/
						}
					}else{
						//Cuando la fecha de amortizacion es menor, se carga la amortizacion completa
						if($amortizacion->pago_capital>0){
							$capital=$amortizacion->pago_capital;
						}else{
							$capital=0;
						}
						if($amortizacion->pago_interes>0){
							$interes=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
							$iva_interes=$amortizacion->iva_interes_generado;
						}else{
							$interes=0;
							$iva_interes=0;
						}
						if($amortizacion->pago_moratorios>0){
							$mora=0;
							$iva_mora=0;
							$fecha_moratorios=0;
							if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0){
								if(strtotime($amortizacion->fecha_pago)<=strtotime($fecha2)){
									//Si la fecha de pago es menor a la fecha de corte se muestran los datos como estan en la amortización
									$mora_anterior=0;
									$iva_mora_anterior=0;
									$moratoriosDevengados=MoratoriosAmortizaciones::model()->findAll("id_amortizacion=:amortizacion AND fecha<=:fecha2",array(':amortizacion'=>$amortizacion->id,':fecha2'=>$fecha2));
									foreach ($moratoriosDevengados as $moratorioDevengado) {
										if(strtotime($moratorioDevengado->fecha)<strtotime($fecha1)){
											$mora_anterior+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
											$iva_mora_anterior+=$moratorioDevengado->monto_impuesto;
										}else{
											$fecha_moratorios=$moratorioDevengado->fecha;
										}
									}

									$mora=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios-$mora_anterior;
									$iva_mora=$amortizacion->iva_moratorios-$iva_mora_anterior;
								}else{
									//Si la fecha de pago es mayor a la fecha de corte se calcula lo generado hasta la fecha de corte
									$mora=0;
									$iva_mora=0;
									$mora_anterior=0;
									$iva_mora_anterior=0;
									$moratoriosDevengados=MoratoriosAmortizaciones::model()->findAll("id_amortizacion=:amortizacion AND fecha<=:fecha2",array(':amortizacion'=>$amortizacion->id,':fecha2'=>$fecha2));
									foreach ($moratoriosDevengados as $moratorioDevengado) {
										if(strtotime($moratorioDevengado->fecha)<strtotime($fecha1)){
											$mora_anterior+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
											$iva_mora_anterior+=$moratorioDevengado->monto_impuesto;
										}else{
											$mora+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
											$iva_mora+=$moratorioDevengado->monto_impuesto;

											$fecha_moratorios=$moratorioDevengado->fecha;
										}
									}
								}
							}else{
								//Si no hay fecha de pago se calcula lo generado hasta la fecha de corte
								$mora=0;
								$iva_mora=0;
								$mora_anterior=0;
								$iva_mora_anterior=0;
								$moratoriosDevengados=MoratoriosAmortizaciones::model()->findAll("id_amortizacion=:amortizacion AND fecha<=:fecha2",array(':amortizacion'=>$amortizacion->id,':fecha2'=>$fecha2));
								foreach ($moratoriosDevengados as $moratorioDevengado) {
									if(strtotime($moratorioDevengado->fecha)<strtotime($fecha1)){
										$mora_anterior+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
										$iva_mora_anterior+=$moratorioDevengado->monto_impuesto;
									}else{
										$mora+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
										$iva_mora+=$moratorioDevengado->monto_impuesto;

										$fecha_moratorios=$moratorioDevengado->fecha;
									}
								}
							}
						}else{
							$mora=0;
							$iva_mora=0;
						}
						$comisionA=$amortizacion->pago_comisiones;
						$comisionP=$parcialidad->pago_comisiones;
						if(strtotime($amortizacion->fecha_amortizacion)>=strtotime($fecha1) && strtotime($amortizacion->fecha_amortizacion)<=strtotime($fecha2)){
							if(!$parcialidadCargada){
								$parcialidadCargada=true;
								if(!in_array($amortizacion->fecha_amortizacion,$fechas)){
									$fechas[]=$amortizacion->fecha_amortizacion;
								}
								$data['resumen']['capital']['cargos']+=$capital;
								$data['resumen']['capital']['saldo']+=$capital;
								$data['resumen']['capital']['saldo_total']+=$capital;
								//$data['resumen']['capital']['saldo_linea']+=$capital;

								$data['resumen']['interes']['cargos']+=$interes;
								$data['resumen']['interes']['saldo']+=$interes;
								$data['resumen']['interes']['saldo_total']+=$interes;
								$data['resumen']['interes']['saldo_linea']+=$interes;
								$data['resumen']['iva_interes']['cargos']+=$iva_interes;
								$data['resumen']['iva_interes']['saldo']+=$iva_interes;
								$data['resumen']['iva_interes']['saldo_total']+=$iva_interes;
								$data['resumen']['iva_interes']['saldo_linea']+=$iva_interes;

								$data['resumen']['mora']['cargos']+=$mora;
								$data['resumen']['mora']['saldo']+=$mora;
								$data['resumen']['mora']['saldo_total']+=$mora;
								$data['resumen']['mora']['saldo_linea']+=$mora;
								$data['resumen']['iva_mora']['cargos']+=$iva_mora;
								$data['resumen']['iva_mora']['saldo']+=$iva_mora;
								$data['resumen']['iva_mora']['saldo_total']+=$iva_mora;
								$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora;

								$data['detalles'][$amortizacion->fecha_amortizacion][]=array(
									'operacion'=>'vencimiento',
									'fecha'=>$amortizacion->fecha_amortizacion,
									'concepto'=>"Vencimiento {$amortizacion->numero_amortizacion}",
									'cargo'=>$capital+$interes+$iva_interes+$mora+$iva_mora,
									'abono'=>0,
									'capital'=>$capital,
									'interes'=>$interes,
									'mora'=>$mora,
									'iva'=>$iva_interes+$iva_mora,
								);
							}
						}elseif(strtotime($amortizacion->fecha_amortizacion)<strtotime($fecha1)){
							//Si la fecha de pago es menor a la fecha inicial se agrega como saldo anterior
							$data['resumen']['capital']['saldo_anterior']+=$capital;
							$data['resumen']['capital']['saldo_total']+=$capital;
							//$data['resumen']['capital']['saldo_linea']+=$capital;

							$data['resumen']['interes']['saldo_anterior']+=$interes;
							$data['resumen']['interes']['saldo_total']+=$interes;
							$data['resumen']['interes']['saldo_linea']+=$interes;
							$data['resumen']['iva_interes']['saldo_anterior']+=$iva_interes;
							$data['resumen']['iva_interes']['saldo_total']+=$iva_interes;
							$data['resumen']['iva_interes']['saldo_linea']+=$iva_interes;

							//Se agrega solamente la mora anterior
							$data['resumen']['mora']['saldo_anterior']+=$mora_anterior;
							$data['resumen']['mora']['saldo_total']+=$mora_anterior;
							$data['resumen']['mora']['saldo_linea']+=$mora_anterior;
							$data['resumen']['iva_mora']['saldo_anterior']+=$iva_mora_anterior;
							$data['resumen']['iva_mora']['saldo_total']+=$iva_mora_anterior;
							$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora_anterior;

							//Si hay mora o iva_mora mayor cero se agrega en el detalle del periodo
							if($mora>0 || $iva_mora>0){
								if(!in_array($fecha_moratorios,$fechas)){
									$fechas[]=$fecha_moratorios;//Es la ultima fecha que se ha generado moratorios en el periodo
								}

								$data['resumen']['mora']['cargos']+=$mora;
								$data['resumen']['mora']['saldo']+=$mora;
								$data['resumen']['mora']['saldo_total']+=$mora;
								$data['resumen']['mora']['saldo_linea']+=$mora;
								$data['resumen']['iva_mora']['cargos']+=$iva_mora;
								$data['resumen']['iva_mora']['saldo']+=$iva_mora;
								$data['resumen']['iva_mora']['saldo_total']+=$iva_mora;
								$data['resumen']['iva_mora']['saldo_linea']+=$iva_mora;

								$data['detalles'][$fecha_moratorios][]=array(
									'operacion'=>'atraso',
									'fecha'=>$fecha_moratorios,
									'concepto'=>"Atraso Vencimiento {$amortizacion->numero_amortizacion}",
									'cargo'=>$mora+$iva_mora,
									'abono'=>0,
									'capital'=>0,
									'interes'=>0,
									'mora'=>$mora,
									'iva'=>$iva_mora,
								);
							}
						}
					}
					if(strtotime($parcialidad->fecha_pago)>=strtotime($fecha1) && strtotime($parcialidad->fecha_pago)<=strtotime($fecha2)){
						//Cuando la fecha de pago esta en el periodo se agrega la parcialidad
						if($amortizacion->pago_capital>0){
							$capital=$parcialidad->pago_capital;
						}else{
							$capital=0;
						}
						if($amortizacion->pago_interes>0){
							$interes=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							$iva_interes=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
						}else{
							$interes=0;
							$iva_interes=0;
						}
						if($amortizacion->pago_moratorios>0){
							$mora=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							$iva_mora=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
						}else{
							$mora=0;
							$iva_mora=0;
						}
						$comisionA=$amortizacion->pago_comisiones;
						$comisionP=$parcialidad->pago_comisiones;
						if(!in_array($parcialidad->fecha_pago,$fechas)){
							$fechas[]=$parcialidad->fecha_pago;
						}

						$data['detalles'][$parcialidad->fecha_pago][]=array(
							'operacion'=>'parcialidad',
							'fecha'=>$parcialidad->fecha_pago,
							'concepto'=>"Parcialidad Vencimiento {$amortizacion->numero_amortizacion}",
							'cargo'=>0,
							'abono'=>$parcialidad->pago_capital+$interes+$iva_interes+$mora+$iva_mora,
							'capital'=>$parcialidad->pago_capital,
							'interes'=>$interes,
							'mora'=>$mora,
							'iva'=>$iva_interes+$iva_mora,
						);

						foreach ($infoComisiones[$amortizacion->id] as $infoComision) {
							$data['comisiones'][$parcialidad->fecha_pago][]=array(
								'comision'=>$infoComision['comision'],
								'fecha'=>$parcialidad->fecha_pago,
								'monto'=>$infoComision['monto']*($comisionP/$comisionA),
								'iva'=>$infoComision['iva']*($comisionP/$comisionA),
							);
						}

						$data['resumen']['capital']['abonos']+=$parcialidad->pago_capital;
						$data['resumen']['capital']['saldo']-=$parcialidad->pago_capital;
						$data['resumen']['capital']['saldo_total']-=$parcialidad->pago_capital;
						$data['resumen']['capital']['saldo_linea']-=$parcialidad->pago_capital;

						$data['resumen']['interes']['abonos']+=$interes;
						$data['resumen']['interes']['saldo']-=$interes;
						$data['resumen']['interes']['saldo_total']-=$interes;
						$data['resumen']['interes']['saldo_linea']-=$interes;
						$data['resumen']['iva_interes']['abonos']+=$iva_interes;
						$data['resumen']['iva_interes']['saldo']-=$iva_interes;
						$data['resumen']['iva_interes']['saldo_total']-=$iva_interes;
						$data['resumen']['iva_interes']['saldo_linea']-=$iva_interes;

						$data['resumen']['mora']['abonos']+=$mora;
						$data['resumen']['mora']['saldo']-=$mora;
						$data['resumen']['mora']['saldo_total']-=$mora;
						$data['resumen']['mora']['saldo_linea']-=$mora;
						$data['resumen']['iva_mora']['abonos']+=$iva_mora;
						$data['resumen']['iva_mora']['saldo']-=$iva_mora;
						$data['resumen']['iva_mora']['saldo_total']-=$iva_mora;
						$data['resumen']['iva_mora']['saldo_linea']-=$iva_mora;

						$data['linea']['capital_pagado']+=$parcialidad->pago_capital;
						$data['linea']['interes_pagado']+=$interes;
						$data['linea']['mora_pagado']+=$mora;
						$data['linea']['iva_pagado']+=$iva_interes+$iva_mora;
					}elseif(strtotime($amortizacion->fecha_amortizacion)<strtotime($fecha1)){
						//Si la fecha de pago es menor a la fecha inicial se agrega como saldo anterior
						if($amortizacion->pago_capital>0){
							$capital=$parcialidad->pago_capital;
						}else{
							$capital=0;
						}
						if($amortizacion->pago_interes>0){
							$interes=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							$iva_interes=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
						}else{
							$interes=0;
							$iva_interes=0;
						}
						if($amortizacion->pago_moratorios>0){
							$mora=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							$iva_mora=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
						}else{
							$mora=0;
							$iva_mora=0;
						}
						$comisionA=$amortizacion->pago_comisiones;
						$comisionP=$parcialidad->pago_comisiones;
						$data['resumen']['capital']['saldo_anterior']-=$parcialidad->pago_capital;
						$data['resumen']['capital']['saldo_total']-=$parcialidad->pago_capital;
						$data['resumen']['capital']['saldo_linea']-=$parcialidad->pago_capital;

						$data['resumen']['interes']['saldo_anterior']-=$interes;
						$data['resumen']['interes']['saldo_total']-=$interes;
						$data['resumen']['interes']['saldo_linea']-=$interes;
						$data['resumen']['iva_interes']['saldo_anterior']-=$iva_interes;
						$data['resumen']['iva_interes']['saldo_total']-=$iva_interes;
						$data['resumen']['iva_interes']['saldo_linea']-=$iva_interes;

						$data['resumen']['mora']['saldo_anterior']-=$mora;
						$data['resumen']['mora']['saldo_total']-=$mora;
						$data['resumen']['mora']['saldo_linea']-=$mora;
						$data['resumen']['iva_mora']['saldo_anterior']-=$iva_mora;
						$data['resumen']['iva_mora']['saldo_total']-=$iva_mora;
						$data['resumen']['iva_mora']['saldo_linea']-=$iva_mora;
					}
				}
			}
		}

		$detalles=array();
		asort($fechas);
		foreach ($fechas as $fecha) {
			foreach ($data['detalles'][$fecha] as $detalle) {
				$detalles[]=$detalle;
			}
		}

		$data['detalles']=$detalles;

		$comisiones=array();
		foreach ($fechas as $fecha) {
			foreach ($data['comisiones'][$fecha] as $comision) {
				$comisiones[]=$comision;
			}
		}
		$data['comisiones']=$comisiones;

		return $data;
	}

	public function getDetallesPeriodoOLD($fecha1,$fecha2,$cliente=null){
		$model=$this;
		$data=array();

		$cobroInteres=$model->id_producto0->cobro_interes;

		$empresa=Empresa::model()->find();
		$decimales=2;
		if(isset($empresa->decimales)){
			$decimales=$empresa->decimales;
		}

		if(isset($model->id_grupo_cliente) && $model->id_grupo_cliente!=0){
			//Grupal
			if(!is_null($cliente)){
				$sqlComisiones="
					SELECT
						*
					FROM
						comisiones_amortizaciones c LEFT JOIN
						amortizaciones a ON(c.id_amortizacion=a.id) LEFT JOIN
						grupos_solidarios g ON(a.id_grupo_solidario=g.id)
					WHERE
						g.id_solicitud={$model->id} AND
						c.financiado<>1
				";
				$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
				$infoComisiones=array();
				foreach ($dataComisiones as $comision) {
					$infoComisiones[$comision["id_amortizacion"]][]=array(
						'comision'=>$comision["nombre"],
						'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
						'iva'=>$comision["monto_impuesto"],
					);
				}
				$amortizaciones=Amortizaciones::model()->with("id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente",array(':solicitud'=>$model->id,':cliente'=>$cliente));

				$amortizacionesAll[0]=$amortizaciones;
			}
		}else{
			//Principal--------------------------------------
			$sqlComisiones="
				SELECT
					*
				FROM
					comisiones_amortizaciones c LEFT JOIN
					amortizaciones a ON(c.id_amortizacion=a.id)
				WHERE
					a.id_solicitud={$model->id} AND
					c.financiado<>1
			";
			$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
			$infoComisiones=array();
			foreach ($dataComisiones as $comision) {
				$infoComisiones[$comision["id_amortizacion"]][]=array(
					'comision'=>$comision["nombre"],
					'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
					'iva'=>$comision["monto_impuesto"],
				);
			}
			$amortizaciones=Amortizaciones::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$model->id));
			$disposiciones=Disposiciones::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$model->id));

			$amortizacionesAll[0]=$amortizaciones;

			//Disposiciones-----------------------------------
			$sqlComisiones="
				SELECT
					*
				FROM
					comisiones_amortizaciones c LEFT JOIN
					amortizaciones a ON(c.id_amortizacion=a.id) LEFT JOIN
					disposiciones d ON(a.id_disposicion=d.id)
				WHERE
					d.id_solicitud={$model->id} AND
					c.financiado<>1
			";
			$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
			foreach ($dataComisiones as $comision) {
				$infoComisiones[$comision["id_amortizacion"]][]=array(
					'comision'=>$comision["nombre"],
					'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
					'iva'=>$comision["monto_impuesto"],
				);
			}

			$keyAll=1;
			foreach ($disposiciones as $disposicion) {
				$amortizaciones=Amortizaciones::model()->findAll("id_disposicion=:disposicion",array(':disposicion'=>$disposicion->id));
				$amortizacionesAll[$keyAll]=$amortizaciones;
				$keyAll++;
			}

		}


		//NOTA: El saldo de linea y el saldo a pagar son casi iguales, la diferencia es que saldo de linea incluye algunos datos mas.
		//Originalmente el saldo de linea y el saldo a pagar eran diferentes en que el saldo de linea incluia las disposiciones de capital y el saldo a pagar solo incluia los vencimientos de capital.
		$saldoLinea=array(
			'capital'=>0,
			'intereses'=>0,
			'comisiones'=>0,
			'mora'=>0,
		);
		$saldoPagar=array(
			'capital'=>0,
			'intereses'=>0,
			'comisiones'=>0,
			'mora'=>0,
		);
		$resumenPeriodo=array(
			'capital'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			),
			'interes'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			),
			'mora'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			),
			'iva_interes'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			),
			'iva_mora'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			)
		);
		$comisionesPeriodo=array(
			//array(),
		);
		$detallesPeriodo=array(
			//array(),
		);
		$keyDetallePeriodo=0;

		if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
			$ip = $_SERVER['HTTP_CLIENT_IP'];
		} elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
			$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
		} else {
			$ip = $_SERVER['REMOTE_ADDR'];
		}
		if($ip=="187.189.90.2"){
			$ip=0;
		}

		//DEVENGADOS
		$fechaSinCambiar = $fecha1;

		foreach ($amortizacionesAll as $keyP=>$amortizaciones) {
			//Capital
			if($keyP==0){
				//Si es cero es la principal
				if(isset($amortizaciones[0])){
					//Si es un grupo solidario
					if(isset($amortizaciones[0]->id_grupo_solidario) && $amortizaciones[0]->id_grupo_solidario!=0){
						//Si se dispuso antes del periodo o en el periodo se agrega al saldo
						if(strtotime($amortizaciones[0]->id_grupo_solidario0->id_solicitud0->fecha_disposicion)<=strtotime($fecha2)){
							$saldoLinea['capital']+=$amortizaciones[0]->id_grupo_solidario0->monto;
							$saldoPagar['capital']+=$amortizaciones[0]->id_grupo_solidario0->monto;
							//Hay un tema con el capital ya que al tomar en cuenta la disposición y no el vencimiento, no es posible por ahora considerar los descuentos de capital.
							if(strtotime($amortizaciones[0]->id_grupo_solidario0->id_solicitud0->fecha_disposicion)<strtotime($fecha1)){
								$resumenPeriodo['capital']['saldo_anterior']+=$amortizaciones[0]->id_grupo_solidario0->monto;
							}else{
								$resumenPeriodo['capital']['cargos']+=$amortizaciones[0]->id_grupo_solidario0->monto;

								$detallesPeriodo[$keyDetallePeriodo]['operacion']='disposicion';
								$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
								$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
								$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
								$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
								$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizaciones[0]->id_grupo_solidario0->id_solicitud0->fecha_disposicion;
								$detallesPeriodo[$keyDetallePeriodo]['concepto']="Disposición";
								$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizaciones[0]->id_grupo_solidario0->monto;
								$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizaciones[0]->id_grupo_solidario0->monto;
								$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['iva']+=0;
							}
						}
					}else{
						//Si es un individual simple o primera disposicion revolvente
						if(strtotime($amortizaciones[0]->id_solicitud0->fecha_disposicion)<=strtotime($fecha2)){
							//Si se dispuso antes del periodo o en el periodo se agrega al saldo
							$saldoLinea['capital']+=$amortizaciones[0]->id_solicitud0->entregable;
							$saldoPagar['capital']+=$amortizaciones[0]->id_solicitud0->entregable;
							//Hay un tema con el capital ya que al tomar en cuenta la disposición y no el vencimiento, no es posible por ahora considerar los descuentos de capital.
							if(strtotime($amortizaciones[0]->id_solicitud0->fecha_disposicion)<strtotime($fecha1)){
								$resumenPeriodo['capital']['saldo_anterior']+=$amortizaciones[0]->id_solicitud0->entregable;
							}else{
								$resumenPeriodo['capital']['cargos']+=$amortizaciones[0]->id_solicitud0->entregable;

								$detallesPeriodo[$keyDetallePeriodo]['operacion']='disposicion';
								$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
								$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
								$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
								$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
								$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizaciones[0]->id_solicitud0->fecha_disposicion;
								$detallesPeriodo[$keyDetallePeriodo]['concepto']="Disposición";
								$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizaciones[0]->id_solicitud0->entregable;
								$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizaciones[0]->id_solicitud0->entregable;
								$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['iva']+=0;
							}
						}
					}
				}
			}else{
				//Si es una disposición revolvente
				if(strtotime($amortizaciones[0]->id_disposicion0->fecha)<=strtotime($fecha2)){
					//Si es disposicion y se dispuso antes del periodo o en el periodo se agrega al saldo
					// if ($model->id_producto0->tabla_disposiciones=="unica") {
					// 	$consultaTablaUnica = Disposiciones::model()->findAll("id_solicitud=:solicitud",array(":solicitud"=>$model->id));
					// 	foreach ($consultaTablaUnica as $tablaUnica) {
					// 		$saldoLinea['capital']+=$tablaUnica->importe;
					// 		$saldoPagar['capital']+=$tablaUnica->importe;
					// 	}
					// }
					$saldoLinea['capital']+=$amortizaciones[0]->id_disposicion0->importe;
					$saldoPagar['capital']+=$amortizaciones[0]->id_disposicion0->importe;
					if(strtotime($amortizaciones[0]->id_disposicion0->fecha)<=strtotime($fecha1)){
						$resumenPeriodo['capital']['saldo_anterior']+=$amortizaciones[0]->id_disposicion0->importe;
					}else{
						$resumenPeriodo['capital']['cargos']+=$amortizaciones[0]->id_disposicion0->importe;
						$detallesPeriodo[$keyDetallePeriodo]['operacion']='disposicion';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizaciones[0]->id_disposicion0->fecha;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Disposición";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizaciones[0]->id_disposicion0->importe;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizaciones[0]->id_disposicion0->importe;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=0;
					}
				}
			}
			if(isset($detallesPeriodo[$keyDetallePeriodo])){
				//Si se agrego la amortización se suma 1 al key
				$keyDetallePeriodo++;
			}

			//Interes, Mora y Comisiones


			foreach ($amortizaciones as $keyA => $amortizacion) {
				$idsDisp[]=$amortizacion->id;
				if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0){
					$fecha_pago=date("Y-m-d",strtotime($amortizacion->fecha_pago));
				}else{
					$fecha_pago=0;
				}

				$agregar=false;
				if(strtotime($amortizacion->fecha_amortizacion)<=strtotime($fecha2)){
					//Si se vence antes del periodo o en el periodo se agrega
					$agregar=true;
				}else{
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
						//Si se paga antes del periodo o en el periodo se agrega
						$agregar=true;
					}
				}
				if($agregar){
					$idsDispA[]=$amortizacion->id;
					//Capital
					//El capital de la amortización no se suma al saldo de linea|saldo pagar|resumen del periodo ya que se agrega desde la disposición
					$saldoLinea['capital']+=0;
					$saldoPagar['capital']+=0;
					//Si la amortización se paga antes de la fecha1 es parte del saldo anterior
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<strtotime($fecha1)){
						//Si ya esta pagado se suma cero al saldo
						$resumenPeriodo['capital']['saldo_anterior']+=0;
					}elseif(strtotime($amortizacion->fecha_amortizacion)<strtotime($fecha1)){
						//Si la amortización se vence antes de la fecha1 es parte del saldo anterior
						//Si no esta pagado se suma cero al saldo porque el capital ya se agrego desde la disposición
						$resumenPeriodo['capital']['saldo_anterior']+=0;
					}else{
						//Si se vence o se paga despues de la fecha1 es parte del periodo ya que ya se sabe que es menor a la fecha2
						//Se suma cero al cargo porque ya se agregi desde la disposicion
						$resumenPeriodo['capital']['cargos']+=0;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizacion->pago_capital;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizacion->pago_capital;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=0;

					}

					//Interes
					//Solo se agregan al saldo de linea|saldo pagar las amortizaciones no pagadas
					if(!isset($fecha_pago) || $fecha_pago==0 || strtotime($fecha_pago)>strtotime($fecha2)){
						$saldoLinea['interes']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$saldoLinea['iva_interes']+=$amortizacion->iva_interes_generado;
						$saldoPagar['interes']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$saldoPagar['iva_interes']+=$amortizacion->iva_interes_generado;
					}
					//Si se paga antes de la fecha1 es parte del saldo anterior
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<strtotime($fecha1)){
						//Se suma cero al saldo anterior cuando ya esta pagado
						$resumenPeriodo['interes']['saldo_anterior']+=0;
						$resumenPeriodo['iva_interes']['saldo_anterior']+=0;
					}elseif(strtotime($amortizacion->fecha_amortizacion)<strtotime($fecha1)){
						//Si se vence antes de la fecha1 es parte del saldo anterior
						//Se suman los importes vencidos al saldo anterior
						$resumenPeriodo['interes']['saldo_anterior']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$resumenPeriodo['iva_interes']['saldo_anterior']+=$amortizacion->iva_interes_generado;
					}else{
						//Si se vence o se paga despues de la fecha1 es parte del periodo ya que ya se sabe que es menor a la fecha2
						//Se suman los importes vencidos al cargo
						$resumenPeriodo['interes']['cargos']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$resumenPeriodo['iva_interes']['cargos']+=$amortizacion->iva_interes_generado;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizacion->pago_interes;//Ya incluye el IVA
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$amortizacion->iva_interes_generado;
					}

					//Comisiones
					//Solo se agregan al saldo de linea|saldo pagar las amortizaciones no pagadas
					if(!isset($fecha_pago) || $fecha_pago==0  || strtotime($fecha_pago)>strtotime($fecha2)){
						foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
							$saldoLinea['comisiones']+=$comision["monto"];
							$saldoLinea['iva_comisiones']+=$comision["iva"];
							$saldoPagar['comisiones']+=$comision["monto"];
							$saldoPagar['iva_comisiones']+=$comision["iva"];
						}
					}

					//Mora
					$moratoriosDevengados=MoratoriosAmortizaciones::model()->findAll("id_amortizacion=:amortizacion AND fecha<=:fecha2",array(':amortizacion'=>$amortizacion->id,':fecha2'=>$fecha2));
					foreach ($moratoriosDevengados as $moratorioDevengado) {
						//Solo se agregan al saldo de linea|saldo pagar las amortizaciones no pagadas
						if(!isset($fecha_pago) || $fecha_pago==0 || strtotime($fecha_pago)>strtotime($fecha2)){
							$saldoLinea['mora']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$saldoLinea['iva_mora']+=$moratorioDevengado->monto_impuesto;
							$saldoPagar['mora']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$saldoPagar['iva_mora']+=$moratorioDevengado->monto_impuesto;
						}
						//Si se paga antes de la fecha1 es parte del saldo anterior
						if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<strtotime($fecha1)){
							//Se suma cero al saldo anterior cuando ya esta pagado
							$resumenPeriodo['mora']['saldo_anterior']+=0;
							$resumenPeriodo['iva_mora']['saldo_anterior']+=0;
						}elseif(strtotime($moratorioDevengado->fecha)<strtotime($fecha1)){
							//Si se vence antes de la fecha1 es parte del saldo anterior
							//Se suma el importe vencido al saldo anterior
							$resumenPeriodo['mora']['saldo_anterior']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$resumenPeriodo['iva_mora']['saldo_anterior']+=$moratorioDevengado->monto_impuesto;
						}else{
							//Si se vence o se paga despues de la fecha1 es parte del periodo ya que ya se sabe que es menor a la fecha2
							//Se suman los importes vencidos al cargo
							$resumenPeriodo['mora']['cargos']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$resumenPeriodo['iva_mora']['cargos']+=$moratorioDevengado->monto_impuesto;

							$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
							$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
							$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
							$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
							$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
							$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
							$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
							$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$moratorioDevengado->monto_moratorio;//Ya incluye el IVA
							$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
							$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
							$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
							$detallesPeriodo[$keyDetallePeriodo]['mora']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$detallesPeriodo[$keyDetallePeriodo]['iva']+=$moratorioDevengado->monto_impuesto;
						}
					}
				}else{
					$idsDisp1[]=$amortizacion->id;
					//Si no se agrega la amortización revisar si la fecha anterior estaba en el periodo para calcular los días de interes de la fecha de vencimiento anterior a la fecha de corte del periodo
					//Se usa CAST en la fecha de pago para eliminar la hora de la fecha
					$parcialidades=ParcialidadesAmortizaciones::model()->findAll(array("condition"=>"id_amortizacion=:amortizacion AND CAST(fecha_pago AS DATE)<=:fecha","order"=>"fecha_pago ASC","params"=>array(':amortizacion'=>$amortizacion->id,':fecha'=>$fecha2)));

					//Interes
					if(strtotime($amortizaciones[$keyA-1]->fecha_amortizacion)<strtotime($fecha2)){
						//Mismo codigo que en amortizaciones para recalcular interes y luego se pueda calcular el del subperiodo
						if(($cobroInteres=="ajustable" && count($parcialidades)>0) || $cobroInteres=="variable"){
							$limiteDias=false;
							if(in_array($model->id_tipo_amortizacion0->nombre,array('Mensual','Trimestral','Semestral','Anual','Fin de Mes','Pago Único (Bullet) con Interes Mensual','15 y Fin de Mes','Pago Único (Bullet) con Interes Semestral','Quincenal Personalizado'))){
								$limiteDias=true;
							}
							$diasAño=$model->id_producto0->calculo_base;
							$veces_anual=$amortizacion->getVeces_anual($model);
							if(isset($amortización->id_grupo_solidario) && $amortización->id_grupo_solidario!=0){
								$tasa_interes=$model->sobretasa+($amortizacion->getValorTasaReferencia($model->nombre_tasa_referencia)/100);
							}elseif(isset($amortización->id_disposicion) && $amortización->id_disposicion!=0){
								$tasa_interes=$amortizacion->id_disposicion0->tasa;
							}else{
								$tasa_interes=$model->sobretasa+($amortizacion->getValorTasaReferencia($model->nombre_tasa_referencia)/100);
							}
							$fechaP0=$amortizaciones[$keyA-1]->fecha_amortizacion;
							$saldoCapital0=$amortizaciones[$keyA-1]->saldo_capital;
							$interes0=0;
							$diasMaximo=round($diasAño/$veces_anual);
							$diasCalculados=0;
							$fecha_vencimiento=$amortizacion->fecha_amortizacion;
							if($cobroInteres=="variable" && strtotime($fecha_vencimiento)>strtotime($fecha2)){
								$fecha_vencimiento=$fecha2;
							}
							foreach($parcialidades as $parcialidad){
								$idsParcialidad[]=$parcialidad->id;
								$fechaPagoParcial=date("Y-m-d",strtotime($parcialidad->fecha_pago));

								if($parcialidad->pago_capital>0){
									if(strtotime($fechaPagoParcial)<strtotime($fecha_vencimiento)){
										if(strtotime($fechaPagoParcial)>strtotime($fechaP0)){
											//$interes0-=$parcialidad->pago_interes;
											$diferenciaDias=round((strtotime($fechaPagoParcial)-strtotime($fechaP0))/60/60/24,0);
											if($diasCalculados+$diferenciaDias>$diasMaximo && $limiteDias==true){
												$diferenciaDias=$diasMaximo-$diasCalculados;
											}
											$diasCalculados+=$diferenciaDias;
											$interes0+=round((1+$model->porcentaje_impuesto)*$saldoCapital0*$tasa_interes*$diferenciaDias/$diasAño,$decimales);
											$fechaP0=$parcialidad->fecha_pago;

											$saldoCapital0-=$parcialidad->pago_capital;
										}
									}
								}
							}
							if(strtotime($fecha_vencimiento)>strtotime($fechaP0)){
								$diferenciaDias=round((strtotime($fecha_vencimiento)-strtotime($fechaP0))/60/60/24,0);
								if($diasCalculados+$diferenciaDias>$diasMaximo && $limiteDias==true){
									$diferenciaDias=$diasMaximo-$diasCalculados;
								}
								$interes0+=round((1+$model->porcentaje_impuesto)*$saldoCapital0*$tasa_interes*$diferenciaDias/$diasAño,$decimales);
								//echo "<br>";
								//var_dump("interes0: ".$interes0);
							}
							$interes_generado=$interes0/(1+$model->porcentaje_impuesto);
							// echo "<br>";
							// var_dump("interes generado 1: ".$interes_generado);
							$interes_generado=round($interes_generado,$decimales);
							$iva_interes_generado=$interes_generado*$model->porcentaje_impuesto;
						}
					}
					$fecha1Ante = $fechaSinCambiar;
					$between = false;
					if (strtotime($amortizaciones[$keyA-1]->fecha_amortizacion)>=strtotime($fecha1Ante) && strtotime($amortizaciones[$keyA-1]->fecha_amortizacion)<=strtotime($fecha2)) {
						//echo "<br>";
						//var_dump("fecha1Ante dentro de foreach: ".$fecha1Ante);
						//echo "<br>";
						//var_dump("fecha2 dentro de foreach: ".$fecha2);
						$between = true;
					}
					if ($between==false) {
						$fechaMenos = date("Y-m-d H:i:s",strtotime('-1 day',strtotime($fecha1Ante)));
						$fecha1Ante= $fechaMenos;
					}
					$diasAmortizacion=round((strtotime($amortizacion->fecha_amortizacion)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);
					$diasFecha2=round((strtotime($fecha2)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);
					$diasFecha1=round((strtotime($fecha1)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);

					if ($between==false) {
						$diasFecha1=round((strtotime($fecha1Ante)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);
					}
					// echo "<br>";
					// var_dump("dias fecha1: ".$diasFecha1);
					// echo "<br>";
					// var_dump("dias fecha2: ".$diasFecha2);
					// echo "<br>";
					//var_dump("fecha Amortizaciones: ".$amortizaciones[$keyA-1]->fecha_amortizacion);
					//echo "<br>";
					//var_dump("fecha1: ".$fecha1);
					//echo "<br>";
					//var_dump("fecha2: ".$fecha2);
					if($diasFecha1<=0){
						$diasFecha1=0;
					}
					//echo "<br>";
					//var_dump("fecha1|1|: ".$diasFecha1);
					if($cobroInteres=="variable"){
						//Cuando el cobro de interes es variable ya se calcula a los dias reales transcurridos hasta la fecha2
						$interes_periodo=$interes_generado*(($diasFecha2-$diasFecha1)/$diasFecha2);
						$iva_interes_periodo=$iva_interes_generado*(($diasFecha2-$diasFecha1)/$diasFecha2);
						$interes_periodo_anterior=$interes_generado*(($diasFecha1)/$diasFecha2);
						$iva_interes_periodo_anterior=$iva_interes_generado*(($diasFecha1)/$diasFecha2);
						// echo "<br>";
						// var_dump("interes generado: ".$interes_generado);
						// echo "<br>";
						// var_dump("interes periodo anterior: ".$interes_periodo_anterior);
					}else{
						$interes_periodo=$interes_generado*($diasFecha2/$diasAmortizacion)*(($diasFecha2-$diasFecha1)/$fecha2);
						$iva_interes_periodo=$iva_interes_generado*($diasFecha2/$diasAmortizacion)*(($diasFecha2-$diasFecha1)/$fecha2);
						$interes_periodo_anterior=$interes_generado*($diasFecha2/$diasAmortizacion)*(($diasFecha1)/$fecha2);
						$iva_interes_periodo_anterior=$iva_interes_generado*($diasFecha2/$diasAmortizacion)*(($diasFecha1)/$fecha2);
					}
					//Mora
					$mora_generado=0;//La amortización no esta vencida por lo que es cero
					$iva_mora_generado=0;
					$mora_periodo=0;
					$iva_mora_periodo=0;
					$mora_periodo_anterior=0;
					$iva_mora_periodo_anterior=0;

					//Comisiones
					$importeComisiones=0;
					$importeComisionesIVA=0;
					foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
						$importeComisiones+=$comision["monto"];
						$importeComisionesIVA+=$comision["iva"];
					}
					$comisiones_periodo=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo
					$iva_comisiones_periodo=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo
					$comisiones_periodo_anterior=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo
					$iva_comisiones_periodo_anterior=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo


					//Se calcula lo pagado en parcialidades
					$interesPagado=0;
					$ivaInteresPagado=0;
					$moraPagado=0;
					$ivaMoraPagado=0;
					$comisionesPagado=0;
					$ivaComisionesPagado=0;

					$interesPagadoAnterior=0;
					$ivaInteresPagadoAnterior=0;
					$moraPagadoAnterior=0;
					$ivaMoraPagadoAnterior=0;
					$comisionesPagadoAnterior=0;
					$ivaComisionesPagadoAnterior=0;


					foreach ($parcialidades as $parcialidad) {
						if(strtotime($parcialidad->fecha_pago)>strtotime($fecha1)){
							//Si la fecha de pago es mayor a la fecha1 la parcialidad es del periodo
							$interesPagado+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							$ivaInteresPagado+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							if($amortizacion->pago_moratorios>0){
								$moraPagado+=$amortizacion->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
								$ivaMoraPagado+=$amortizacion->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							}
							if($parcialidad->pago_comisiones>0){
								$comisionesPagado+=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
								$ivaComisionesPagado+=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
							}
						}else{
							//Si la fecha de pago es menor a la fecha1 la parcialidad es anterior al periodo
							$interesPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							$ivaInteresPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							if($amortizacion->pago_moratorios>0){
								$moraPagadoAnterior+=$amortizacion->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
								$ivaMoraPagadoAnterior+=$amortizacion->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							}
							if($parcialidad->pago_comisiones>0){
								$comisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
								$ivaComisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
							}
						}
					}
					// echo "<br>";
					// var_dump("interes periodo: ".$interes_periodo);
					// echo "<br>";
					// var_dump("interes pagado: ".$interesPagado);

					if ($interesPagadoAnterior<=0) {
						$saldo_interes_anterior = $interes_periodo_anterior;
					}else{
						$saldo_interes_anterior=0;
					}
					//var_dump("interes pagado: ".$interesPagado);
					//INTERES
					//Si lo pagado en parcialidades es mayor a lo generado se agrega lo pagado en parcialidades
					if($interes_periodo+$saldo_interes_anterior<$interesPagado){
						//echo "<br>";
						//var_dump("Disposición: ".$amortizacion->id_disposicion0->clave);
						//Se suma el importe pagado en el periodo al saldo linea|saldo pagar
						//Se suma cero al saldo linea|saldo pagar cuando es pagado anterior porque ya esta pagado.
						$saldoLinea['interes']+=$interesPagado+0;
						$saldoLinea['iva_interes']+=$ivaInteresPagado+0;
						$saldoPagar['interes']+=$interesPagado+0;
						$saldoPagar['iva_interes']+=$ivaInteresPagado+0;

						//Se suman los importes pagados en el periodo al cargo
						$resumenPeriodo['interes']['cargos']+=$interesPagado;
						$resumenPeriodo['iva_interes']['cargos']+=$ivaInteresPagado;
						//Se suman cero al cargo cuando es del periodo anterior
						$resumenPeriodo['interes']['saldo_anterior']+=0;
						$resumenPeriodo['iva_interes']['saldo_anterior']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$interesPagado+$ivaInteresPagado;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=$interesPagado;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaInteresPagado;
					}elseif($interes_periodo>0){
						$idsParcialidad2[]=$interes_periodo_anterior;
						//echo "<br>";
						//var_dump("Disposición2: ".$amortizacion->id_disposicion0->clave);
						//Si lo pagado en parcialidades es menor al devengado se toma lo devengado
						//Se suma el importe devengado en el periodo al saldo linea|saldo pagar
						//Se suma el importe devegado en el periodo anterior al saldo linea|saldo pagar
						$saldoLinea['interes']+=$interes_periodo+$interes_periodo_anterior;
						$saldoLinea['iva_interes']+=$iva_interes_periodo+$iva_interes_periodo_anterior;
						$saldoPagar['interes']+=$interes_periodo+$interes_periodo_anterior;
						$saldoPagar['iva_interes']+=$iva_interes_periodo+$iva_interes_periodo_anterior;

						//Se suma el importe devengado al cargo
						$resumenPeriodo['interes']['cargos']+=$interes_periodo;
						$resumenPeriodo['iva_interes']['cargos']+=$iva_interes_periodo;
						//Se suma el importe devengado del periodo anterior al saldo anterior
						$resumenPeriodo['interes']['saldo_anterior']+=$interes_periodo_anterior;
						$resumenPeriodo['iva_interes']['saldo_anterior']+=$iva_interes_periodo_anterior;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$interes_periodo+$iva_interes_periodo;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=$interes_periodo;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$iva_interes_periodo;
					}

					//MORA
					//Si lo pagado en parcialidades es mayor a lo generado se agrega lo pagado en parcialidades
					if($mora_periodo<$moraPagado){
						//Se suma el importe pagado en el periodo al saldo linea|saldo pagar
						//Se suma cero al saldo linea|saldo pagar cuando es pagado anterior porque ya esta pagado.
						$saldoLinea['mora']+=$moraPagado+0;
						$saldoLinea['iva_mora']+=$ivaMoraPagado+0;
						$saldoPagar['mora']+=$moraPagado+0;
						$saldoPagar['iva_mora']+=$ivaMoraPagado+0;

						//Se suman los importes pagados en el periodo al cargo
						$resumenPeriodo['mora']['cargos']+=$moraPagado;
						$resumenPeriodo['iva_mora']['cargos']+=$ivaMoraPagado;
						//Se suman cero al cargo cuando es del periodo anterior
						$resumenPeriodo['mora']['saldo_anterior']+=0;
						$resumenPeriodo['iva_mora']['saldo_anterior']+=0;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->id_disposicion0->fecha;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$moraPagado+$ivaMoraPagado;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=$moraPagado;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaMoraPagado;
					}elseif($mora_periodo>0){
						//Si lo pagado en parcialidades es menor al devengado se toma lo devengado
						//Se suma el importe devengado en el periodo al saldo linea|saldo pagar
						//Se suma el importe devegado en el periodo anterior al saldo linea|saldo pagar
						$saldoLinea['mora']+=$mora_periodo+$mora_periodo_anterior;
						$saldoLinea['iva_mora']+=$iva_mora_periodo+$iva_mora_periodo_anterior;
						$saldoPagar['mora']+=$mora_periodo+$mora_periodo_anterior;
						$saldoPagar['iva_mora']+=$iva_mora_periodo+$iva_mora_periodo_anterior;

						//Se suma el importe devengado al cargo
						$resumenPeriodo['mora']['cargos']+=$mora_periodo;
						$resumenPeriodo['iva_mora']['cargos']+=$iva_mora_periodo;
						//Se suma el importe devengado del periodo anterior al saldo anterior
						$resumenPeriodo['mora']['cargos']+=$mora_periodo_anterior;
						$resumenPeriodo['iva_mora']['cargos']+=$iva_mora_periodo_anterior;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$mora_periodo+$iva_mora_periodo;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=$mora_periodo;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$iva_mora_periodo;
					}

					//COMISIONES
					//Si lo pagado en parcialidades es mayor a lo generado se agrega lo pagado en parcialidades
					if($comisiones_periodo<$comisionesPagado){
						//Se suma el importe pagado en el periodo al saldo linea|saldo pagar
						//Se suma cero al saldo linea|saldo pagar cuando es pagado anterior porque ya esta pagado.
						//Nota: Las comisiones no se devengan por parcialidades por lo que siempre sera 0 hasta que la amortización vence
						/*
						$saldoLinea['comisiones']+=$comisionesPagado+0;
						$saldoLinea['iva_comisiones']+=$ivaComisionesPagado+0;
						$saldoPagar['comisiones']+=$comisionesPagado+0;
						$saldoPagar['iva_comisiones']+=$ivaComisionesPagado+0;
						*/
					}elseif($comisiones_periodo>0){
						//Si lo pagado en parcialidades es menor al devengado se toma lo devengado
						//Se suma el importe devengado en el periodo al saldo linea|saldo pagar
						//Se suma el importe devegado en el periodo anterior al saldo linea|saldo pagar
						//Nota: Las comisiones no se devengan por parcialidades por lo que siempre sera 0 hasta que la amortización vence
						/*
						$saldoLinea['comisiones']+=$comisiones_periodo+$comisiones_periodo_anterior;
						$saldoLinea['iva_comisiones']+=$iva_comisiones_periodo+$iva_comisiones_periodo_anterior;
						$saldoPagar['comisiones']+=$comisiones_periodo+$comisiones_periodo_anterior;
						$saldoPagar['iva_comisiones']+=$iva_comisiones_periodo+$iva_comisiones_periodo_anterior;
						*/
					}
				}
				if(isset($detallesPeriodo[$keyDetallePeriodo])){
					//Si se agrego la amortización se suma 1 al key
					$keyDetallePeriodo++;
				}
			}
		}
		//echo "<br>";
		//var_dump(implode(",",$idsDisp));
		//echo "<br>";
		//var_dump(implode(",",$idsDispA));
		//echo "<br>";
		//var_dump(implode(",",$idsDisp1));
		//echo "<br>";
		//var_dump(implode(",",$idsParcialidad));
		//echo "<br>";
		//var_dump(implode(",",$idsParcialidad2));
		//exit();
		//PAGOS
		foreach ($amortizacionesAll as $keyP=>$amortizaciones) {
			foreach ($amortizaciones as $keyA => $amortizacion) {
				if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0){
					$fecha_pago=date("Y-m-d",strtotime($amortizacion->fecha_pago));
				}else{
					$fecha_pago=0;
				}

				$importeComisiones=0;
				$importeComisionesIVA=0;
				foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
					$importeComisiones+=$comision["monto"];
					$importeComisionesIVA+=$comision["iva"];
				}

				$parcialidades=ParcialidadesAmortizaciones::model()->findAll(array("condition"=>"id_amortizacion=:amortizacion AND CAST(fecha_pago AS DATE)<=:fecha","order"=>"fecha_pago ASC","params"=>array(':amortizacion'=>$amortizacion->id,':fecha'=>$fecha2)));

				//Si tiene parcialidades se toma en cuenta la parcialidad
				if(count($parcialidades)>0){
					$capitalPagado=0;
					$interesPagado=0;
					$ivaInteresPagado=0;
					$moraPagado=0;
					$ivaMoraPagado=0;
					$comisionesPagado=0;
					$ivaComisionesPagado=0;

					$capitalPagadoAnterior=0;
					$interesPagadoAnterior=0;
					$ivaInteresPagadoAnterior=0;
					$moraPagadoAnterior=0;
					$ivaMoraPagadoAnterior=0;
					$comisionesPagadoAnterior=0;
					$ivaComisionesPagadoAnterior=0;

					foreach ($parcialidades as $parcialidad) {
						$fecha_pago_parcialidad=date("Y-m-d",strtotime($parcialidad->fecha_pago));
						if(strtotime($fecha_pago_parcialidad)>strtotime($fecha2)){
							//Si la fecha de pago es despues de la fecha2 no se toma en cuenta
							continue;
						}
						//Si la fecha de pago es mayor o igual a la fecha1 la parcialidad es del periodo
						if(strtotime($fecha_pago_parcialidad)>=strtotime($fecha1)){
							$capitalPagado+=$parcialidad->pago_capital;
							if($amortizacion->pago_interes!=0){
								$interesPagado+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
								$ivaInteresPagado+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							}
							if($amortizacion->pago_moratorios>0){
								$moraPagado+=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
								$ivaMoraPagado+=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							}
							if($parcialidad->pago_comisiones>0){
								$comisionesPagado=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
								$ivaComisionesPagado=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
							}
						}else{
							//Si la fecha de pago es menor a la fecha1 la parcialidad es anterior al periodo
							$capitalPagadoAnterior+=$parcialidad->pago_capital;
							if($amortizacion->pago_interes!=0){
								$interesPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);

								$ivaInteresPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							}
							if($amortizacion->pago_moratorios>0){
								$moraPagadoAnterior+=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);

								$ivaMoraPagadoAnterior+=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							}
							if($parcialidad->pago_comisiones>0){
								$comisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
								$ivaComisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
							}
						}
					}
					//Nota: El capital pagado es de toda la historia y los demas conceptos pagados es del periodo
					//Es un tema que surgio por FORTRADE.
					$saldoLinea['capital_pagado']+=$capitalPagado+$capitalPagadoAnterior;
					$saldoLinea['interes_pagado']+=$interesPagado;
					$saldoLinea['iva_interes_pagado']+=$ivaInteresPagado;
					$saldoLinea['comisiones_pagado']+=$comisionesPagado;
					$saldoLinea['iva_comisiones_pagado']+=$ivaComisionesPagado;
					$saldoLinea['mora_pagado']+=$moraPagado;
					$saldoLinea['iva_mora_pagado']+=$ivaMoraPagado;
					$saldoLinea['iva_pagado']+=$ivaInteresPagado+$ivaMoraPagado;

					//Se resta el capital pagado del saldo de linea|saldo pagar, esto siempre esa asi ya que el capital se toma lo dispuesto
					//y no lo vencido
					$saldoLinea['capital']-=$capitalPagado+$capitalPagadoAnterior;
					$saldoPagar['capital']-=$capitalPagado+$capitalPagadoAnterior;
					//Solo se restan del saldo de linea|saldo pagar las amortizaciones no pagadas
					if(!isset($fecha_pago) || $fecha_pago==0 || strtotime($fecha_pago)>strtotime($fecha2)){
						$saldoLinea['interes']-=$interesPagado+$interesPagadoAnterior;
						$saldoLinea['iva_interes']-=$ivaInteresPagado+$ivaInteresPagadoAnterior;
						$saldoLinea['mora']-=$moraPagado+$moraPagadoAnterior;
						$saldoLinea['iva_mora']-=$ivaMoraPagado+$ivaMoraPagadoAnterior;

						$saldoPagar['interes']-=$interesPagado+$interesPagadoAnterior;
						$saldoPagar['iva_interes']-=$ivaInteresPagado+$ivaInteresPagadoAnterior;
						$saldoPagar['mora']-=$moraPagado+$moraPagadoAnterior;
						$saldoPagar['iva_mora']-=$ivaMoraPagado+$ivaMoraPagadoAnterior;

						//Para el caso de las comisiones es necesario que la fecha de vencimiento se encuentre en el periodo para que no de negativos al pagar antes.
						/*
						     Vencimiento ------------------------------|-----|--------
						                                               VA    PA
						        Comision -------|----------------------|--------------
						                        PC                     VC
						Estado de Cuenta -------------|-----------|-------------------
						                              I           F
						*/
						if(strtotime($amortizacion->fecha_amortizacion)<=strtotime($fecha2)){
							$saldoLinea['comisiones']-=$comisionesPagado+$comisionesPagadoAnterior;
							$saldoLinea['iva_comisiones']-=$ivaComisionesPagado+$ivaComisionesPagadoAnterior;

							$saldoPagar['comisiones']-=$comisionesPagado+$comisionesPagadoAnterior;
							$saldoPagar['iva_comisiones']-=$ivaComisionesPagado+$ivaComisionesPagadoAnterior;
						}
					}

					//Si se paga antes de la fecha1 es parte del saldo anterior
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<strtotime($fecha1)){
						//Se suma el importe de capital al saldo anterior
						$resumenPeriodo['capital']['saldo_anterior']-=$capitalPagadoAnterior;
						//Se suma cero al saldo anterior porque ya esta pagado
						$resumenPeriodo['interes']['saldo_anterior']-=0;//$interesPagadoAnterior;
						$resumenPeriodo['mora']['saldo_anterior']-=0;//$moraPagadoAnterior;
						$resumenPeriodo['iva_interes']['saldo_anterior']-=0;//$ivaInteresPagadoAnterior;
						$resumenPeriodo['iva_mora']['saldo_anterior']-=0;//$ivaMoraPagadoAnterior;
					}elseif(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)>=strtotime($fecha1) && strtotime($fecha_pago)<=strtotime($fecha2)){
						//Si se paga despues de la fecha1 y hasta la fecha2 el pago es parte del periodo
						$resumenPeriodo['capital']['abonos']+=$capitalPagado;
						$resumenPeriodo['interes']['abonos']+=$interesPagado;
						$resumenPeriodo['mora']['abonos']+=$moraPagado;
						$resumenPeriodo['iva_interes']['abonos']+=$ivaInteresPagado;
						$resumenPeriodo['iva_mora']['abonos']+=$ivaMoraPagado;
					}else{
						//Si no se ha pagado es parte del periodo
						$resumenPeriodo['capital']['abonos']+=$capitalPagado;
						$resumenPeriodo['interes']['abonos']+=$interesPagado;
						$resumenPeriodo['mora']['abonos']+=$moraPagado;
						$resumenPeriodo['iva_interes']['abonos']+=$ivaInteresPagado;
						$resumenPeriodo['iva_mora']['abonos']+=$ivaMoraPagado;

						//Se suman los importes al saldo anterior ya que aun no se ha pagado la amortizacion
						$resumenPeriodo['capital']['saldo_anterior']-=$capitalPagadoAnterior;
						$resumenPeriodo['interes']['saldo_anterior']-=$interesPagadoAnterior;
						$resumenPeriodo['mora']['saldo_anterior']-=$moraPagadoAnterior;
						$resumenPeriodo['iva_interes']['saldo_anterior']-=$ivaInteresPagadoAnterior;
						$resumenPeriodo['iva_mora']['saldo_anterior']-=$ivaMoraPagadoAnterior;
					}

					foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
						if($comisionesPagado>0){
							$comisionesPeriodo[]=array(
								'fecha'=>$parcialidad->fecha_pago,
								'concepto'=>"Parcialidad ".$comision['comision'],
								'monto'=>$comision['monto']*(($comisionesPagado)/($importeComisiones)),
								'iva'=>$comision['iva']*(($comisionesPagado)/($importeComisiones)),
								'moneda'=>'MXN',
							);
						}
					}

					if($capitalPagado+$interesPagado+$comisionesPagado+$moraPagado+$ivaInteresPagado+$ivaMoraPagado>0.01){
						$detallesPeriodo[$keyDetallePeriodo]['operacion']='pago';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$parcialidad->fecha_pago;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Parcialidad {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=$capitalPagado+$interesPagado+$comisionesPagado+$moraPagado+$ivaInteresPagado+$ivaMoraPagado;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=$capitalPagado;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=$interesPagado;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=$moraPagado;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaInteresPagado+$ivaMoraPagado;

						$keyDetallePeriodo++;
					}


				}else{
					//Si la amortizacion no tiene parcialidades
					//Solo se toman en cuenta los pagos hasta la fecha2
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
						//Se resta el capital al saldo de linea de capital
						$saldoLinea['capital']-=$amortizacion->pago_capital;
						//Lo pagado no se agrega al saldo de linea
						if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
							$saldoLinea['interes']-=0;
							$saldoLinea['iva_interes']-=0;
							$saldoLinea['comisiones']-=0;
							$saldoLinea['iva_comisiones']-=0;
							$saldoLinea['mora']-=0;
							$saldoLinea['iva_mora']-=0;
						}

						//Lo pagado se agrega dentro de los pagados del saldo de linea
						$saldoLinea['capital_pagado']+=$amortizacion->pago_capital;
						$saldoLinea['interes_pagado']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$saldoLinea['iva_interes_pagado']+=$amortizacion->iva_interes_generado;
						$saldoLinea['comisiones_pagado']+=$amortizacion->pago_comisiones*(1-$amortizacion->factor_iva_comisiones);
						$saldoLinea['iva_comisiones_pagado']+=$amortizacion->pago_comisiones*($amortizacion->factor_iva_comisiones);
						$saldoLinea['mora_pagado']+=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
						$saldoLinea['iva_mora_pagado']+=$amortizacion->iva_moratorios;
						$saldoLinea['iva_pagado']+=$amortizacion->iva_interes_generado+$amortizacion->iva_moratorios+$amortizacion->pago_comisiones*($amortizacion->factor_iva_comisiones);

						//Se resta el capital al saldo a pagar de capital
						$saldoPagar['capital']-=$amortizacion->pago_capital;
						//Lo pagado no se agrega al saldo a pagar
						if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
							$saldoPagar['interes']-=0;
							$saldoPagar['iva_interes']-=0;
							$saldoPagar['comisiones']-=0;
							$saldoPagar['iva_comisiones']-=0;
							$saldoPagar['mora']-=0;
							$saldoPagar['iva_mora']-=0;
						}

						if($amortizacion->pago_comisiones>0){
							$comisionesPagado=$amortizacion->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
							$ivaComisionesPagado=$amortizacion->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
						}

						//Solo se agregan los pagos del periodo a los abonos del resumen del periodo
						if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)>=strtotime($fecha1)){
							$resumenPeriodo['capital']['abonos']+=$amortizacion->pago_capital;
							$resumenPeriodo['interes']['abonos']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
							$resumenPeriodo['mora']['abonos']+=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
							$resumenPeriodo['iva_interes']['abonos']+=$amortizacion->iva_interes_generado;
							$resumenPeriodo['iva_mora']['abonos']+=$amortizacion->iva_moratorios;

							//Si la amortizacion se paga en el periodo tambien se agregan las comisiones
							foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
								if($comisionesPagado>0){
									$comisionesPeriodo[]=array(
										'fecha'=>$amortizacion->fecha_pago,
										'concepto'=>"Pago ".$comision['comision'],
										'monto'=>$comision['monto'],
										'iva'=>$comision['iva'],
										'moneda'=>'MXN',
									);
								}
							}

							$detallesPeriodo[$keyDetallePeriodo]['operacion']='pago';
							$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
							$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
							$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
							$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
							$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_pago;
							$detallesPeriodo[$keyDetallePeriodo]['concepto']="Pago {$amortizacion->numero_amortizacion}";
							$detallesPeriodo[$keyDetallePeriodo]['cargo']+=0;
							$detallesPeriodo[$keyDetallePeriodo]['abono']+=$amortizacion->pago_capital+$amortizacion->pago_interes+$amortizacion->pago_comisiones+$amortizacion->pago_moratorios;
							$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizacion->pago_capital;
							$detallesPeriodo[$keyDetallePeriodo]['interes']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
							$detallesPeriodo[$keyDetallePeriodo]['mora']+=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
							$detallesPeriodo[$keyDetallePeriodo]['iva']+=$amortizacion->iva_interes_generado+$amortizacion->iva_moratorios;

							$keyDetallePeriodo++;
						}else{
							//Se resta el importe de capital cuando el pago es del periodo anterior
							$resumenPeriodo['capital']['saldo_anterior']-=$amortizacion->pago_capital;
							//Se resta cero cuando el pago es del periodo anterior
							$resumenPeriodo['interes']['saldo_anterior']-=0;
							$resumenPeriodo['mora']['saldo_anterior']-=0;
							$resumenPeriodo['iva_interes']['saldo_anterior']-=0;
							$resumenPeriodo['iva_mora']['saldo_anterior']-=0;
						}
					}
				}
			}
		}
		//exit();

		$data=array(
			'saldo_linea'=>$saldoLinea,
			'saldo_pagar'=>$saldoPagar,
			'resumen_periodo'=>$resumenPeriodo,
			'comisiones_periodo'=>$comisionesPeriodo,
			'detalles_periodo'=>$detallesPeriodo,
		);

		return $data;
	}
	
    /**
     * Calcula las estructuras de capitalización a partir de los arreglos
     * recibidos. Devuelve los saldos generados para el periodo actual y el
     * periodo inmediato anterior.
     */
    private function calcularCapitalizacion(array $nuevoCalculoAnterior, array $nuevoCalculo)
    {
        $saldoLineaCalculo = array(
            'saldoLineaCorte'    => 0,
            'saldoInsoluto'      => 0,
            'interesesDevengados'=> 0,
            'iva'                => 0,
            'interesOrdinario'   => 0,
            'interesMoratorios'  => 0,
            'ivaInteres'         => 0,
            'ivaMoratorio'       => 0,
            'capitalizado'       => 0,
            'interes_pagado'     => 0,
            'interes_pagado_capitalizable' => 0,
        );

        $saldoLineaCalculoAnterior = array(
            'saldoLineaCorte'    => 0,
            'saldoInsoluto'      => 0,
            'interesesDevengados'=> 0,
            'iva'                => 0,
            'interesOrdinario'   => 0,
            'interesMoratorios'  => 0,
            'ivaInteres'         => 0,
            'ivaMoratorio'       => 0,
            'capitalizado'       => 0,
            'interes_pagado'     => 0,
            'interes_pagado_capitalizable' => 0,
        );

        foreach ($nuevoCalculoAnterior as $item) {
            foreach ($item as $subItem) {
                $pagoMoratorio  = 0;
                $ivaMoratorio   = 0;
                $interesGenerado= 0;
                $ivaInteres     = 0;

                foreach ($subItem as $key => $value) {
                    if($key=="pago_total") {
                        $saldoLineaCalculoAnterior['saldoLineaCorte'] += $value;
                    }
                    if($key=="saldo_capital") {
                        $saldoLineaCalculoAnterior['saldoInsoluto'] += $value;
                    }
                    if($key=="pago_moratorios") {
                        $pagoMoratorio = $value;
                    }
                    if($key=="iva_moratorios") {
                        $ivaMoratorio = $value;
                    }
                    if($key=="interes_generado") {
                        $interesGenerado = $value;
                    }
                    if($key=="iva_moratorios") {
                        $saldoLineaCalculoAnterior['iva'] += $value;
                    }
                    if($key=="iva_interes_generado") {
                        $saldoLineaCalculoAnterior['iva'] += $value;
                        $ivaInteres = $value;
                    }
                    if($key=="capitalizado") {
                        $saldoLineaCalculoAnterior['capitalizado'] += $value;
                    }
                    if($key=="interes_pagado") {
                        $saldoLineaCalculoAnterior['interes_pagado'] += $value;
                    }
                    if($key=="interes_pagado_capitalizable") {
                        $saldoLineaCalculoAnterior['interes_pagado_capitalizable'] += $value;
                    }
                }

                $resta = $pagoMoratorio - $ivaMoratorio;

                $saldoLineaCalculoAnterior['interesesDevengados'] += $resta + $interesGenerado;
                $saldoLineaCalculoAnterior['interesOrdinario']    += $interesGenerado;
                $saldoLineaCalculoAnterior['interesMoratorios']    += $resta;
                $saldoLineaCalculoAnterior['ivaMoratorio']         += $ivaMoratorio;
                $saldoLineaCalculoAnterior['ivaInteres']           += $ivaInteres;
            }
        }

        foreach ($nuevoCalculo as $item) {
            foreach ($item as $subItem) {
                $pagoMoratorio  = 0;
                $ivaMoratorio   = 0;
                $interesGenerado= 0;
                $ivaInteres     = 0;

                foreach ($subItem as $key => $value) {
                    if($key=="pago_total") {
                        $saldoLineaCalculo['saldoLineaCorte'] += $value;
                    }
                    if($key=="saldo_capital") {
                        $saldoLineaCalculo['saldoInsoluto'] += $value;
                    }
                    if($key=="pago_moratorios") {
                        $pagoMoratorio = $value;
                    }
                    if($key=="iva_moratorios") {
                        $ivaMoratorio = $value;
                    }
                    if($key=="interes_generado") {
                        $interesGenerado = $value;
                    }
                    if($key=="iva_moratorios") {
                        $saldoLineaCalculo['iva'] += $value;
                    }
                    if($key=="iva_interes_generado") {
                        $saldoLineaCalculo['iva'] += $value;
                        $ivaInteres = $value;
                    }
                    if($key=="capitalizado") {
                        $saldoLineaCalculo['capitalizado'] += $value;
                    }
                    if($key=="interes_pagado") {
                        $saldoLineaCalculo['interes_pagado'] += $value;
                    }
                    if($key=="interes_pagado_capitalizable") {
                        $saldoLineaCalculo['interes_pagado_capitalizable'] += $value;
                    }
                }

                $resta = $pagoMoratorio - $ivaMoratorio;

                $saldoLineaCalculo['interesesDevengados'] += $resta + $interesGenerado;
                $saldoLineaCalculo['interesOrdinario']    += $interesGenerado;
                $saldoLineaCalculo['interesMoratorios']    += $resta;
                $saldoLineaCalculo['ivaMoratorio']         += $ivaMoratorio;
                $saldoLineaCalculo['ivaInteres']           += $ivaInteres;
            }
        }

        return array(
            'saldoLineaCalculo'         => $saldoLineaCalculo,
            'saldoLineaCalculoAnterior' => $saldoLineaCalculoAnterior,
        );
    }

    public function getDetallesPeriodoDisposicion($idSolicitud,$fecha1,$fecha2,$cliente=null, $incluirDisposicionesPagadas = 0)
	 {
        $model=$this;
        $data=array();

        $cobroInteres=$model->id_producto0->cobro_interes;

        $empresa=Empresa::model()->find();
        $decimales=2;
        if(isset($empresa->decimales)){
            $decimales=$empresa->decimales;
        }
        if(is_null($model->tabla_disposiciones)){
            $model->tabla_disposiciones=$model->id_producto0->tabla_disposiciones;
        }

        if(isset($model->id_grupo_cliente) && $model->id_grupo_cliente!=0){
            //Grupal
            if(!is_null($cliente)){
                $sqlComisiones="
					SELECT
						*
					FROM
						comisiones_amortizaciones c LEFT JOIN
						amortizaciones a ON(c.id_amortizacion=a.id) LEFT JOIN
						grupos_solidarios g ON(a.id_grupo_solidario=g.id)
					WHERE
						g.id_solicitud={$model->id} AND
						c.financiado<>1
				";
                $dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
                $infoComisiones=array();
                foreach ($dataComisiones as $comision) {
                    $infoComisiones[$comision["id_amortizacion"]][]=array(
                        'comision'=>$comision["nombre"],
                        'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
                        'iva'=>$comision["monto_impuesto"],
                    );
                }
                $amortizaciones=Amortizaciones::model()->with("id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente",array(':solicitud'=>$model->id,':cliente'=>$cliente));

                $amortizacionesAll[0]=$amortizaciones;
            }
        }else{
            //Principal--------------------------------------
            $sqlComisiones="
				SELECT
				    c.id as id_comision,
					c.*,
				    a.*
				FROM
					comisiones_amortizaciones c LEFT JOIN
					amortizaciones a ON(c.id_amortizacion=a.id)
				WHERE
					a.id_solicitud={$model->id} AND
					c.financiado<>1
			";
            $dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
            $infoComisiones=array();

            foreach ($dataComisiones as $comision) {
                $infoComisiones[$comision["id_amortizacion"]][]=array(
                    'id'=>$comision["id_comision"],
                    'descontar'=>$comision["descontar_dispocision"],
                    'comision'=>$comision["nombre"],
                    'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
                    'iva'=>$comision["monto_impuesto"],
                );
            }
            $amortizaciones=Amortizaciones::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$model->id));
            $disposiciones=Disposiciones::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$model->id));

			//aqui todavia no teraer las amortaziones
            $amortizacionesAll[0]=$amortizaciones;
            $nuevoCalculo=null;
            $nuevoCalculoAnterior=null;

            //Disposiciones-----------------------------------
			$solicitud=Solicitudes::model()->findByPK($idSolicitud);
            if($solicitud->id_producto0->tabla_disposiciones=="unica" || $solicitud->intereses_visibles==1){
                $sqlComisiones="
                    SELECT
                        *
                    FROM
                        comisiones_amortizaciones c LEFT JOIN
                        amortizaciones a ON(c.id_amortizacion=a.id) LEFT JOIN
                        disposiciones d ON(a.id_disposicion=d.id)
                    WHERE
                        d.id_solicitud={$model->id} AND
                        c.financiado<>1
                ";
                $dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
                foreach ($dataComisiones as $comision) {
                    $infoComisiones[$comision["id_amortizacion"]][]=array(
                        'id'=>$comision["id_comision"],
                        'descontar'=>$comision["descontar_dispocision"],
                        'comision'=>$comision["nombre"],
                        'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
                        'iva'=>$comision["monto_impuesto"],
                    );
                }
            }

            $keyAll=1;
            foreach ($disposiciones as $disposicion) {
				Yii::app()->session['estadoCuentaDispo']="EstadoCuenta";

				if (
					mb_strtolower($disposicion->estatus) == "pagado" 
					&& $incluirDisposicionesPagadas == 0
				) {
					continue;
				}

                //trae las id de amortizaciones
                $amortizaciones=Amortizaciones::model()->findAll("id_disposicion=:disposicion",array(':disposicion'=>$disposicion->id));
                $amortizacionesAll[$keyAll]=$amortizaciones;

                //trae el mes que escojio el usuario
                $disposicion= Amortizaciones::model()->getDisposicion($amortizaciones[1]->id,$idSolicitud,$fecha2);
                $nuevoCalculo[$keyAll]=$disposicion;

                //trae el mes anterior (antes de la fecha que el usuario escojio)
                $d = new DateTime( $fecha2);
                $d->modify( 'last day of previous month' );
                $d= $d->format("Y-m-d H:i:s");

                $disposicionAnterior= Amortizaciones::model()->getDisposicion($amortizaciones[1]->id,$idSolicitud,$d);
                $nuevoCalculoAnterior[$keyAll]=$disposicionAnterior;

                $keyAll++;
            }

        }
        $saldoLineaCalculo=array(
            'saldoLineaCorte'=>0,
            'saldoInsoluto'=>0,
            'interesesDevengados'=>0,
            'iva'=>0,
            'interesOrdinario'=>0,
            'interesMoratorios'=>0,
            'ivaInteres'=>0,
            'ivaMoratorio'=>0,
        );

        $saldoLineaCalculoAnterior=array(
            'saldoLineaCorte'=>0,
            'saldoInsoluto'=>0,
            'interesesDevengados'=>0,
            'iva'=>0,
            'interesOrdinario'=>0,
            'interesMoratorios'=>0,
            'ivaInteres'=>0,
            'ivaMoratorio'=>0,
        );

        foreach ($nuevoCalculoAnterior as $item) {
            foreach ($item as $subItem) {
                $pagoMoratorio=0;
                $ivaMoratorio=0;
                $interesGenerado=0;
                $ivaInteres=0;

                foreach ($subItem as $key=>$value) {
                    if($key=="pago_total")
                    {

                        $saldoLineaCalculoAnterior['saldoLineaCorte']+=$value;

                    }

                    if($key=="saldo_capital")
                    {

                        $saldoLineaCalculoAnterior['saldoInsoluto']+=$value;

                    }

                    if($key=="pago_moratorios"){
                        $pagoMoratorio=$value;
                    }

                    if($key=="iva_moratorios"){
                        $ivaMoratorio=$value;
                    }

                    if($key=="interes_generado"){
                        $interesGenerado=$value;
                    }

                    if($key=="iva_moratorios"){
                        $saldoLineaCalculoAnterior['iva']+=$value;
                    }

                    if($key=="iva_interes_generado"){
                        $saldoLineaCalculoAnterior['iva']+=$value;
                        $ivaInteres=$value;
                    }
                }


                $resta=$pagoMoratorio-$ivaMoratorio;


                $saldoLineaCalculoAnterior['interesesDevengados']+=$resta+$interesGenerado;

                $saldoLineaCalculoAnterior['interesOrdinario']+=$interesGenerado;
                $saldoLineaCalculoAnterior['interesMoratorios']+=$resta;


                $saldoLineaCalculoAnterior['ivaMoratorio']+=$ivaMoratorio;
                $saldoLineaCalculoAnterior['ivaInteres']+=$ivaInteres;

            }
        }



        foreach ($nuevoCalculo as $item) {
            foreach ($item as $subItem) {
                $pagoMoratorio=0;
                $ivaMoratorio=0;
                $interesGenerado=0;
                $ivaInteres=0;

                foreach ($subItem as $key=>$value) {
                    if($key=="pago_total")
                    {

                        $saldoLineaCalculo['saldoLineaCorte']+=$value;

                    }

                    if($key=="saldo_capital")
                    {

                        $saldoLineaCalculo['saldoInsoluto']+=$value;

                    }

                    if($key=="pago_moratorios"){
                        $pagoMoratorio=$value;
                    }

                    if($key=="iva_moratorios"){
                        $ivaMoratorio=$value;
                    }

                    if($key=="interes_generado"){
                        $interesGenerado=$value;
                    }

                    if($key=="iva_moratorios"){
                        $saldoLineaCalculo['iva']+=$value;
                    }

                    if($key=="iva_interes_generado"){
                        $saldoLineaCalculo['iva']+=$value;
                        $ivaInteres=$value;
                    }
                }


                $resta=$pagoMoratorio-$ivaMoratorio;


                $saldoLineaCalculo['interesesDevengados']+=$resta+$interesGenerado;

                $saldoLineaCalculo['interesOrdinario']+=$interesGenerado;
                $saldoLineaCalculo['interesMoratorios']+=$resta;


                $saldoLineaCalculo['ivaMoratorio']+=$ivaMoratorio;
                $saldoLineaCalculo['ivaInteres']+=$ivaInteres;
            }
        }

        $capitalizacion = $this->calcularCapitalizacion($nuevoCalculoAnterior, $nuevoCalculo);
        $saldoLineaCalculo['capitalizado'] = $capitalizacion['saldoLineaCalculo']['capitalizado'];
        $saldoLineaCalculo['interes_pagado'] = $capitalizacion['saldoLineaCalculo']['interes_pagado'];
        $saldoLineaCalculo['interes_pagado_capitalizable'] = $capitalizacion['saldoLineaCalculo']['interes_pagado_capitalizable'];
        $saldoLineaCalculoAnterior['capitalizado'] = $capitalizacion['saldoLineaCalculoAnterior']['capitalizado'];
        $saldoLineaCalculoAnterior['interes_pagado'] = $capitalizacion['saldoLineaCalculoAnterior']['interes_pagado'];
        $saldoLineaCalculoAnterior['interes_pagado_capitalizable'] = $capitalizacion['saldoLineaCalculoAnterior']['interes_pagado_capitalizable'];

        $periodoCapitalizado  = $saldoLineaCalculo['capitalizado'] - $saldoLineaCalculoAnterior['capitalizado'];
        $periodoInteresPagado = $saldoLineaCalculo['interes_pagado'] - $saldoLineaCalculoAnterior['interes_pagado'];
        $periodoInteresPagadoCap = $saldoLineaCalculo['interes_pagado_capitalizable'] - $saldoLineaCalculoAnterior['interes_pagado_capitalizable'];

        //NOTA: El saldo de linea y el saldo a pagar son casi iguales, la diferencia es que saldo de linea incluye algunos datos mas.
        //Originalmente el saldo de linea y el saldo a pagar eran diferentes en que el saldo de linea incluia las disposiciones de capital y el saldo a pagar solo incluia los vencimientos de capital.
        $saldoLinea=array(
            'capital'=>0,
            'intereses'=>0,
            'comisiones'=>0,
            'mora'=>0,
        );
        $saldoPagar=array(
            'capital'=>0,
            'intereses'=>0,
            'comisiones'=>0,
            'mora'=>0,
        );
        $resumenPeriodo=array(
            'capital'=>array(
                'cargos'=>0,
                'abonos'=>0,
                'saldo_anterior'=>0,
            ),
            'interes'=>array(
                'cargos'=>0,
                'abonos'=>0,
                'saldo_anterior'=>0,
                'capitalizado'=>0,
            ),
            'mora'=>array(
                'cargos'=>0,
                'abonos'=>0,
                'saldo_anterior'=>0,
            ),
            'iva_interes'=>array(
                'cargos'=>0,
                'abonos'=>0,
                'saldo_anterior'=>0,
            ),
            'iva_mora'=>array(
                'cargos'=>0,
                'abonos'=>0,
                'saldo_anterior'=>0,
            )
        );

        $resumenPeriodo['interes']['capitalizado'] = $periodoCapitalizado;
        $saldoLinea['interes_pagado'] = $periodoInteresPagado;
        $saldoLinea['interes_pagado_capitalizable'] = $periodoInteresPagadoCap;


        $saldoLinea['interes_pagado_cap'] = $periodoCapitalizado;

                                                                
        $comisionesPeriodo=array(
            //array(),
        );
        $detallesPeriodo=array(
            //array(),
        );
        $keyDetallePeriodo=0;

        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
            $ip = $_SERVER['HTTP_CLIENT_IP'];
        } elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
            $ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
        } else {
            $ip = $_SERVER['REMOTE_ADDR'];
        }
        if($ip=="187.189.90.2"){
            $ip=0;
        }

        //DEVENGADOS
        $fechaSinCambiar = $fecha1;
        foreach ($amortizacionesAll as $keyP=>$amortizaciones) {
            //Capital
            if($keyP==0){
                //Si es cero es la principal
                if(isset($amortizaciones[0])){
                    //Si es un grupo solidario
                    if(isset($amortizaciones[0]->id_grupo_solidario) && $amortizaciones[0]->id_grupo_solidario!=0){
                        //Si se dispuso antes del periodo o en el periodo se agrega al saldo
                        if(strtotime($amortizaciones[0]->id_grupo_solidario0->id_solicitud0->fecha_disposicion)<=strtotime($fecha2)){
                            $saldoLinea['capital']+=$amortizaciones[0]->id_grupo_solidario0->monto;
                            $saldoPagar['capital']+=$amortizaciones[0]->id_grupo_solidario0->monto;

							//Hay un tema con el capital ya que al tomar en cuenta la disposición y no el vencimiento, no es posible por ahora considerar los descuentos de capital.
                            if(strtotime($amortizaciones[0]->id_grupo_solidario0->id_solicitud0->fecha_disposicion)<strtotime($fecha1)){
                                $resumenPeriodo['capital']['saldo_anterior']+=$amortizaciones[0]->id_grupo_solidario0->monto;
                            }else{
                                $resumenPeriodo['capital']['cargos']+=$amortizaciones[0]->id_grupo_solidario0->monto;

                                $detallesPeriodo[$keyDetallePeriodo]['operacion']='disposicion';
                                $detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
                                $detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
                                $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                                $detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizaciones[0]->id_grupo_solidario0->id_solicitud0->fecha_disposicion;
                                $detallesPeriodo[$keyDetallePeriodo]['concepto']="Disposición";
                                $detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizaciones[0]->id_grupo_solidario0->monto;
                                $detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
                                $detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizaciones[0]->id_grupo_solidario0->monto;
                                $detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
                                $detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
                                $detallesPeriodo[$keyDetallePeriodo]['iva']+=0;
                            }
                        }
                    }else{
                        //Si es un individual simple o primera disposicion revolvente
                        if(strtotime($amortizaciones[0]->id_solicitud0->fecha_disposicion)<=strtotime($fecha2)){
                            //Si se dispuso antes del periodo o en el periodo se agrega al saldo
                            $saldoLinea['capital']+=$amortizaciones[0]->id_solicitud0->entregable;
                            if($amortizaciones[0]->id_solicitud0->id_producto0->id_tipo_producto==9){
                                $saldoLinea['capital']+=$amortizaciones[0]->id_solicitud0->enganche;
                                //$saldoLinea['capital_pagado']-=$amortizaciones[0]->id_solicitud0->enganche;
                                if($solicitud->fecha_disposicion>=$fecha1 && $solicitud->fecha_disposicion<=$fecha2){
                                    $resumenPeriodo['capital']['cargos']+=$amortizaciones[0]->id_solicitud0->entregable;
                                }else{
                                    $resumenPeriodo['capital']['saldo_anterior']+=$amortizaciones[0]->id_solicitud0->enganche;
                                }
                            }
                            $saldoPagar['capital']+=$amortizaciones[0]->id_solicitud0->entregable;
                            //Hay un tema con el capital ya que al tomar en cuenta la disposición y no el vencimiento, no es posible por ahora considerar los descuentos de capital.
                            if(strtotime($amortizaciones[0]->id_solicitud0->fecha_disposicion)<strtotime($fecha1)){
                                $resumenPeriodo['capital']['saldo_anterior']+=$amortizaciones[0]->id_solicitud0->entregable;
                                if($amortizaciones[0]->id_solicitud0->intereses_visibles==1){
                                    $detallesPeriodo[$keyDetallePeriodo]['operacion']='disposicion';
                                    $detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
                                    $detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
                                    $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                                    $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                    $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                    $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                                    $detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                                    $detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizaciones[0]->id_solicitud0->fecha_disposicion;
                                    $detallesPeriodo[$keyDetallePeriodo]['concepto']="Disposición";
                                    $detallesPeriodo[$keyDetallePeriodo]['cargo']+=0;
                                    $detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
                                    $detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
                                    $detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
                                    $detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
                                    $detallesPeriodo[$keyDetallePeriodo]['iva']+=0;
                                }
                            }else{
                                $resumenPeriodo['capital']['cargos']+=$amortizaciones[0]->id_solicitud0->entregable;

                                $detallesPeriodo[$keyDetallePeriodo]['operacion']='disposicion';
                                $detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
                                $detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
                                $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                                $detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizaciones[0]->id_solicitud0->fecha_disposicion;
                                $detallesPeriodo[$keyDetallePeriodo]['concepto']="Disposición";
                                $detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizaciones[0]->id_solicitud0->entregable;
                                $detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
                                $detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizaciones[0]->id_solicitud0->entregable;
                                $detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
                                $detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
                                $detallesPeriodo[$keyDetallePeriodo]['iva']+=0;
                            }
                        }
                    }
                }
                $modelAmortizacion=Amortizaciones::model()->findByPK($amortizaciones[0]->id);
                if(is_null($modelAmortizacion->id_solicitud)){
                    if(!is_null($modelAmortizacion->id_disposicion)){
                        $disposicion=Disposiciones::model()->findByPK($modelAmortizacion->id_disposicion);
                        $idSolicitud=$disposicion->id_solicitud;
                    }
                }else{
                    $idSolicitud=$modelAmortizacion->id_solicitud;
                }
                $solicitud=Solicitudes::model()->findByPK($idSolicitud);
                $disposiciones_amortizaciones=Disposiciones::model()->findAll("id_solicitud='".$idSolicitud."'");//correccion amortizaciones sin id de solicitud.
                $c=0;
                foreach($disposiciones_amortizaciones as $disposicion_periodo){
                    $c++;
                    if(strtotime($disposicion_periodo->fecha)<=strtotime($fecha2)){
                        $saldoLinea['capital']+=$disposicion_periodo->importe;
                        $saldoPagar['capital']+=$disposicion_periodo->importe;
                        if(strtotime($disposicion_periodo->fecha)<strtotime($fecha1)){
                            $resumenPeriodo['capital']['saldo_anterior']+=$disposicion_periodo->importe;
                            if($solicitud->intereses_visibles==1){
                                $detallesPeriodo[$keyDetallePeriodo.$c]['operacion']='disposicion';
                                $detallesPeriodo[$keyDetallePeriodo.$c]['solicitud']=$model->id;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['disposicion']=$disposicion_periodo->id;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['grupo']=$disposicion_periodo->id_grupo;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['clave_disposicion']="D_".$disposicion_periodo->clave;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['fecha_disposicion']=$disposicion_periodo->fecha;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['fecha_vencimiento']=$disposicion_periodo->fecha;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['fecha_ultima_amortizacion']=$disposicion_periodo->fecha_ultimo_vencimiento;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['plazo']=$disposicion_periodo->plazo;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['fecha']=$disposicion_periodo->fecha;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['concepto']="Disposición";
                                $detallesPeriodo[$keyDetallePeriodo.$c]['cargo']+=0;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['abono']+=0;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['capital']+=0;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['interes']+=0;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['mora']+=0;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['iva']+=0;
                            }
                        }else{
                            $resumenPeriodo['capital']['cargos']+=$disposicion_periodo->importe;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['operacion']='disposicion';
                            $detallesPeriodo[$keyDetallePeriodo.$c]['solicitud']=$model->id;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['disposicion']=$disposicion_periodo->id;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['grupo']=$disposicion_periodo->id_grupo;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['clave_disposicion']="D_".$disposicion_periodo->clave;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['fecha_disposicion']=$disposicion_periodo->fecha;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['fecha_vencimiento']=$disposicion_periodo->fecha;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['fecha_ultima_amortizacion']=$disposicion_periodo->fecha_ultimo_vencimiento;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['plazo']=$disposicion_periodo->plazo;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['fecha']=$disposicion_periodo->fecha;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['concepto']="Disposición";
                            $detallesPeriodo[$keyDetallePeriodo.$c]['cargo']+=$disposicion_periodo->importe;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['abono']+=0;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['capital']+=$disposicion_periodo->importe;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['interes']+=0;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['mora']+=0;
                            $detallesPeriodo[$keyDetallePeriodo.$c]['iva']+=0;
                        }
                    }
                }
            }else{
                //Si es una disposición revolvente
            }
            if(isset($detallesPeriodo[$keyDetallePeriodo])){
                //Si se agrego la amortización se suma 1 al key
                $keyDetallePeriodo++;
            }

            //Interes, Mora y Comisiones
            foreach ($amortizaciones as $keyA => $amortizacion) {
                if($solicitud->id_producto0->tabla_disposiciones=="unica" && $keyP>0){
                    break;
                }
                $idsDisp[]=$amortizacion->id;
                if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0){
                    $fecha_pago=date("Y-m-d",strtotime($amortizacion->fecha_pago));
                }else{
                    $fecha_pago=0;
                }

                $agregar=false;
                $provisiones=false;
                if(strtotime($amortizacion->fecha_amortizacion)<=strtotime($fecha2)){
                    //Si se vence antes del periodo o en el periodo se agrega
                    $agregar=true;
                }else{
                    if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
                        //Si se paga antes del periodo o en el periodo se agrega
                        $agregar=true;
                    }else{
                        if($solicitud->intereses_visibles==1){
                            $agregar=true;
                            $provisiones=true;
                        }
                    }
                }
                if($agregar) {
                    $idsDispA[] = $amortizacion->id;
                    //Capital
                    //El capital de la amortización no se suma al saldo de linea|saldo pagar|resumen del periodo ya que se agrega desde la disposición
                    $saldoLinea['capital'] += 0;
                    $saldoPagar['capital'] += 0;
                    //Si la amortización se paga antes de la fecha1 es parte del saldo anterior
                    if ((isset($fecha_pago) && $fecha_pago != 0 && strtotime($fecha_pago) < strtotime($fecha1)) && ($amortizacion->fecha_amortizacion<$fecha1)) {
                        //Si ya esta pagado se suma cero al saldo
                        $resumenPeriodo['capital']['saldo_anterior'] += 0;
                    } else {
                        //Si se vence o se paga despues de la fecha1 es parte del periodo ya que ya se sabe que es menor a la fecha2
                        //Se suma cero al cargo porque ya se agregi desde la disposicion
                        if ($amortizacion->fecha_amortizacion >= $fecha1) {
                            if ($solicitud->intereses_visibles != 1) {
                                if (!isset($amortizacion->id_disposicion) || $amortizacion->id_disposicion == 0) {
                                    //$resumenPeriodo['capital']['cargos']+=$amortizacion->pago_capital;
                                }
                            }
                            $parcialidadesCapital = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion='" . $amortizacion->id . "'");

                            if ($solicitud->intereses_visibles != 1) {
                                foreach ($parcialidadesCapital as $parcialidad) {
                                    if ($parcialidad->fecha_pago < $fecha1) {
                                        //$resumenPeriodo['capital']['cargos'] -= $parcialidad->pago_capital;
                                    }
                                }
                            }
                            $detallesPeriodo[$keyDetallePeriodo]['operacion'] = 'vencimiento';
                            $detallesPeriodo[$keyDetallePeriodo]['solicitud'] = $model->id;
                            $detallesPeriodo[$keyDetallePeriodo]['disposicion'] = $amortizacion->id_disposicion;
                            $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion'] = ($keyP == 0 ? "S_" . $model->clave : "D_" . $amortizacion->id_disposicion0->clave);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion'] = ($keyP == 0 ? $model->fecha_ultimo_vencimiento : $amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                            $detallesPeriodo[$keyDetallePeriodo]['plazo'] = ($keyP == 0 ? $model->plazo_autorizado : $amortizacion->id_disposicion0->plazo);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha'] = $amortizacion->fecha_amortizacion;
                            $detallesPeriodo[$keyDetallePeriodo]['concepto'] = "Vencimiento {$amortizacion->numero_amortizacion}";
                            $detallesPeriodo[$keyDetallePeriodo]['cargo'] += $amortizacion->pago_capital + $amortizacion->pago_seguro+$amortizacion->iva_capital;
                            $detallesPeriodo[$keyDetallePeriodo]['abono'] += 0;
                            $detallesPeriodo[$keyDetallePeriodo]['capital'] += $amortizacion->pago_capital;
                            $detallesPeriodo[$keyDetallePeriodo]['interes'] += 0;
                            $detallesPeriodo[$keyDetallePeriodo]['mora'] += 0;
                            $detallesPeriodo[$keyDetallePeriodo]['seguro'] += $amortizacion->pago_seguro;
                            $detallesPeriodo[$keyDetallePeriodo]['iva'] += 0;
                        }else{
                            //Se agregan vencimientos anteriores con lo restante
                            if($amortizacion->status=="Calculado" || $amortizacion->fecha_pago>$fecha1){
                                $detallesPeriodo[$keyDetallePeriodo]['operacion'] = 'vencimiento';
                                $detallesPeriodo[$keyDetallePeriodo]['solicitud'] = $model->id;
                                $detallesPeriodo[$keyDetallePeriodo]['disposicion'] = $amortizacion->id_disposicion;
                                $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion'] = ($keyP == 0 ? "S_" . $model->clave : "D_" . $amortizacion->id_disposicion0->clave);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion'] = ($keyP == 0 ? $model->fecha_ultimo_vencimiento : $amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                                $detallesPeriodo[$keyDetallePeriodo]['plazo'] = ($keyP == 0 ? $model->plazo_autorizado : $amortizacion->id_disposicion0->plazo);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha'] = $amortizacion->fecha_amortizacion;
                                $detallesPeriodo[$keyDetallePeriodo]['concepto'] = "Vencimiento {$amortizacion->numero_amortizacion}";
                                $detallesPeriodo[$keyDetallePeriodo]['cargo'] += $amortizacion->pago_capital + $amortizacion->pago_seguro+$amortizacion->iva_capital;
                                $detallesPeriodo[$keyDetallePeriodo]['abono'] += 0;
                                $detallesPeriodo[$keyDetallePeriodo]['capital'] += $amortizacion->pago_capital;
                                $detallesPeriodo[$keyDetallePeriodo]['interes'] += 0;
                                $detallesPeriodo[$keyDetallePeriodo]['mora'] += 0;
                                $detallesPeriodo[$keyDetallePeriodo]['seguro'] += $amortizacion->pago_seguro;
                                $detallesPeriodo[$keyDetallePeriodo]['iva'] += 0;
                                //Se resta lo pagado
                                $parcialidadesAnteriores = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion='" . $amortizacion->id . "'");
                                foreach ($parcialidadesAnteriores as $parcialidad) {
                                    if ($parcialidad->fecha_pago < $fecha1) {
                                        $detallesPeriodo[$keyDetallePeriodo]['capital'] -= $parcialidad->pago_capital;
                                        $detallesPeriodo[$keyDetallePeriodo]['cargo'] -= $parcialidad->pago_capital;
                                    }
                                }
                            }
                        }
                    }

                    //Interes
                    $interesAcumulado = 0;
                    if ($provisiones) {
                        if (strtotime($fecha2) > strtotime($fechaUltimaProvision)) {
                            $provisionesAmortizacion = ProvisionesAmortizaciones::model()->findAll('id_amortizacion="' . $amortizacion->id . '" AND fecha <="' . $fecha2 . '"');
                            $fechaUltimaProvision = date("Y-m-d", strtotime($amortizaciones[$key - $i]["fecha_amortizacion"]));
                            foreach ($provisionesAmortizacion as $provisionAmortizacion) {
                                $fechaUltimaProvision = $provisionAmortizacion->fecha;
                            }
                            $diferenciaDiasProvision = round((strtotime($fecha2) - strtotime($fechaUltimaProvision)) / 60 / 60 / 24);
                            $parcialidadesPosteriores = ParcialidadesAmortizaciones::model()->findAll('id_amortizacion="' . $amortizacion->id . '" AND fecha_pago >"' . $fechaUltimaProvision . '"');
                            $parcialidadesAnteriores = ParcialidadesAmortizaciones::model()->findAll('id_amortizacion="' . $amortizacion->id . '" AND fecha_pago <= "' . $fechaUltimaProvision . '"');
                            $DisposicionesPosteriores = Disposiciones::model()->findAll('id_solicitud="' . $amortizacion->id_solicitud . '" AND fecha >"' . $fechaUltimaProvision . '"');
                            $saldoProvisiones = $amortizacion->saldo_capital;
                            foreach ($DisposicionesPosteriores as $disp) {
                                $saldoProvisiones -= $disp->importe;
                            }
                            foreach ($parcialidadesAnteriores as $parc) {
                                $saldoProvisiones -= $parc->pago_capital;
                            }
                            $interesAcumulado = 0;
                            $fechaCalculo = $fechaUltimaProvision;
                            $fechaPagoAnterior = date("Y-m-d", strtotime($amortizaciones[$key - $i]["fecha_amortizacion"] . " +1 DAYS"));
                            for ($dia = 1; $dia <= $diferenciaDiasProvision; $dia++) {
                                $fechaCalculo = date('Y-m-d', strtotime($fechaCalculo . "+1 DAY"));
                                $parcialCapital = 0;
                                $veces_año = $solicitud->id_producto0->calculo_base;
                                $tasa_interes = $solicitud->sobretasa + (TasasReferencia::model()->find("serie='" . $solicitud->serie_tasa_referencia . "'")->valor / 100);
                                if ($solicitud->id_producto0->calculo_tasa_variable == "Inicio del periodo") {
                                    $tasa_interes = $solicitud->sobretasa + ($amortizacion->getValorTasaReferencia($solicitud->nombre_tasa_referencia, $fechaPagoAnterior, $solicitud->id_producto0->calculo_tasa_variable) / 100);
                                }
                                $interesAcumulado += ($saldoProvisiones * $tasa_interes * 1 / $veces_año);
                                foreach ($parcialidadesPosteriores as $parc) {
                                    if (strtotime($fechaCalculo) == strtotime($parc->fecha_pago)) {
                                        $parcialCapital += $parc->pago_capital;
                                        $fechaPagoAnterior = $parc->fecha_pago;
                                    } elseif (strtotime($fechaCalculo) > strtotime($parc->fecha_pago)) {
                                        $fechaPagoAnterior = $parc->fecha_pago;
                                    }
                                }
                                foreach ($DisposicionesPosteriores as $disp) {
                                    if (strtotime($fechaCalculo) == strtotime($disp->fecha)) {
                                        $saldoProvisiones += $disp->importe;
                                    }
                                }
                                $saldoProvisiones -= $parcialCapital;
                            }
                        }
                    }
                    //Solo se agregan al saldo de linea|saldo pagar las amortizaciones no pagadas
                    if (!isset($fecha_pago) || $fecha_pago == 0 || strtotime($fecha_pago) > strtotime($fecha2)) {
                        if ($provisiones) {
                            $provisionesAmortizacion = ProvisionesAmortizaciones::model()->findAll('id_amortizacion="' . $amortizacion->id . '" AND fecha <="' . $fecha2 . '"');
                            $interes_provisionado = 0;
                            foreach ($provisionesAmortizacion as $provisionAmortizacion) {
                                $interes_provisionado += $provisionAmortizacion->interes_provisionado;
                                $fechaUltimaProvision = $provisionAmortizacion->fecha;
                            }
                            $saldoLinea['interes'] += ($interes_provisionado + $interesAcumulado);
                            $saldoLinea['iva_interes'] += ($interes_provisionado + $interesAcumulado) * $solicitud->porcentaje_impuesto;
                            $saldoPagar['interes'] += ($interes_provisionado + $interesAcumulado);
                            $saldoPagar['iva_interes'] += ($interes_provisionado + $interesAcumulado) * $solicitud->porcentaje_impuesto;
                        } else {
                            $saldoLinea['interes'] += $amortizacion->pago_interes - $amortizacion->iva_interes_generado;
                            $saldoLinea['iva_interes'] += $amortizacion->iva_interes_generado;
                            $saldoPagar['interes'] += $amortizacion->pago_interes - $amortizacion->iva_interes_generado;
                            $saldoPagar['iva_interes'] += $amortizacion->iva_interes_generado;
                            $saldoLinea['renta'] += $amortizacion->pago_interes+$amortizacion->pago_capital-$amortizacion->iva_interes_generado;
                            $saldoLinea['iva_renta'] += $amortizacion->iva_interes_generado+$amortizacion->iva_capital;
                        }
                    }
                    //Si se paga antes de la fecha1 es parte del saldo anterior
                    if ((isset($fecha_pago) && $fecha_pago != 0 && strtotime($fecha_pago) < strtotime($fecha1)) && ($amortizacion->fecha_amortizacion<$fecha1)) {
                        //Se suma cero al saldo anterior cuando ya esta pagado
                        $resumenPeriodo['interes']['saldo_anterior'] += 0;
                        $resumenPeriodo['iva_interes']['saldo_anterior'] += 0;
                    } else {
                        //Si se vence o se paga despues de la fecha1 es parte del periodo ya que ya se sabe que es menor a la fecha2
                        //Se suman los importes vencidos al cargo
						$iva_comisiones=0;
                        if ($amortizacion->fecha_amortizacion >= $fecha1) {
                            if ($provisiones) {
                                $provisionesAmortizacion = ProvisionesAmortizaciones::model()->findAll('id_amortizacion="' . $amortizacion->id . '" AND fecha <="' . $fecha2 . '"');
                                $interes_provisionado = 0;
                                foreach ($provisionesAmortizacion as $provisionAmortizacion) {
                                    $interes_provisionado += $provisionAmortizacion->interes_provisionado;
                                }
                                $resumenPeriodo['interes']['cargos'] += ($interes_provisionado + $interesAcumulado) - (($interes_provisionado + $interesAcumulado) * $solicitud->porcentaje_impuesto);
                                $resumenPeriodo['iva_interes']['cargos'] += ($interes_provisionado + $interesAcumulado) * $solicitud->porcentaje_impuesto;
                            } else {
                                $resumenPeriodo['interes']['cargos'] += $amortizacion->pago_interes - $amortizacion->iva_interes_generado;
                                $resumenPeriodo['iva_interes']['cargos'] += $amortizacion->iva_interes_generado;
                                $ivaComisiones=0;
                                $comisionModel=ComisionesAmortizaciones::model()->find("id_amortizacion=$amortizacion->id");
                                if(!is_null($comisionModel)){
                                    $ivaComisiones=$amortizacion->pago_comisiones-($parcialidad->pago_comisiones/(1+$comisionModel->id_impuesto0->porcentaje));
                                }
                                $resumenPeriodo['comision']['cargos'] += $amortizacion->pago_comisiones - $ivaComisiones;
                                $resumenPeriodo['iva_comision']['cargos'] += $ivaComisiones;
                                if($solicitud->id_producto0->id_tipo_producto==8){
                                    $resumenPeriodo['interes']['cargos'] += $amortizacion->pago_capital;
                                    $resumenPeriodo['iva_interes']['cargos'] += $amortizacion->iva_capital;
                                }
                            }
                            $parcialidadesInteres = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion='" . $amortizacion->id . "'");

                            foreach ($parcialidadesInteres as $parcialidad) {
                                if ($parcialidad->fecha_pago < $fecha1) {
                                    $ivaInteresP=$parcialidad->pago_interes-($parcialidad->pago_interes/(1+$solicitud->id_impuesto0->porcentaje));
                                    $resumenPeriodo['interes']['cargos'] -= $parcialidad->pago_interes-($ivaInteresP);
                                    $resumenPeriodo['iva_interes']['cargos'] -= $ivaInteresP;
                                }
                            }
                            $detallesPeriodo[$keyDetallePeriodo]['operacion'] = 'vencimiento';
                            $detallesPeriodo[$keyDetallePeriodo]['solicitud'] = $model->id;
                            $detallesPeriodo[$keyDetallePeriodo]['disposicion'] = $amortizacion->id_disposicion;
                            $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion'] = ($keyP == 0 ? "S_" . $model->clave : "D_" . $amortizacion->id_disposicion0->clave);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion'] = ($keyP == 0 ? $model->fecha_ultimo_vencimiento : $amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                            $detallesPeriodo[$keyDetallePeriodo]['plazo'] = ($keyP == 0 ? $model->plazo_autorizado : $amortizacion->id_disposicion0->plazo);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha'] = $amortizacion->fecha_amortizacion;
                            $detallesPeriodo[$keyDetallePeriodo]['concepto'] = "Vencimiento {$amortizacion->numero_amortizacion}";
                            if ($provisiones) {
                                $detallesPeriodo[$keyDetallePeriodo]['cargo'] += $interes_provisionado + $interesAcumulado;//Ya incluye el IVA
                            } else {
                                $detallesPeriodo[$keyDetallePeriodo]['cargo'] += $amortizacion->pago_interes;//Ya incluye el IVA
                                $detallesPeriodo[$keyDetallePeriodo]['cargo'] += $amortizacion->pago_comisiones;
                            }
                            $detallesPeriodo[$keyDetallePeriodo]['abono'] += 0;
                            $detallesPeriodo[$keyDetallePeriodo]['capital'] += 0;
                            if ($provisiones) {
                                $detallesPeriodo[$keyDetallePeriodo]['interes'] += ($interes_provisionado + $interesAcumulado) - (($interes_provisionado + $interesAcumulado) * $solicitud->porcentaje_impuesto);
                            } else {
                                $detallesPeriodo[$keyDetallePeriodo]['interes'] +=$amortizacion->interes_generado;
                            }

							foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
								$iva_comisiones += $comision["iva"];
							}
                            $detallesPeriodo[$keyDetallePeriodo]['comision']+=$amortizacion->pago_comisiones-$iva_comisiones;
							$detallesPeriodo[$keyDetallePeriodo]['comision_iva']+=$iva_comisiones;
							if($detallesPeriodo[$keyDetallePeriodo]['comision']<=0){
                                $detallesPeriodo[$keyDetallePeriodo]['comision']=0;
                            }
                            if($detallesPeriodo[$keyDetallePeriodo]['comision_iva']<=0){
                                $detallesPeriodo[$keyDetallePeriodo]['comision_iva']=0;
                            }
							//$detallesPeriodo[$keyDetallePeriodo]['mora'] += $amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
                            //$detallesPeriodo[$keyDetallePeriodo]['iva'] += $amortizacion->iva_interes_generado+$iva_comisiones;
							//validar
							$productoZ=Productos::model()->findByPk($model->id_producto);
                			if($productoZ->id_tipo_producto!=8){
                                $detallesPeriodo[$keyDetallePeriodo]['iva'] += $amortizacion->iva_interes_generado;
                            $detallesPeriodo[$keyDetallePeriodo]['iva'] += $amortizacion->pago_comisiones - ($amortizacion->pago_comisiones / (1 + $solicitud->id_impuesto_moratorios0->porcentaje));
							}elseif($productoZ->id_tipo_producto==8){
                                $detallesPeriodo[$keyDetallePeriodo]['iva'] += $amortizacion->iva_interes_generado;
								$detallesPeriodo[$keyDetallePeriodo]['iva'] += $amortizacion->iva_capital;
							}
						} else {
                            $resumenPeriodo['interes']['saldo_anterior'] += $amortizacion->pago_interes - $amortizacion->iva_interes_generado;
                            $resumenPeriodo['iva_interes']['saldo_anterior'] += $amortizacion->iva_interes_generado;
                            $ivaComisiones=0;
                            $comisionModel=ComisionesAmortizaciones::model()->find("id_amortizacion=$amortizacion->id");
                            if(!is_null($comisionModel)){
                                $ivaComisiones=$amortizacion->pago_comisiones-($amortizacion->pago_comisiones/(1+$comisionModel->id_impuesto0->porcentaje));
                            }
                            $resumenPeriodo['comision']['saldo_anterior'] += $amortizacion->pago_comisiones - $ivaComisiones;
                            $resumenPeriodo['iva_comision']['saldo_anterior'] +=$ivaComisiones;
                            //Se agregan vencimientos anteriores con lo restante
                            if($amortizacion->status=="Calculado" || $amortizacion->fecha_pago>$fecha2){
                                $detallesPeriodo[$keyDetallePeriodo]['operacion'] = 'vencimiento';
                                $detallesPeriodo[$keyDetallePeriodo]['solicitud'] = $model->id;
                                $detallesPeriodo[$keyDetallePeriodo]['disposicion'] = $amortizacion->id_disposicion;
                                $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion'] = ($keyP == 0 ? "S_" . $model->clave : "D_" . $amortizacion->id_disposicion0->clave);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion'] = ($keyP == 0 ? $model->fecha_ultimo_vencimiento : $amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                                $detallesPeriodo[$keyDetallePeriodo]['plazo'] = ($keyP == 0 ? $model->plazo_autorizado : $amortizacion->id_disposicion0->plazo);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha'] = $amortizacion->fecha_amortizacion;
                                $detallesPeriodo[$keyDetallePeriodo]['concepto'] = "Vencimiento {$amortizacion->numero_amortizacion}";
                                if ($provisiones) {
                                    $detallesPeriodo[$keyDetallePeriodo]['cargo'] += $interes_provisionado + $interesAcumulado;//Ya incluye el IVA
                                } else {
                                    $detallesPeriodo[$keyDetallePeriodo]['cargo'] += $amortizacion->pago_interes;//Ya incluye el IVA
                                    $detallesPeriodo[$keyDetallePeriodo]['cargo'] += $amortizacion->pago_comisiones;
                                }
                                $detallesPeriodo[$keyDetallePeriodo]['abono'] += 0;
                                $detallesPeriodo[$keyDetallePeriodo]['capital'] += 0;
                                if ($provisiones) {
                                    $detallesPeriodo[$keyDetallePeriodo]['interes'] += ($interes_provisionado + $interesAcumulado) - (($interes_provisionado + $interesAcumulado) * $solicitud->porcentaje_impuesto);
                                } else {
                                    $detallesPeriodo[$keyDetallePeriodo]['interes'] +=$amortizacion->interes_generado;
                                }

                                foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
                                    $iva_comisiones += $comision["iva"];
                                }
                                $detallesPeriodo[$keyDetallePeriodo]['comision']+=($amortizacion->pago_comisiones-$iva_comisiones);
                                $detallesPeriodo[$keyDetallePeriodo]['comision_iva']+=$iva_comisiones;
                                if($detallesPeriodo[$keyDetallePeriodo]['comision']<=0){
                                    $detallesPeriodo[$keyDetallePeriodo]['comision']=0;
                                }
                                if($detallesPeriodo[$keyDetallePeriodo]['comision_iva']<=0){
                                    $detallesPeriodo[$keyDetallePeriodo]['comision_iva']=0;
                                }
                                //validar
                                $productoZ=Productos::model()->findByPk($model->id_producto);
                                if($productoZ->id_tipo_producto!=8){
                                    $detallesPeriodo[$keyDetallePeriodo]['iva'] += $amortizacion->iva_interes_generado;
                                    $ivaComisiones=0;
                                    $comisionModel=ComisionesAmortizaciones::model()->find("id_amortizacion=$amortizacion->id");
                                    if(!is_null($comisionModel)){
                                        $ivaComisiones=$amortizacion->pago_comisiones-($amortizacion->pago_comisiones/(1+$comisionModel->id_impuesto0->porcentaje));
                                    }
                                    $detallesPeriodo[$keyDetallePeriodo]['iva'] += $ivaComisiones;
                                }elseif($productoZ->id_tipo_producto==8){
                                    $detallesPeriodo[$keyDetallePeriodo]['iva'] += $amortizacion->iva_interes_generado;
                                    $detallesPeriodo[$keyDetallePeriodo]['iva'] += $amortizacion->iva_capital;
                                }
                                //Se resta lo pagado
                                $parcialidadesAnteriores = ParcialidadesAmortizaciones::model()->findAll("id_amortizacion='" . $amortizacion->id . "'");
                                foreach ($parcialidadesAnteriores as $parcialidad) {
                                    if ($parcialidad->fecha_pago < $fecha1) {
                                        $ivaInteresP=$parcialidad->pago_interes-($parcialidad->pago_interes/(1+$solicitud->id_impuesto0->porcentaje));
                                        $detallesPeriodo[$keyDetallePeriodo]['interes'] -= $parcialidad->pago_interes-($ivaInteresP);
                                        $detallesPeriodo[$keyDetallePeriodo]['iva'] -= $ivaInteresP;
                                        $detallesPeriodo[$keyDetallePeriodo]['cargo'] -= $parcialidad->pago_interes;
                                        $comisionModel=ComisionesAmortizaciones::model()->find("id_amortizacion=$amortizacion->id");
                                        if(!is_null($comisionModel)){
                                            $ivaComisionesP=$parcialidad->pago_comisiones-($parcialidad->pago_comisiones/(1+$comisionModel->id_impuesto0->porcentaje));
                                        }else{
                                            $ivaComisionesP=0;
                                        }
                                        $detallesPeriodo[$keyDetallePeriodo]['comision']-=$parcialidad->pago_comisiones-$ivaComisionesP;
                                        $detallesPeriodo[$keyDetallePeriodo]['iva'] -= $ivaComisionesP;
                                        $detallesPeriodo[$keyDetallePeriodo]['comision_iva'] -= $ivaComisionesP;
                                        $detallesPeriodo[$keyDetallePeriodo]['cargo'] -= $parcialidad->pago_comisiones;
                                    }
                                }
                            }
                        }

                    }
                    //Comisiones
                    //Solo se agregan al saldo de linea|saldo pagar las amortizaciones no pagadas
                    if (!isset($fecha_pago) || $fecha_pago == 0 || strtotime($fecha_pago) > strtotime($fecha2)) {
                        foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
                            $saldoLinea['comisiones'] += $comision["monto"];
                            $saldoLinea['iva_comisiones'] += $comision["iva"];
                            $saldoPagar['comisiones'] += $comision["monto"];
                            $saldoPagar['iva_comisiones'] += $comision["iva"];
                        }
                    }

                    //Moratorios
                    $dataMora=$amortizacion->getMontosMora($fecha2,$fecha1);
                    $pagoMora=$dataMora["mora"];
                    $ivaMora=$dataMora["iva"];
                    $saldoMora=$dataMora["saldo_periodo"];
                    $saldoIvaMora=$dataMora["saldo_periodo_iva"];
                    $saldoAnteriorMora=$dataMora["saldo_anterior"];
                    $saldoAnteriorIvaMora=$dataMora["saldo_anterior_iva"];
                    //Solo se agregan al saldo de linea|saldo pagar las amortizaciones no pagadas
                    if (!isset($fecha_pago) || $fecha_pago == 0 || strtotime($fecha_pago) > strtotime($fecha2)) {
						$saldoLinea['mora'] += $pagoMora;
                        $saldoLinea['iva_mora'] += $ivaMora;
                        $saldoPagar['mora'] += $pagoMora;
                        $saldoPagar['iva_mora'] += $ivaMora;
                    }
                    //Si se paga antes de la fecha1 es parte del saldo anterior
                    if ((isset($fecha_pago) && $fecha_pago != 0 && strtotime($fecha_pago) < strtotime($fecha1)) && ($amortizacion->fecha_amortizacion<$fecha1)) {
                        //Se suma cero al saldo anterior cuando ya esta pagado
                        //$resumenPeriodo['mora']['saldo_anterior'] += $saldoAnteriorMora;
                        //$resumenPeriodo['iva_mora']['saldo_anterior'] += $saldoAnteriorIvaMora;
                        $resumenPeriodo['mora']['saldo_anterior'] += 0;
                        $resumenPeriodo['iva_mora']['saldo_anterior'] += 0;
                    } else {
                        if($pagoMora>0 && ($amortizacion->fecha_amortizacion>=$fecha1 || ($amortizacion->status=="Calculado" || $amortizacion->fecha_pago>$fecha1))){
                            //montos en el periodo del estado de cuenta
                            $resumenPeriodo['mora']['cargos'] += $saldoMora;
                            $resumenPeriodo['iva_mora']['cargos'] += $saldoIvaMora;
                            $detallesPeriodo[$keyDetallePeriodo]['operacion'] = 'vencimiento';
                            $detallesPeriodo[$keyDetallePeriodo]['solicitud'] = $model->id;
                            $detallesPeriodo[$keyDetallePeriodo]['disposicion'] = $amortizacion->id_disposicion;
                            $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion'] = ($keyP == 0 ? "S_" . $model->clave : "D_" . $amortizacion->id_disposicion0->clave);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento'] = ($keyP == 0 ? $model->fecha_disposicion : $amortizacion->id_disposicion0->fecha);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion'] = ($keyP == 0 ? $model->fecha_ultimo_vencimiento : $amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                            $detallesPeriodo[$keyDetallePeriodo]['plazo'] = ($keyP == 0 ? $model->plazo_autorizado : $amortizacion->id_disposicion0->plazo);
                            $detallesPeriodo[$keyDetallePeriodo]['fecha'] = $amortizacion->fecha_amortizacion;
                            $detallesPeriodo[$keyDetallePeriodo]['concepto'] = "Vencimiento {$amortizacion->numero_amortizacion}";
                            $detallesPeriodo[$keyDetallePeriodo]['cargo'] += $saldoMora+$saldoIvaMora+$saldoAnteriorMora+$saldoAnteriorIvaMora;
                            $detallesPeriodo[$keyDetallePeriodo]['abono'] += 0;
                            $detallesPeriodo[$keyDetallePeriodo]['capital'] += 0;
                            $detallesPeriodo[$keyDetallePeriodo]['interes'] += 0;
                            $detallesPeriodo[$keyDetallePeriodo]['mora'] += $saldoMora;
                            $detallesPeriodo[$keyDetallePeriodo]['iva'] += $saldoIvaMora;
                            //se agrega lo de periodos anteriores al vencimiento por petición de AMN
                            $detallesPeriodo[$keyDetallePeriodo]['mora'] += $saldoAnteriorMora;
                            $detallesPeriodo[$keyDetallePeriodo]['iva'] += $saldoAnteriorIvaMora;
                            //montos anteriores al periodo
                            $resumenPeriodo['mora']['saldo_anterior'] += $saldoAnteriorMora;
                            $resumenPeriodo['iva_mora']['saldo_anterior'] += $saldoAnteriorIvaMora;
							//echo"<pre>"; var_dump($saldoAnteriorIvaMora);
							//echo"<pre>"; var_dump($saldoIvaMora);
							//echo"<pre>"; var_dump($amortizacion->fecha_amortizacion);
                        }
                    }
                    $parcialidadesPagadas = ParcialidadesAmortizaciones::model()->findAll(array("condition" => " status!='Condonado' AND id_amortizacion=:amortizacion AND CAST(fecha_pago AS DATE)<=:fecha", "order" => "fecha_pago ASC", "params" => array(':amortizacion' => $amortizacion->id, ':fecha' => $fecha2)));
                }else{
                    $idsDisp1[]=$amortizacion->id;
                    //Si no se agrega la amortización revisar si la fecha anterior estaba en el periodo para calcular los días de interes de la fecha de vencimiento anterior a la fecha de corte del periodo
                    //Se usa CAST en la fecha de pago para eliminar la hora de la fecha
                    $parcialidades=ParcialidadesAmortizaciones::model()->findAll(array("condition"=>"id_amortizacion=:amortizacion AND CAST(fecha_pago AS DATE)<=:fecha","order"=>"fecha_pago ASC","params"=>array(':amortizacion'=>$amortizacion->id,':fecha'=>$fecha2)));

                    //Interes
                    if(
						isset($amortizaciones[$keyA - 1])
						&& strtotime(date("Y-m-d", strtotime($amortizaciones[$keyA - 1]->fecha_amortizacion))) < strtotime(date("Y-m-d", strtotime($fecha2)))
					){
                        if (
							Controller::normalizarTexto($cobroInteres) == "ajustable"
							|| Controller::normalizarTexto($cobroInteres) == "variable"
						) {
                            $limiteDias=false;
                            if(
								in_array(
									$model->id_tipo_amortizacion0->nombre,
									array(
										'Mensual',
										'Trimestral',
										'Semestral',
										'Anual',
										'Fin de Mes',
										'Pago Único (Bullet) con Interes Mensual',
										'Pago Único (Bullet) con Interes Capitalizable a Fin de Mes en días',
										'15 y Fin de Mes',
										'Pago Único (Bullet) con Interes Semestral',
										'Quincenal Personalizado'
									)
								)
							){
                                $limiteDias=true;
                            }

                            $diasAño=$model->id_producto0->calculo_base;
                            $veces_anual=$amortizacion->getVeces_anual($model);
                            if(isset($amortización->id_grupo_solidario) && $amortización->id_grupo_solidario!=0){
                                $tasa_interes=$model->sobretasa+($amortizacion->getValorTasaReferencia($model->nombre_tasa_referencia)/100);
                            }elseif(isset($amortización->id_disposicion) && $amortización->id_disposicion!=0){
                                $tasa_interes=$amortizacion->id_disposicion0->tasa;
                            }else{
                                $tasa_interes=$model->sobretasa+($amortizacion->getValorTasaReferencia($model->nombre_tasa_referencia)/100);
                            }
                            $fechaP0=$amortizaciones[$keyA-1]->fecha_amortizacion;
                            $saldoCapital0=$amortizaciones[$keyA-1]->saldo_final;


                            $interes0=0;
                            $diasMaximo=round($diasAño/$veces_anual);
                            $diasCalculados=0;
                            $fecha_vencimiento=$amortizacion->fecha_amortizacion;
                            if (
								Controller::normalizarTexto($cobroInteres) == "ajustable"
								|| Controller::normalizarTexto($cobroInteres) == "variable"
							) {
                                $fecha_vencimiento=$fecha2;
                            }

                            $disposiciones=Disposiciones::model()->findAll("id_solicitud='".$amortizacion->id_solicitud."'");
                            $interes_disposicion=0;
                            $interes_disposiciones=0;
                            if($solicitud->id_producto0->tabla_disposiciones=="unica"){
                                foreach($disposiciones as $disposicion){
                                    if((strtotime($disposicion->fecha)<=strtotime($fecha2))
                                        && (strtotime($disposicion->fecha)<strtotime($amortizacion->fecha_amortizacion)) && strtotime($disposicion->fecha)>=strtotime($amortizaciones[$keyA-1]->fecha_amortizacion)){
                                        $capital_disposicion=$disposicion->importe;
                                        $fecha_disposicion=$disposicion->fecha;
                                        $interes_disposicion=$disposicion->importe*$tasa_interes*round((strtotime($fecha2)-strtotime($disposicion->fecha))/60/60/24,0)/$diasAño;
                                        $interes_disposicion=round($interes_disposicion,$decimales);
                                        $interes_disposiciones+=$interes_disposicion;
                                    }
                                }
                            }

                            foreach($parcialidades as $parcialidad){
                                $idsParcialidad[]=$parcialidad->id;
                                $fechaPagoParcial=date("Y-m-d",strtotime($parcialidad->fecha_pago));

                                if($parcialidad->pago_capital>0){
                                    if(strtotime($fechaPagoParcial)<strtotime($fecha_vencimiento)){
                                        if(strtotime($fechaPagoParcial)>strtotime($fechaP0)){
                                            //$interes0-=$parcialidad->pago_interes;
                                            $diferenciaDias=round((strtotime($fechaPagoParcial)-strtotime($fechaP0))/60/60/24,0);
                                            if($diasCalculados+$diferenciaDias>$diasMaximo && $limiteDias==true){
                                                $diferenciaDias=$diasMaximo-$diasCalculados;
                                            }
                                            $diasCalculados+=$diferenciaDias;
                                            $interes0+=round((1+$model->porcentaje_impuesto)*$saldoCapital0*$tasa_interes*$diferenciaDias/$diasAño,$decimales);
                                            $fechaP0=$parcialidad->fecha_pago;

                                            $saldoCapital0-=$parcialidad->pago_capital;
                                        }
                                    }
                                }
                            }
                            if(strtotime($fecha_vencimiento)>strtotime($fechaP0)){
                                $diferenciaDias=round((strtotime($fecha_vencimiento)-strtotime($fechaP0))/60/60/24,0);
                                if($diasCalculados+$diferenciaDias>$diasMaximo && $limiteDias==true){
									$diferenciaDias=$diasMaximo-$diasCalculados;
                                }
                                $interes0+=round((1+$model->porcentaje_impuesto)*$saldoCapital0*$tasa_interes*($diferenciaDias)/$diasAño,$decimales);
                            }
                            $interes_generado=$interes0/(1+$model->porcentaje_impuesto);
                            $interes_generado=round($interes_generado,$decimales);
                            $interes_generado=$interes_generado;
                            $iva_interes_generado=$interes_generado*$model->porcentaje_impuesto;
                        }
                    }
                    $fecha1Ante = $fechaSinCambiar;
                    $between = false;
                    if (strtotime($amortizaciones[$keyA-1]->fecha_amortizacion)>=strtotime($fecha1Ante) && strtotime($amortizaciones[$keyA-1]->fecha_amortizacion)<=strtotime($fecha2)) {
                        $between = true;
                    }
                    if ($between==false) {
                        $fechaMenos = date("Y-m-d H:i:s",strtotime('-1 day',strtotime($fecha1Ante)));
                        $fecha1Ante= $fechaMenos;
                    }
                    $diasAmortizacion=round((strtotime($amortizacion->fecha_amortizacion)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);
                    $diasFecha2=round((strtotime($fecha2)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);
                    $diasFecha1=round((strtotime($fecha1)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);

                    if ($between==false) {
                        $diasFecha1=round((strtotime($fecha1Ante)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);
                    }

                    if($diasFecha1<=0){
                        $diasFecha1=0;
                    }
                    if($cobroInteres=="variable"){
                        //Cuando el cobro de interes es variable ya se calcula a los dias reales transcurridos hasta la fecha2
                        $interes_periodo=$interes_generado*(($diasFecha2-$diasFecha1)/$diasFecha2);
                        $iva_interes_periodo=$iva_interes_generado*(($diasFecha2-$diasFecha1)/$diasFecha2);
                        $interes_periodo_anterior=$interes_generado*(($diasFecha1)/$diasFecha2);
                        $iva_interes_periodo_anterior=$iva_interes_generado*(($diasFecha1)/$diasFecha2);
                    }else{
                        $interes_periodo=$interes_generado;
                        $iva_interes_periodo=$iva_interes_generado;
                    }

                    //Mora
                    $mora_generado=0;//La amortización no esta vencida por lo que es cero
                    $iva_mora_generado=0;
                    $mora_periodo=0;
                    $iva_mora_periodo=0;
                    $mora_periodo_anterior=0;
                    $iva_mora_periodo_anterior=0;

                    //Comisiones
                    $importeComisiones=0;
                    $importeComisionesIVA=0;
                    foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
                        $importeComisiones+=$comision["monto"];
                        $importeComisionesIVA+=$comision["iva"];
                    }
                    $comisiones_periodo=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo
                    $iva_comisiones_periodo=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo
                    $comisiones_periodo_anterior=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo
                    $iva_comisiones_periodo_anterior=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo


                    //Se calcula lo pagado en parcialidades
                    $interesPagado=0;
                    $ivaInteresPagado=0;
                    $moraPagado=0;
                    $ivaMoraPagado=0;
                    $comisionesPagado=0;
                    $ivaComisionesPagado=0;

                    $interesPagadoAnterior=0;
                    $ivaInteresPagadoAnterior=0;
                    $moraPagadoAnterior=0;
                    $ivaMoraPagadoAnterior=0;
                    $comisionesPagadoAnterior=0;
                    $ivaComisionesPagadoAnterior=0;


                    foreach ($parcialidades as $parcialidad) {
                        if(strtotime($parcialidad->fecha_pago)>strtotime($fecha1)){
                            //Si la fecha de pago es mayor a la fecha1 la parcialidad es del periodo
                            $interesPagado+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
                            $ivaInteresPagado+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
                            if($amortizacion->pago_moratorios>0){
                                $moraPagado+=$amortizacion->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
                                $ivaMoraPagado+=$amortizacion->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
                            }
                            if($parcialidad->pago_comisiones>0){
                                $comisionesPagado+=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
                                $ivaComisionesPagado+=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
                            }
                        }else{
                            //Si la fecha de pago es menor a la fecha1 la parcialidad es anterior al periodo
                            $interesPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
                            $ivaInteresPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
                            if($amortizacion->pago_moratorios>0){
                                $moraPagadoAnterior+=$amortizacion->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
                                $ivaMoraPagadoAnterior+=$amortizacion->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
                            }
                            if($parcialidad->pago_comisiones>0){
                                $comisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
                                $ivaComisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
                            }
                        }
                    }

                    if ($interesPagadoAnterior<=0) {
                        $saldo_interes_anterior = $interes_periodo_anterior;
                    }else{
                        $saldo_interes_anterior=0;
                    }
                    //INTERES
                    //Si lo pagado en parcialidades es mayor a lo generado se agrega lo pagado en parcialidades
                    if($interes_periodo+$saldo_interes_anterior<$interesPagado){
                        //Se suma el importe pagado en el periodo al saldo linea|saldo pagar
                        //Se suma cero al saldo linea|saldo pagar cuando es pagado anterior porque ya esta pagado.
                        $saldoLinea['interes']+=$interesPagado+0;
                        $saldoLinea['iva_interes']+=$ivaInteresPagado+0;
                        $saldoPagar['interes']+=$interesPagado+0;
                        $saldoPagar['iva_interes']+=$ivaInteresPagado+0;
                        //Se suman los importes pagados en el periodo al cargo
                        $resumenPeriodo['interes']['cargos']+=$interesPagado;
                        $resumenPeriodo['iva_interes']['cargos']+=$ivaInteresPagado;
                        //Se suman cero al cargo cuando es del periodo anterior
                        $resumenPeriodo['interes']['saldo_anterior']+=0;
                        $resumenPeriodo['iva_interes']['saldo_anterior']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
                        $detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
                        $detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
                        $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                        $detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
                        $detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
                        $detallesPeriodo[$keyDetallePeriodo]['cargo']+=$interesPagado+$ivaInteresPagado;
                        $detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['interes']+=$interesPagado;
                        $detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaInteresPagado;
                    }elseif($interes_periodo>0){
                        $idsParcialidad2[]=$interes_periodo_anterior;
                        //Si lo pagado en parcialidades es menor al devengado se toma lo devengado
                        //Se suma el importe devengado en el periodo al saldo linea|saldo pagar
                        //Se suma el importe devegado en el periodo anterior al saldo linea|saldo pagar
                        $saldoLinea['interes']+=$interes_periodo+$interes_periodo_anterior;
                        $saldoLinea['iva_interes']+=$iva_interes_periodo+$iva_interes_periodo_anterior;
                        $saldoPagar['interes']+=$interes_periodo+$interes_periodo_anterior;
                        $saldoPagar['iva_interes']+=$iva_interes_periodo+$iva_interes_periodo_anterior;

                        //Se suma el importe devengado al cargo
                        $resumenPeriodo['interes']['cargos']+=$interes_periodo;
                        $resumenPeriodo['iva_interes']['cargos']+=$iva_interes_periodo;
                        //Se suma el importe devengado del periodo anterior al saldo anterior
                        $resumenPeriodo['interes']['saldo_anterior']+=$interes_periodo_anterior;
                        $resumenPeriodo['iva_interes']['saldo_anterior']+=$iva_interes_periodo_anterior;

                        $detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
                        $detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
                        $detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
                        $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                        $detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
                        $detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
                        $detallesPeriodo[$keyDetallePeriodo]['cargo']+=$interes_periodo+$iva_interes_periodo;
                        $detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['interes']+=$interes_periodo;
                        $detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['iva']+=$iva_interes_periodo;
                    }

                    //MORA
                    //Si lo pagado en parcialidades es mayor a lo generado se agrega lo pagado en parcialidades
                    if($mora_periodo<$moraPagado){
                        //Se suma el importe pagado en el periodo al saldo linea|saldo pagar
                        //Se suma cero al saldo linea|saldo pagar cuando es pagado anterior porque ya esta pagado.
                        $saldoLinea['mora']+=$moraPagado+0;
                        $saldoLinea['iva_mora']+=$ivaMoraPagado+0;
                        $saldoPagar['mora']+=$moraPagado+0;
                        $saldoPagar['iva_mora']+=$ivaMoraPagado+0;

                        //Se suman los importes pagados en el periodo al cargo
                        $resumenPeriodo['mora']['cargos']+=$moraPagado;
                        $resumenPeriodo['iva_mora']['cargos']+=$ivaMoraPagado;
                        //Se suman cero al cargo cuando es del periodo anterior
                        $resumenPeriodo['mora']['saldo_anterior']+=0;
                        $resumenPeriodo['iva_mora']['saldo_anterior']+=0;

                        $detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
                        $detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
                        $detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
                        $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                        $detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
                        $detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
                        $detallesPeriodo[$keyDetallePeriodo]['cargo']+=$moraPagado+$ivaMoraPagado;
                        $detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['mora']+=$moraPagado;
                        $detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaMoraPagado;
                    }elseif($mora_periodo>0){
                        //Si lo pagado en parcialidades es menor al devengado se toma lo devengado
                        //Se suma el importe devengado en el periodo al saldo linea|saldo pagar
                        //Se suma el importe devegado en el periodo anterior al saldo linea|saldo pagar
                        $saldoLinea['mora']+=$mora_periodo+$mora_periodo_anterior;
                        $saldoLinea['iva_mora']+=$iva_mora_periodo+$iva_mora_periodo_anterior;
                        $saldoPagar['mora']+=$mora_periodo+$mora_periodo_anterior;
                        $saldoPagar['iva_mora']+=$iva_mora_periodo+$iva_mora_periodo_anterior;

                        //Se suma el importe devengado al cargo
                        $resumenPeriodo['mora']['cargos']+=$mora_periodo;
                        $resumenPeriodo['iva_mora']['cargos']+=$iva_mora_periodo;
                        //Se suma el importe devengado del periodo anterior al saldo anterior
                        $resumenPeriodo['mora']['cargos']+=$mora_periodo_anterior;
                        $resumenPeriodo['iva_mora']['cargos']+=$iva_mora_periodo_anterior;

                        $detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
                        $detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
                        $detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
                        $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                        $detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                        $detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
                        $detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
                        $detallesPeriodo[$keyDetallePeriodo]['cargo']+=$mora_periodo+$iva_mora_periodo;
                        $detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
                        $detallesPeriodo[$keyDetallePeriodo]['mora']+=$mora_periodo;
                        $detallesPeriodo[$keyDetallePeriodo]['iva']+=$iva_mora_periodo;
                    }

                    //COMISIONES
                    //Si lo pagado en parcialidades es mayor a lo generado se agrega lo pagado en parcialidades
                    if($comisiones_periodo<$comisionesPagado){
                        //Se suma el importe pagado en el periodo al saldo linea|saldo pagar
                        //Se suma cero al saldo linea|saldo pagar cuando es pagado anterior porque ya esta pagado.
                        //Nota: Las comisiones no se devengan por parcialidades por lo que siempre sera 0 hasta que la amortización vence
                        /*
                        $saldoLinea['comisiones']+=$comisionesPagado+0;
                        $saldoLinea['iva_comisiones']+=$ivaComisionesPagado+0;
                        $saldoPagar['comisiones']+=$comisionesPagado+0;
                        $saldoPagar['iva_comisiones']+=$ivaComisionesPagado+0;
                        */
						$detallesPeriodo[$keyDetallePeriodo]['comision']+=$amortizacion->pago_comisiones-$importeComisionesIVA;
						$detallesPeriodo[$keyDetallePeriodo]['comision_iva']+=$importeComisionesIVA;
                        $detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaComisionesPagado;
                    }elseif($comisiones_periodo>0){
                        //Si lo pagado en parcialidades es menor al devengado se toma lo devengado
                        //Se suma el importe devengado en el periodo al saldo linea|saldo pagar
                        //Se suma el importe devegado en el periodo anterior al saldo linea|saldo pagar
                        //Nota: Las comisiones no se devengan por parcialidades por lo que siempre sera 0 hasta que la amortización vence
                        /*
                        $saldoLinea['comisiones']+=$comisiones_periodo+$comisiones_periodo_anterior;
                        $saldoLinea['iva_comisiones']+=$iva_comisiones_periodo+$iva_comisiones_periodo_anterior;
                        $saldoPagar['comisiones']+=$comisiones_periodo+$comisiones_periodo_anterior;
                        $saldoPagar['iva_comisiones']+=$iva_comisiones_periodo+$iva_comisiones_periodo_anterior;
                        */
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$importeComisionesIVA;
                    }
					$interes_generado=0;
					$iva_interes_generado=0;
                }
                if(isset($detallesPeriodo[$keyDetallePeriodo])){
                    //Si se agrego la amortización se suma 1 al key
                    $keyDetallePeriodo++;
                }
            }
        }
        //PAGOS
        foreach ($amortizacionesAll as $keyP=>$amortizaciones) {
            if($keyP==0 || $solicitud->id_producto0->tabla_disposiciones!="unica"){
                foreach ($amortizaciones as $keyA => $amortizacion) {
					if ($amortizacion->status == "Quebrantado"  && count($amortizacion->rel_parcialidades) == 0) {
						continue;
					}

                    if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0){
                        $fecha_pago=date("Y-m-d",strtotime($amortizacion->fecha_pago));
                    }else{
                        $fecha_pago=0;
                    }

                    $importeComisiones=0;
                    $importeComisionesIVA=0;
                    foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
                        $importeComisiones+=$comision["monto"];
                        $importeComisionesIVA+=$comision["iva"];
                    }

                    $parcialidades=ParcialidadesAmortizaciones::model()->findAll(array("condition"=>" (status='Registrado' OR status='Reestructurado') AND id_amortizacion=:amortizacion AND CAST(fecha_pago AS DATE)<=:fecha","order"=>"fecha_pago ASC","params"=>array(':amortizacion'=>$amortizacion->id,':fecha'=>$fecha2)));



                    //Si tiene parcialidades se toma en cuenta la parcialidad
                    if(count($parcialidades)>0){
                        $capitalPagado=0;
                        $ivaCapitalPagado=0;
                        $interesPagado=0;
                        $ivaInteresPagado=0;
                        $moraPagado=0;
                        $ivaMoraPagado=0;
                        $comisionesPagado=0;
                        $ivaComisionesPagado=0;
                        $seguroPagado=0;
                        $comisionesPagadoT=0;
                        $ivaComisionesPagadoT=0;

                        $capitalPagadoAnterior=0;
                        $ivaCapitalPagadoAnterior=0;
                        $interesPagadoAnterior=0;
                        $ivaInteresPagadoAnterior=0;
                        $moraPagadoAnterior=0;
                        $ivaMoraPagadoAnterior=0;
                        $comisionesPagadoAnterior=0;
                        $ivaComisionesPagadoAnterior=0;

                        $interes_pagado_nuevo=0;
                        $pago_moratorio_nuevo=0;
                        $iva_moratorio_nuevo=0;
                        $c=0;
                        foreach ($parcialidades as $parcialidad) {
                            $c++;
                            // $parciales=Amortizaciones::model()->findAll("id=:id",array(':id'=>$parcialidad->id_amortizacion));
                            $comisionesPagado=0;
                            $parcialidadAnterior=false;

                            foreach ($parcialidad as $key=>$value) {

                                if($key=="pago_interes" && $parcialidad->status!="Condonado")
                                {
                                    $interes_pagado_nuevo+=$value;
                                }
                                if($key=="pago_moratorios" && $parcialidad->status!="Condonado")
                                {
                                    $pago_moratorio_nuevo+=$value;
                                }

                                if($key=="iva_capital" || $key=="iva_interes" && $parcialidad->status!="Condonado")
                                {
                                    $iva_moratorio_nuevo+=$value;
                                }
                            }



                            $fecha_pago_parcialidad=date("Y-m-d",strtotime($parcialidad->fecha_pago));
                            if(strtotime($fecha_pago_parcialidad)>strtotime($fecha2)){
                                //Si la fecha de pago es despues de la fecha2 no se toma en cuenta
                                continue;
                            }
                            //Si la fecha de pago es mayor o igual a la fecha1 la parcialidad es del periodo
                            if(strtotime($fecha_pago_parcialidad)>=strtotime($fecha1)){
                                $capitalPagado+=$parcialidad->pago_capital;
                                $ivaCapitalPagado+=$parcialidad->iva_capital;



                                if($amortizacion->pago_interes!=0){
                                    $interesPagado+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
                                    $ivaInteresPagado+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
                                    $ivaInteresPagadoP=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);;
                                }
                                if($amortizacion->pago_moratorios>0){
                                    $moraPagado+=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
                                    $ivaMoraPagado+=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
                                    $ivaInteresPagadoP=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
                                }
                                if($parcialidad->pago_comisiones>0){
                                    $importeComisionesT=$importeComisiones;
                                    $importeComisionesIVAT=$importeComisionesIVA;
                                    foreach($infoComisiones[$amortizacion->id] as $keyC => $comision){
                                        if($comision["descontar"]==1){
                                            $idComision=$comision["id"];
                                            if(!is_null($idComision) AND $idComision !=""){
												$parcialidadT=ParcialidadesAmortizaciones::model()->find("id_comision_descontada=$idComision");
											   if(isset($parcialidadT)){
												   $importeComisionesT-=$comision["monto"];
												   $importeComisionesIVAT-=$comision["iva"];
												   $comisionesPagadoT=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
												   $ivaComisionesPagadoT=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
											   }
										   }  
                                        }
                                    }
                                    $comisionesPagado=$parcialidad->pago_comisiones*($importeComisionesT/($importeComisionesT+$importeComisionesIVAT));
                                    $ivaComisionesPagado=$parcialidad->pago_comisiones*($importeComisionesIVAT/($importeComisionesT+$importeComisionesIVAT));
                                    $comisionesPagadoT=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
                                    $ivaComisionesPagadoT=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
                                }
                                if($parcialidad->pago_seguro>0){
                                    $seguroPagado=$parcialidad->pago_seguro;
                                }
                            }else{
                                //Si la fecha de pago es menor a la fecha1 la parcialidad es anterior al periodo
                                $capitalPagadoAnterior+=$parcialidad->pago_capital;
                                $ivaCapitalPagadoAnterior+=$parcialidad->iva_capital;
                                if($amortizacion->pago_interes!=0){
                                    $interesPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);

                                    $ivaInteresPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
                                }
                                if($amortizacion->pago_moratorios>0){
									$moraPagadoAnterior+=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);

                                    $ivaMoraPagadoAnterior+=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
                                }
                                if($parcialidad->pago_comisiones>0){
                                    $comisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
                                    $ivaComisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
                                }
                                if(strtotime($amortizacion->fecha_amortizacion)>=strtotime($fecha1)){
                                    $parcialidadAnterior=true;
                                }
                            }
                            if($solicitud->intereses_visibles==1){
                                $detallesPeriodo[$keyDetallePeriodo.$c]['operacion']='pago';
                                $detallesPeriodo[$keyDetallePeriodo.$c]['solicitud']=$model->id;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['disposicion']=$amortizacion->id_disposicion;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                                $detallesPeriodo[$keyDetallePeriodo.$c]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo.$c]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo.$c]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                                $detallesPeriodo[$keyDetallePeriodo.$c]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                                $detallesPeriodo[$keyDetallePeriodo.$c]['fecha']=$parcialidad->fecha_pago;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['concepto']="Parcialidad {$amortizacion->numero_amortizacion}";
                                $detallesPeriodo[$keyDetallePeriodo.$c]['cargo']+=0;
                                //$detallesPeriodo[$keyDetallePeriodo.$c]['abono']+=$parcialidad->pago_capital+$parcialidad->pago_interes+$comisionesPagado+$parcialidad->pago_moratorios+$ivaInteresPagadoP+$ivaMoraPagadoP;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['abono']+=$parcialidad->pago_capital+$parcialidad->pago_interes+$comisionesPagado+$parcialidad->pago_moratorios;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['capital']+=$parcialidad->pago_capital;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['interes']+=$parcialidad->pago_interes-$ivaInteresPagadoP;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['mora']+=$parcialidad->pago_moratorios-$ivaMoraPagadoP;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['mora']+=0;
                                $detallesPeriodo[$keyDetallePeriodo.$c]['iva']+=$ivaInteresPagadoP+$ivaMoraPagadoP;
                            }
                            $importeComisionesT=$importeComisiones;
                            foreach($infoComisiones[$amortizacion->id] as $keyC => $comision){
                                if($comision["descontar"]==1){
                                    $idComision=$comision["id"];
                                    if(!is_null($idComision) AND $idComision !=""){
										$parcialidadT=ParcialidadesAmortizaciones::model()->find("id_comision_descontada=$idComision");
										if(isset($parcialidadT)){
											$importeComisionesT-=$comision["monto"];
										}
									}
                                }
                            }
                            foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
                                if(isset($parcialidad->id_comision_descontada)){
                                    if($parcialidad->id_comision_descontada==$comision['id']){
                                        if($comisionesPagado>0){
                                            $comisionesPeriodo[]=array(
                                                'fecha'=>$parcialidad->fecha_pago,
                                                'concepto'=>"Parcialidad ".$comision['comision'],
                                                'monto'=>$comision['monto'],
                                                'iva'=>$comision['iva'],
                                                'moneda'=>'MXN',
                                            );
                                        }
                                    }
                                }else{
                                    $idComision=$comision["id"];
                                    if(!is_null($idComision) AND $idComision !=""){
										$parcialidadT=ParcialidadesAmortizaciones::model()->find("id_comision_descontada=$idComision");
										if($comision["descontar"]==0 || !isset($parcialidadT)){
											if($comisionesPagado>0){
												$comisionesPeriodo[]=array(
													'fecha'=>$parcialidad->fecha_pago,
													'concepto'=>"Parcialidad ".$comision['comision'],
													'monto'=>$comision['monto']*(($comisionesPagado)/($importeComisionesT)),
													'iva'=>$comision['iva']*(($comisionesPagado)/($importeComisionesT)),
													'moneda'=>'MXN',
												);
											}
										}
									}   
                                }
                            }

                            if($capitalPagado+$interesPagado+$comisionesPagado+$moraPagado+$ivaInteresPagado+$ivaMoraPagado+$seguroPagado>0.01 || $parcialidadAnterior){
                                if($solicitud->intereses_visibles!=1){
                                    $ivaInteresP=$parcialidad->pago_interes-($parcialidad->pago_interes/(1+$solicitud->id_impuesto0->porcentaje));
                                    $comisionModel=ComisionesAmortizaciones::model()->find("id_amortizacion=$amortizacion->id");
                                    if(!is_null($comisionModel)){
                                        $ivaComisionesP=$parcialidad->pago_comisiones-($parcialidad->pago_comisiones/(1+$comisionModel->id_impuesto0->porcentaje));
                                    }else{
                                        $ivaComisionesP=0;
                                    }
                                    $ivaMoraP=$parcialidad->pago_moratorios-($parcialidad->pago_moratorios/(1+$solicitud->id_impuesto_moratorios0->porcentaje));
                                    $detallesPeriodo[$keyDetallePeriodo]['operacion']='pago';
                                    $detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
                                    $detallesPeriodo[$keyDetallePeriodo]['disposicion']=($keyP==0?null:$amortizacion->id_disposicion);
                                    $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                                    $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                    $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                    $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                                    $detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                                    $detallesPeriodo[$keyDetallePeriodo]['fecha']=$parcialidad->fecha_pago;
                                    $detallesPeriodo[$keyDetallePeriodo]['concepto']="Parcialidad {$amortizacion->numero_amortizacion}";
                                    $detallesPeriodo[$keyDetallePeriodo]['cargo']+=0;
                                    /*$detallesPeriodo[$keyDetallePeriodo]['abono']+=$capitalPagado+$interesPagado+$comisionesPagado+$moraPagado+$ivaInteresPagado+$ivaMoraPagado+$ivaComisionesPagado;
                                    $detallesPeriodo[$keyDetallePeriodo]['capital']+=$capitalPagado;
                                    $detallesPeriodo[$keyDetallePeriodo]['interes']+=$interesPagado;
                                    $detallesPeriodo[$keyDetallePeriodo]['mora']+=$moraPagado;
                                    $detallesPeriodo[$keyDetallePeriodo]['mora']+=$seguroPagado;
                                    $detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaInteresPagado+$ivaMoraPagado+$ivaComisionesPagado;*/
                                    $detallesPeriodo[$keyDetallePeriodo]['abono']+=$parcialidad->pago_capital+$parcialidad->pago_interes+$parcialidad->pago_moratorios+$parcialidad->pago_comisiones;//$parcialidad->pago_otros_gastos
                                    $detallesPeriodo[$keyDetallePeriodo]['capital']+=$parcialidad->pago_capital;
                                    $detallesPeriodo[$keyDetallePeriodo]['comision']+=$parcialidad->pago_comisiones-$ivaComisionesP;
                                    $detallesPeriodo[$keyDetallePeriodo]['mora']+=$parcialidad->pago_moratorios-$ivaMoraP;
                                    $detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaInteresP+$ivaComisionesP+$ivaMoraP+$parcialidad->iva_capital;
                                }

                                $keyDetallePeriodo++;
                            }
                        }
                        //Nota: El capital pagado es de toda la historia y los demas conceptos pagados es del periodo
                        //Es un tema que surgio por FORTRADE.



                        if( $interes_pagado_nuevo!=0)
                        {
                            //$saldoLinea['interes_pagado']+=$interes_pagado_nuevo;
                            $interesP=$interes_pagado_nuevo/(1+($solicitud->id_impuesto0->porcentaje));
                            $ivaP=$interes_pagado_nuevo-$interesP;
                            $saldoLinea['interes_pagado']+=$interesP;
							$fecha_pago_cap = date('Y-m-d 00:00:00', strtotime($amortizacion->fecha_pago));//quitamos horas por cuestiones de el strtotime ya que aunque se pague
							//el mismo dia si las horas son distintas arroja un adeudo
                        }

                        if( $pago_moratorio_nuevo!=0)
                        {
                            $saldoLinea['mora_pagado']+=$pago_moratorio_nuevo;
                        }
                        else{
                            $saldoLinea['mora_pagado']+=$moraPagado;
                        }
                        if( $iva_moratorio_nuevo!=0)
                        {
                            $saldoLinea['iva_pagado']+=$iva_moratorio_nuevo;
                        }
                        else{
                            $saldoLinea['iva_pagado']+=$ivaMoraPagado;
                        }


                        $saldoLinea['capital_pagado']+=$capitalPagado+$capitalPagadoAnterior;
                        $saldoLinea['iva_interes_pagado']+=$ivaInteresPagado;
                        $saldoLinea['comisiones_pagado']+=$comisionesPagado;
                        $saldoLinea['iva_comisiones_pagado']+=$ivaComisionesPagado;
                        // $saldoLinea['mora_pagado']+=$moraPagado;
                        $saldoLinea['iva_mora_pagado']+=$ivaMoraPagado;


                        //Se resta el capital pagado del saldo de linea|saldo pagar, esto siempre esa asi ya que el capital se toma lo dispuesto
                        //y no lo vencido
                        $saldoLinea['capital']-=$capitalPagado+$capitalPagadoAnterior;
                        $saldoPagar['capital']-=$capitalPagado+$capitalPagadoAnterior;
                        //Solo se restan del saldo de linea|saldo pagar las amortizaciones no pagadas
                        if(
							!isset($fecha_pago) 
							|| $fecha_pago==0 
							|| strtotime($fecha_pago)>strtotime($fecha2)
						){
                            $saldoLinea['interes']-=$interesPagado+$interesPagadoAnterior;
                            $saldoLinea['iva_interes']-=$ivaInteresPagado+$ivaInteresPagadoAnterior;
                            $saldoLinea['renta'] -= $interesPagado+$interesPagadoAnterior;
                            $saldoLinea['iva_renta'] -= $ivaInteresPagado+$ivaInteresPagadoAnterior;
                            $saldoLinea['renta'] -= $capitalPagado+$capitalPagadoAnterior;
                            $saldoLinea['iva_renta'] -= $ivaCapitalPagado+$ivaCapitalPagadoAnterior;
                            $saldoLinea['mora']-=$moraPagado+$moraPagadoAnterior;
                            $saldoLinea['iva_mora']-=$ivaMoraPagado+$ivaMoraPagadoAnterior;

                            $saldoPagar['interes']-=$interesPagado+$interesPagadoAnterior;
                            $saldoPagar['iva_interes']-=$ivaInteresPagado+$ivaInteresPagadoAnterior;
                            $saldoPagar['mora']-=$moraPagado+$moraPagadoAnterior;
                            $saldoPagar['iva_mora']-=$ivaMoraPagado+$ivaMoraPagadoAnterior;

                            //Para el caso de las comisiones es necesario que la fecha de vencimiento se encuentre en el periodo para que no de negativos al pagar antes.
                            /*
                                 Vencimiento ------------------------------|-----|--------
                                                                           VA    PA
                                    Comision -------|----------------------|--------------
                                                    PC                     VC
                            Estado de Cuenta -------------|-----------|-------------------
                                                          I           F
                            */
                            if(strtotime($amortizacion->fecha_amortizacion)<=strtotime($fecha2)){
                                $saldoLinea['comisiones']-=$comisionesPagado+$comisionesPagadoAnterior;
                                $saldoLinea['iva_comisiones']-=$ivaComisionesPagado+$ivaComisionesPagadoAnterior;

                                $saldoPagar['comisiones']-=$comisionesPagado+$comisionesPagadoAnterior;
                                $saldoPagar['iva_comisiones']-=$ivaComisionesPagado+$ivaComisionesPagadoAnterior;
                            }
                        }
                        //Si se paga antes de la fecha1 es parte del saldo anterior
                        if(
							isset($fecha_pago) 
							&& $fecha_pago!=0 
							&& strtotime($fecha_pago)<strtotime($fecha1)
						){
                            //Se suma el importe de capital al saldo anterior
                            $resumenPeriodo['capital']['saldo_anterior']-=$capitalPagadoAnterior;
                            //Se suma cero al saldo anterior porque ya esta pagado
                            $resumenPeriodo['interes']['saldo_anterior']-=0;//$interesPagadoAnterior;
                            $resumenPeriodo['mora']['saldo_anterior']-=0;//$moraPagadoAnterior;
                            $resumenPeriodo['iva_interes']['saldo_anterior']-=0;//$ivaInteresPagadoAnterior;
                            $resumenPeriodo['iva_mora']['saldo_anterior']-=0;//$ivaMoraPagadoAnterior;
                        } elseif (
							isset($fecha_pago) 
							&& $fecha_pago!=0 
							&& strtotime($fecha_pago)>=strtotime($fecha1) 
							&& strtotime($fecha_pago)<=strtotime($fecha2)
						){
                            //Si se paga despues de la fecha1 y hasta la fecha2 el pago es parte del periodo
							$resumenPeriodo['capital']['saldo_anterior']-=$capitalPagadoAnterior;
                            $resumenPeriodo['capital']['abonos']+=$capitalPagado;
                            $resumenPeriodo['mora']['abonos']+=$moraPagado;
                            $resumenPeriodo['iva_interes']['abonos']+=$ivaInteresPagado;
                            $resumenPeriodo['iva_mora']['abonos']+=$ivaMoraPagado;
                            $ivaComisiones=0;
                            $comisionModel=ComisionesAmortizaciones::model()->find("id_amortizacion=$amortizacion->id");
                            if(!is_null($comisionModel)){
                                $ivaComisiones=$amortizacion->pago_comisiones-($parcialidad->pago_comisiones/(1+$comisionModel->id_impuesto0->porcentaje));
                            }
                            $resumenPeriodo['comision']['abonos'] += $comisionesPagadoT;
                            $resumenPeriodo['iva_comision']['abonos'] += $ivaComisionesT;
                            if($solicitud->id_producto0->id_tipo_producto==8){
                                $resumenPeriodo['interes']['abonos'] += $capitalPagado;
                                $resumenPeriodo['iva_interes']['abonos'] += $ivaCapitalPagado;
                            }
                        }else{
                            //Si no se ha pagado es parte del periodo
                            $resumenPeriodo['capital']['abonos']+=$capitalPagado;
                            $resumenPeriodo['mora']['abonos']+=$moraPagado;
                            $resumenPeriodo['iva_interes']['abonos']+=$ivaInteresPagado;
                            $resumenPeriodo['iva_mora']['abonos']+=$ivaMoraPagado;

                            //Se suman los importes al saldo anterior ya que aun no se ha pagado la amortizacion
                            $resumenPeriodo['capital']['saldo_anterior']-=$capitalPagadoAnterior;
                            $resumenPeriodo['interes']['saldo_anterior']-=$interesPagadoAnterior;
                            if($resumenPeriodo['interes']['saldo_anterior']<0){
                                $resumenPeriodo['interes']['saldo_anterior']=0;
                            }
                            $resumenPeriodo['mora']['saldo_anterior']-=$moraPagadoAnterior;
                            $resumenPeriodo['iva_interes']['saldo_anterior']-=$ivaInteresPagadoAnterior;
                            $resumenPeriodo['iva_mora']['saldo_anterior']-=$ivaMoraPagadoAnterior;
                        }


                    }else{
                        //Si la amortizacion no tiene parcialidades
                        //Solo se toman en cuenta los pagos hasta la fecha2
                        if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
                            //Se resta el capital al saldo de linea de capital
                            $saldoLinea['capital']-=$amortizacion->pago_capital;
                            //Lo pagado no se agrega al saldo de linea
                            if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
                                $saldoLinea['interes']-=0;
                                $saldoLinea['iva_interes']-=0;
                                $saldoLinea['comisiones']-=0;
                                $saldoLinea['iva_comisiones']-=0;
                                $saldoLinea['mora']-=0;
                                $saldoLinea['iva_mora']-=0;
                            }

                            //Lo pagado se agrega dentro de los pagados del saldo de linea
                            $saldoLinea['capital_pagado']+=$amortizacion->pago_capital;
                            $saldoLinea['iva_interes_pagado']+=$amortizacion->iva_interes_generado;
                            $saldoLinea['comisiones_pagado']+=$amortizacion->pago_comisiones*(1-$amortizacion->factor_iva_comisiones);
                            $saldoLinea['iva_comisiones_pagado']+=$amortizacion->pago_comisiones*($amortizacion->factor_iva_comisiones);
                            $saldoLinea['mora_pagado']+=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
                            $saldoLinea['iva_mora_pagado']+=$amortizacion->iva_moratorios;
                            //    $saldoLinea['iva_pagado']+=$amortizacion->iva_interes_generado+$amortizacion->iva_moratorios+$amortizacion->pago_comisiones*($amortizacion->factor_iva_comisiones);

                            $saldoLinea['iva_pagado']+=$amortizacion->iva_moratorios+$amortizacion->iva_interes_generado;


                            //Se resta el capital al saldo a pagar de capital
                            $saldoPagar['capital']-=$amortizacion->pago_capital;
                            //Lo pagado no se agrega al saldo a pagar
                            if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
                                $saldoPagar['interes']-=0;
                                $saldoPagar['iva_interes']-=0;
                                $saldoPagar['comisiones']-=0;
                                $saldoPagar['iva_comisiones']-=0;
                                $saldoPagar['mora']-=0;
                                $saldoPagar['iva_mora']-=0;
                            }

                            if($amortizacion->pago_comisiones>0){
                                $comisionesPagado=$amortizacion->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
                                $ivaComisionesPagado=$amortizacion->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
                            }

                            //Solo se agregan los pagos del periodo a los abonos del resumen del periodo
                            if(
								isset($fecha_pago) 
								&& $fecha_pago!=0 
								&& strtotime($fecha_pago)>=strtotime($fecha1)
								|| ($amortizacion->fecha_amortizacion>=$fecha1 && $amortizacion->fecha_amortizacion<=$fecha2)
							) {
                                $resumenPeriodo['capital']['abonos']+=$amortizacion->pago_capital;
                                if($solicitud->id_producto0->id_tipo_producto==8){
                                    $resumenPeriodo['interes']['abonos'] += $amortizacion->pago_capital;
                                    $resumenPeriodo['iva_interes']['abonos'] += $amortizacion->iva_capital;
                                }
                                $resumenPeriodo['mora']['abonos']+=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
                                $resumenPeriodo['iva_interes']['abonos']+=$amortizacion->iva_interes_generado;
                                $resumenPeriodo['iva_mora']['abonos']+=$amortizacion->iva_moratorios;
								$importeComisionesIVA=0;
                                //Si la amortizacion se paga en el periodo tambien se agregan las comisiones
                                foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
                                    if($comisionesPagado>0){
                                        $comisionesPeriodo[]=array(
                                            'fecha'=>$amortizacion->fecha_pago,
                                            'concepto'=>"Pago ".$comision['comision'],
                                            'monto'=>$comision['monto'],
                                            'iva'=>$comision['iva'],
                                            'moneda'=>'MXN',
                                        );
                                    }
									$importeComisionesIVA+=$comision['iva'];
                                }

                                $detallesPeriodo[$keyDetallePeriodo]['operacion']='pago';
                                $detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
                                $detallesPeriodo[$keyDetallePeriodo]['disposicion']=($keyP==0?null:$amortizacion->id_disposicion);
                                $detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
                                $detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
                                $detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_pago;
                                $detallesPeriodo[$keyDetallePeriodo]['concepto']="Pago {$amortizacion->numero_amortizacion}";
                                $detallesPeriodo[$keyDetallePeriodo]['cargo']+=0;
                                $detallesPeriodo[$keyDetallePeriodo]['abono']+=$amortizacion->pago_capital+$amortizacion->iva_capital+$amortizacion->pago_interes+$amortizacion->pago_comisiones+$amortizacion->pago_moratorios+$amortizacion->pago_seguro+$amortizacion->pago_otros_gastos;
                                $detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizacion->pago_capital;
                                
                                $detallesPeriodo[$keyDetallePeriodo]['comision']+=$amortizacion->pago_comisiones-$importeComisionesIVA;
                                $detallesPeriodo[$keyDetallePeriodo]['mora']+=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
                                $detallesPeriodo[$keyDetallePeriodo]['seguro']+=$amortizacion->pago_seguro;
                                $detallesPeriodo[$keyDetallePeriodo]['iva']+=$amortizacion->iva_interes_generado+$amortizacion->iva_moratorios+$importeComisionesIVA+$amortizacion->iva_capital;
                                $keyDetallePeriodo++;
                            }else{
                                //Se resta el importe de capital cuando el pago es del periodo anterior
                                $resumenPeriodo['capital']['saldo_anterior']-=$amortizacion->pago_capital;
                                //Se resta cero cuando el pago es del periodo anterior
                                $resumenPeriodo['interes']['saldo_anterior']-=0;
                                $resumenPeriodo['mora']['saldo_anterior']-=0;
                                $resumenPeriodo['iva_interes']['saldo_anterior']-=0;
                                $resumenPeriodo['iva_mora']['saldo_anterior']-=0;
                            }
                        }
                    }
					// ——— Condonaciones sobre cargos (unificado) ———

					// 0) Reiniciar variables auxiliares por cada amortización:
					$capitalPagado = $ivaCapitalPagado = 0;
					$interesPagado = $ivaInteresPagado = 0;
					$moraPagado    = $ivaMoraPagado    = 0;
					$comisionesPagado    = $ivaComisionesPagado    = 0;
					$capitalPagadoAnterior = $ivaCapitalPagadoAnterior = 0;
					$interesPagadoAnterior = $ivaInteresPagadoAnterior = 0;
					$moraPagadoAnterior    = $ivaMoraPagadoAnterior    = 0;
					$comisionesPagadoAnterior = $ivaComisionesPagadoAnterior = 0;

					// 1) Recuperar todas las condonaciones hasta la fecha de corte
					$parcialidadesCondonaciones = ParcialidadesAmortizaciones::model()->findAll([
						"condition" => "
							status='Condonado'
							AND id_amortizacion=:amortizacion
							AND CAST(fecha_pago AS DATE)<=:fecha2
						",
						"order"  => "fecha_pago ASC",
						"params" => [
							':amortizacion' => $amortizacion->id,
							':fecha2'       => $fecha2,
						],
					]);

					$moraCondonado = 0;
					// conservar índice inicial de detalles
					$startDetalle = $keyDetallePeriodo;
					$c = 0;

					foreach ($parcialidadesCondonaciones as $parcialidad) {
						// fecha de pago como YYYY-MM-DD
						$fechaPagoParcial = date("Y-m-d", strtotime($parcialidad->fecha_pago));
						// 2) Saltar antes de inicio o después de corte
						if (strtotime($fechaPagoParcial) < strtotime($fecha1) || strtotime($fechaPagoParcial) > strtotime($fecha2)) {
							continue;
						}
						$c++;

						// 3) Restar capital condonado de saldos
						$saldoLinea['capital']               -= $parcialidad->pago_capital;
						$saldoPagar['capital']               -= $parcialidad->pago_capital;
						$resumenPeriodo['capital']['cargos'] -= $parcialidad->pago_capital;

						// 4) Acumular mora condonada
						$moraCondonado += $parcialidad->pago_moratorios;

						// 5) Calcular netos de interés e IVA condonados
						$impMora    = $solicitud->id_impuesto_moratorios0->porcentaje;
						$impInteres = $solicitud->id_impuesto0->porcentaje;
						$moraTotal    = round($parcialidad->pago_moratorios / (1 + $impMora), 2);
						$ivaMoraC     = $parcialidad->pago_moratorios - $moraTotal;
						$interesTotal = round($parcialidad->pago_interes    / (1 + $impInteres), 2);
						$ivaInteresC  = $parcialidad->pago_interes - $interesTotal;

						// 6) Ajustar saldoPagar y resumenPeriodo de intereses
						$saldoPagar['interes']     -= $interesTotal;
						$saldoPagar['iva_interes'] -= $ivaInteresC;
						$resumenPeriodo['interes']['cargos']    -= $interesTotal;
						$resumenPeriodo['iva_interes']['cargos'] -= $ivaInteresC;

						// 7) Ajustar en detallesPeriodo al índice actual
						$idx = $startDetalle + ($c - 1);
						//   (mora)
						if ($moraTotal > $detallesPeriodo[$idx]['mora']) {
							$mAnt   = $detallesPeriodo[$idx]['mora'];
							$ivaAnt = $mAnt * $impMora;
							$detallesPeriodo[$idx]['cargo'] -= ($mAnt + $ivaAnt);
							$detallesPeriodo[$idx]['mora']  = 0;
							$detallesPeriodo[$idx]['iva']   -= $ivaAnt;
						} else {
							$detallesPeriodo[$idx]['cargo'] -= ($moraTotal + $ivaMoraC);
							$detallesPeriodo[$idx]['mora']  -= $moraTotal;
							$detallesPeriodo[$idx]['iva']   -= $ivaMoraC;
						}
						//   (interés)
						if ($interesTotal >= $detallesPeriodo[$idx]['interes']) {
							$iAnt    = $detallesPeriodo[$idx]['interes'];
							$ivaAntI = $iAnt * $impInteres;
							$detallesPeriodo[$idx]['cargo']   -= ($iAnt + $ivaAntI);
							$detallesPeriodo[$idx]['interes'] = 0;
							$detallesPeriodo[$idx]['iva']     -= $ivaAntI;
						} else {
							$detallesPeriodo[$idx]['cargo']   -= ($interesTotal + $ivaInteresC);
							$detallesPeriodo[$idx]['interes'] -= $interesTotal;
							$detallesPeriodo[$idx]['iva']     -= $ivaInteresC;
						}
						//   evitar negativos
						foreach (['cargo','mora','interes','iva'] as $campo) {
							if ($detallesPeriodo[$idx][$campo] < 0) {
								$detallesPeriodo[$idx][$campo] = 0;
							}
						}

						// 8) Distribuir condonación en pagos dentro/fuera del periodo
						if (strtotime($fechaPagoParcial) >= strtotime($fecha1)) {
							// dentro del periodo
							$capitalPagado += $parcialidad->pago_capital;
							if ($amortizacion->pago_interes > 0) {
								$interesPagado    += $interesTotal;
								$ivaInteresPagado += $ivaInteresC;
							}
							if ($amortizacion->pago_moratorios > 0) {
								$moraPagado    += $moraTotal;
								$ivaMoraPagado += $ivaMoraC;
							}
							if ($parcialidad->pago_comisiones > 0) {
								$comisionesPagado    += $parcialidad->pago_comisiones * ($importeComisiones / ($importeComisiones + $importeComisionesIVA));
								$ivaComisionesPagado += $parcialidad->pago_comisiones - ($parcialidad->pago_comisiones * ($importeComisiones / ($importeComisiones + $importeComisionesIVA)));
							}
							if ($parcialidad->pago_seguro > 0) {
								$seguroPagado = $parcialidad->pago_seguro;
							}
						} else {
							// antes del periodo
							$capitalPagadoAnterior += $parcialidad->pago_capital;
							if ($amortizacion->pago_interes > 0) {
								$interesPagadoAnterior    += $interesTotal;
								$ivaInteresPagadoAnterior += $ivaInteresC;
							}
							if ($amortizacion->pago_moratorios > 0) {
								$moraPagadoAnterior    += $moraTotal;
								$ivaMoraPagadoAnterior += $ivaMoraC;
							}
							if ($parcialidad->pago_comisiones > 0) {
								$comisionesPagadoAnterior    += $parcialidad->pago_comisiones * ($importeComisiones / ($importeComisiones + $importeComisionesIVA));
								$ivaComisionesPagadoAnterior += $parcialidad->pago_comisiones - ($parcialidad->pago_comisiones * ($importeComisiones / ($importeComisiones + $importeComisionesIVA)));
							}
						}

						// 9) Detalle de condonación en el periodo
						if (strtotime($fechaPagoParcial) >= strtotime($fecha1)) {
							$ivaMoraC = $parcialidad->pago_moratorios - ($parcialidad->pago_moratorios / (1 + $impMora));
							$comModel = ComisionesAmortizaciones::model()->find("id_amortizacion={$amortizacion->id}");
							$ivaComC  = $comModel
								? $parcialidad->pago_comisiones - ($parcialidad->pago_comisiones / (1 + $comModel->id_impuesto0->porcentaje))
								: 0;

							$detallesPeriodo[$startDetalle + $c] = [
								'operacion'        => 'condonacion',
								'solicitud'        => $model->id,
								'disposicion'      => $amortizacion->id_disposicion,
								'clave_disposicion'=> $keyP==0
													? "S_{$model->clave}"
													: "D_{$amortizacion->id_disposicion0->clave}",
								'fecha'            => $parcialidad->fecha_pago,
								'concepto'         => "Condonación {$amortizacion->numero_amortizacion}",
								'cargo'            => 0,
								'abono'            => $parcialidad->pago_capital
													+ $parcialidad->pago_interes
													+ $parcialidad->pago_comisiones
													+ $parcialidad->pago_moratorios,
								'capital'          => $parcialidad->pago_capital,
								'interes'          => $interesTotal,
								'comision'         => $parcialidad->pago_comisiones - $ivaComC,
								'mora'             => $moraTotal - $ivaMoraC,
								'iva'              => $ivaInteresC + $ivaMoraC + $ivaComC,
							];
						}
					}

					// avanzar el índice global
					$keyDetallePeriodo = $startDetalle + $c;

					// 10) Ajuste final del resumen de mora
					if (($resumenPeriodo['mora']['saldo_anterior']
						+ $resumenPeriodo['iva_mora']['saldo_anterior']) > 0) {
						if (($resumenPeriodo['mora']['saldo_anterior']
							+ $resumenPeriodo['iva_mora']['saldo_anterior']) >= $moraCondonado) {
							$resumenPeriodo['mora']['saldo_anterior']    -= $moraCondonado / (1 + $solicitud->id_impuesto0->porcentaje);
							$resumenPeriodo['iva_mora']['saldo_anterior'] -= $moraCondonado
								- ($moraCondonado / (1 + $solicitud->id_impuesto0->porcentaje));
						} else {
							$diffM = $moraCondonado
								- ($resumenPeriodo['mora']['saldo_anterior']
								+ $resumenPeriodo['iva_mora']['saldo_anterior']);
							$resumenPeriodo['mora']['cargos']     -= $diffM / (1 + $solicitud->id_impuesto0->porcentaje);
							$resumenPeriodo['iva_mora']['cargos'] -= $diffM
								- ($diffM / (1 + $solicitud->id_impuesto0->porcentaje));
							$resumenPeriodo['mora']['saldo_anterior']    = 0;
							$resumenPeriodo['iva_mora']['saldo_anterior'] = 0;
						}
					} else {
						$resumenPeriodo['mora']['cargos']     -= $moraCondonado / (1 + $solicitud->id_impuesto0->porcentaje);
						$resumenPeriodo['iva_mora']['cargos'] -= $moraCondonado
							- ($moraCondonado / (1 + $solicitud->id_impuesto0->porcentaje));
					}


                }
            }
        }
		//die;
        $data=array(
            'saldo_linea_nuevo'=>$saldoLineaCalculo,
            'saldo_linea_nuevo_anterior'=>$saldoLineaCalculoAnterior,
            'saldo_linea'=>$saldoLinea,
            'saldo_pagar'=>$saldoPagar,
            'resumen_periodo'=>$resumenPeriodo,
            'comisiones_periodo'=>$comisionesPeriodo,
            'detalles_periodo'=>$detallesPeriodo,
        );

		

        return $data;
    }

	public function getImpuestos($array = false){
		$data = Impuestos::model()->findAll();
		return $array ? $data : CHtml::listData ($data , 'id', 'nombre' );
	}


    public function getDetallesPeriodo2($fecha1,$fecha2,$cliente=null){
		$model=$this;
		$data=array();

		$cobroInteres=$model->id_producto0->cobro_interes;

		$empresa=Empresa::model()->find();
		$decimales=2;
		if(isset($empresa->decimales)){
			$decimales=$empresa->decimales;
		}

		if(isset($model->id_grupo_cliente) && $model->id_grupo_cliente!=0){
			//Grupal
			if(!is_null($cliente)){
				$sqlComisiones="
					SELECT
						*
					FROM
						comisiones_amortizaciones c LEFT JOIN
						amortizaciones a ON(c.id_amortizacion=a.id) LEFT JOIN
						grupos_solidarios g ON(a.id_grupo_solidario=g.id)
					WHERE
						g.id_solicitud={$model->id} AND
						c.financiado<>1
				";
				$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
				$infoComisiones=array();
				foreach ($dataComisiones as $comision) {
					$infoComisiones[$comision["id_amortizacion"]][]=array(
						'comision'=>$comision["nombre"],
						'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
						'iva'=>$comision["monto_impuesto"],
					);
				}
				$amortizaciones=Amortizaciones::model()->with("id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud AND id_grupo_solidario0.id_cliente=:cliente",array(':solicitud'=>$model->id,':cliente'=>$cliente));

				$amortizacionesAll[0]=$amortizaciones;
			}
		}else{
			//Principal--------------------------------------
			$sqlComisiones="
				SELECT
					*
				FROM
					comisiones_amortizaciones c LEFT JOIN
					amortizaciones a ON(c.id_amortizacion=a.id)
				WHERE
					a.id_solicitud={$model->id} AND
					c.financiado<>1
			";
			$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
			$infoComisiones=array();
			foreach ($dataComisiones as $comision) {
				$infoComisiones[$comision["id_amortizacion"]][]=array(
					'comision'=>$comision["nombre"],
					'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
					'iva'=>$comision["monto_impuesto"],
				);
			}
			$amortizaciones=Amortizaciones::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$model->id));
			$disposiciones=Disposiciones::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$model->id));

			$amortizacionesAll[0]=$amortizaciones;

			//Disposiciones-----------------------------------
			$sqlComisiones="
				SELECT
					*
				FROM
					comisiones_amortizaciones c LEFT JOIN
					amortizaciones a ON(c.id_amortizacion=a.id) LEFT JOIN
					disposiciones d ON(a.id_disposicion=d.id)
				WHERE
					d.id_solicitud={$model->id} AND
					c.financiado<>1
			";
			$dataComisiones=Yii::app()->db->createCommand($sqlComisiones)->queryAll();
			foreach ($dataComisiones as $comision) {
				$infoComisiones[$comision["id_amortizacion"]][]=array(
					'comision'=>$comision["nombre"],
					'monto'=>$comision["monto_comision"]-$comision["monto_impuesto"],
					'iva'=>$comision["monto_impuesto"],
				);
			}

			$keyAll=1;
			foreach ($disposiciones as $disposicion) {
				$amortizaciones=Amortizaciones::model()->findAll("id_disposicion=:disposicion",array(':disposicion'=>$disposicion->id));
				$amortizacionesAll[$keyAll]=$amortizaciones;
				$keyAll++;
			}

		}


		//NOTA: El saldo de linea y el saldo a pagar son casi iguales, la diferencia es que saldo de linea incluye algunos datos mas.
		//Originalmente el saldo de linea y el saldo a pagar eran diferentes en que el saldo de linea incluia las disposiciones de capital y el saldo a pagar solo incluia los vencimientos de capital.
		$saldoLinea=array(
			'capital'=>0,
			'intereses'=>0,
			'comisiones'=>0,
			'mora'=>0,
		);
		$saldoPagar=array(
			'capital'=>0,
			'intereses'=>0,
			'comisiones'=>0,
			'mora'=>0,
		);
		$resumenPeriodo=array(
			'capital'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			),
			'interes'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			),
			'mora'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			),
			'iva_interes'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			),
			'iva_mora'=>array(
				'cargos'=>0,
				'abonos'=>0,
				'saldo_anterior'=>0,
			)
		);
		$comisionesPeriodo=array(
			//array(),
		);
		$detallesPeriodo=array(
			//array(),
		);
		$keyDetallePeriodo=0;

		if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
			$ip = $_SERVER['HTTP_CLIENT_IP'];
		} elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
			$ip = $_SERVER['HTTP_X_FORWARDED_FOR'];
		} else {
			$ip = $_SERVER['REMOTE_ADDR'];
		}
		if($ip=="187.189.90.2"){
			$ip=0;
		}

		//DEVENGADOS
		$fechaSinCambiar = $fecha1;

		foreach ($amortizacionesAll as $keyP=>$amortizaciones) {
			//Capital
			if($keyP==0){
				//Si es cero es la principal
				if(isset($amortizaciones[0])){
					//Si es un grupo solidario
					if(isset($amortizaciones[0]->id_grupo_solidario) && $amortizaciones[0]->id_grupo_solidario!=0){
						//Si se dispuso antes del periodo o en el periodo se agrega al saldo
						if(strtotime($amortizaciones[0]->id_grupo_solidario0->id_solicitud0->fecha_disposicion)<=strtotime($fecha2)){
							$saldoLinea['capital']+=$amortizaciones[0]->id_grupo_solidario0->monto;
							$saldoPagar['capital']+=$amortizaciones[0]->id_grupo_solidario0->monto;
							//Hay un tema con el capital ya que al tomar en cuenta la disposición y no el vencimiento, no es posible por ahora considerar los descuentos de capital.
							if(strtotime($amortizaciones[0]->id_grupo_solidario0->id_solicitud0->fecha_disposicion)<strtotime($fecha1)){
								$resumenPeriodo['capital']['saldo_anterior']+=$amortizaciones[0]->id_grupo_solidario0->monto;
							}else{
								$resumenPeriodo['capital']['cargos']+=$amortizaciones[0]->id_grupo_solidario0->monto;

								$detallesPeriodo[$keyDetallePeriodo]['operacion']='disposicion';
								$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
								$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
								$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
								$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
								$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizaciones[0]->id_grupo_solidario0->id_solicitud0->fecha_disposicion;
								$detallesPeriodo[$keyDetallePeriodo]['concepto']="Disposición";
								$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizaciones[0]->id_grupo_solidario0->monto;
								$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizaciones[0]->id_grupo_solidario0->monto;
								$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['iva']+=0;
							}
						}
					}else{
						//Si es un individual simple o primera disposicion revolvente
						if(strtotime($amortizaciones[0]->id_solicitud0->fecha_disposicion)<=strtotime($fecha2)){
							//Si se dispuso antes del periodo o en el periodo se agrega al saldo
							$saldoLinea['capital']+=$amortizaciones[0]->id_solicitud0->entregable;
							$saldoPagar['capital']+=$amortizaciones[0]->id_solicitud0->entregable;
							//Hay un tema con el capital ya que al tomar en cuenta la disposición y no el vencimiento, no es posible por ahora considerar los descuentos de capital.
							if(strtotime($amortizaciones[0]->id_solicitud0->fecha_disposicion)<strtotime($fecha1)){
								$resumenPeriodo['capital']['saldo_anterior']+=$amortizaciones[0]->id_solicitud0->entregable;
							}else{
								$resumenPeriodo['capital']['cargos']+=$amortizaciones[0]->id_solicitud0->entregable;

								$detallesPeriodo[$keyDetallePeriodo]['operacion']='disposicion';
								$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
								$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
								$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
								$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
								$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
								$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizaciones[0]->id_solicitud0->fecha_disposicion;
								$detallesPeriodo[$keyDetallePeriodo]['concepto']="Disposición";
								$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizaciones[0]->id_solicitud0->entregable;
								$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizaciones[0]->id_solicitud0->entregable;
								$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
								$detallesPeriodo[$keyDetallePeriodo]['iva']+=0;
							}
						}
					}
				}
			}else{
				//Si es una disposición revolvente
				if(strtotime($amortizaciones[0]->id_disposicion0->fecha)<=strtotime($fecha2)){
					//Si es disposicion y se dispuso antes del periodo o en el periodo se agrega al saldo
					// if ($model->id_producto0->tabla_disposiciones=="unica") {
					// 	$consultaTablaUnica = Disposiciones::model()->findAll("id_solicitud=:solicitud",array(":solicitud"=>$model->id));
					// 	foreach ($consultaTablaUnica as $tablaUnica) {
					// 		$saldoLinea['capital']+=$tablaUnica->importe;
					// 		$saldoPagar['capital']+=$tablaUnica->importe;
					// 	}
					// }
					$saldoLinea['capital']+=$amortizaciones[0]->id_disposicion0->importe;
					$saldoPagar['capital']+=$amortizaciones[0]->id_disposicion0->importe;
					if(strtotime($amortizaciones[0]->id_disposicion0->fecha)<=strtotime($fecha1)){
						$resumenPeriodo['capital']['saldo_anterior']+=$amortizaciones[0]->id_disposicion0->importe;
					}else{
						$resumenPeriodo['capital']['cargos']+=$amortizaciones[0]->id_disposicion0->importe;
						$detallesPeriodo[$keyDetallePeriodo]['operacion']='disposicion';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizaciones[0]->id_disposicion0->fecha;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Disposición";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizaciones[0]->id_disposicion0->importe;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizaciones[0]->id_disposicion0->importe;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=0;
					}
				}
			}
			if(isset($detallesPeriodo[$keyDetallePeriodo])){
				//Si se agrego la amortización se suma 1 al key
				$keyDetallePeriodo++;
			}

			//Interes, Mora y Comisiones


			foreach ($amortizaciones as $keyA => $amortizacion) {
				$idsDisp[]=$amortizacion->id;
				if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0){
					$fecha_pago=date("Y-m-d",strtotime($amortizacion->fecha_pago));
				}else{
					$fecha_pago=0;
				}

				$agregar=false;
				if(strtotime($amortizacion->fecha_amortizacion)<=strtotime($fecha2)){
					//Si se vence antes del periodo o en el periodo se agrega
					$agregar=true;
				}else{
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
						//Si se paga antes del periodo o en el periodo se agrega
						$agregar=true;
					}
				}
				if($agregar){
					$idsDispA[]=$amortizacion->id;
					//Capital
					//El capital de la amortización no se suma al saldo de linea|saldo pagar|resumen del periodo ya que se agrega desde la disposición
					$saldoLinea['capital']+=0;
					$saldoPagar['capital']+=0;
					//Si la amortización se paga antes de la fecha1 es parte del saldo anterior
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<strtotime($fecha1)){
						//Si ya esta pagado se suma cero al saldo
						$resumenPeriodo['capital']['saldo_anterior']+=0;
					}elseif(strtotime($amortizacion->fecha_amortizacion)<strtotime($fecha1)){
						//Si la amortización se vence antes de la fecha1 es parte del saldo anterior
						//Si no esta pagado se suma cero al saldo porque el capital ya se agrego desde la disposición
						$resumenPeriodo['capital']['saldo_anterior']+=0;
					}else{
						//Si se vence o se paga despues de la fecha1 es parte del periodo ya que ya se sabe que es menor a la fecha2
						//Se suma cero al cargo porque ya se agregi desde la disposicion
						$resumenPeriodo['capital']['cargos']+=0;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizacion->pago_capital;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizacion->pago_capital;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=0;

					}

					//Interes
					//Solo se agregan al saldo de linea|saldo pagar las amortizaciones no pagadas
					if(!isset($fecha_pago) || $fecha_pago==0 || strtotime($fecha_pago)>strtotime($fecha2)){
						$saldoLinea['interes']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$saldoLinea['iva_interes']+=$amortizacion->iva_interes_generado;
						$saldoPagar['interes']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$saldoPagar['iva_interes']+=$amortizacion->iva_interes_generado;
					}
					//Si se paga antes de la fecha1 es parte del saldo anterior
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<strtotime($fecha1)){
						//Se suma cero al saldo anterior cuando ya esta pagado
						$resumenPeriodo['interes']['saldo_anterior']+=0;
						$resumenPeriodo['iva_interes']['saldo_anterior']+=0;
					}elseif(strtotime($amortizacion->fecha_amortizacion)<strtotime($fecha1)){
						//Si se vence antes de la fecha1 es parte del saldo anterior
						//Se suman los importes vencidos al saldo anterior
						$resumenPeriodo['interes']['saldo_anterior']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$resumenPeriodo['iva_interes']['saldo_anterior']+=$amortizacion->iva_interes_generado;
					}else{
						//Si se vence o se paga despues de la fecha1 es parte del periodo ya que ya se sabe que es menor a la fecha2
						//Se suman los importes vencidos al cargo
						$resumenPeriodo['interes']['cargos']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$resumenPeriodo['iva_interes']['cargos']+=$amortizacion->iva_interes_generado;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$amortizacion->pago_interes;//Ya incluye el IVA
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$amortizacion->iva_interes_generado;
						$detallesPeriodo[$keyDetallePeriodo]['comision']+=$amortizacion->pago_comisiones-$amortizacion->iva_comisiones;
						$detallesPeriodo[$keyDetallePeriodo]['comision_iva']+=$amortizacion->iva_comisiones;
					}

					//Comisiones
					//Solo se agregan al saldo de linea|saldo pagar las amortizaciones no pagadas
					if(!isset($fecha_pago) || $fecha_pago==0  || strtotime($fecha_pago)>strtotime($fecha2)){
						foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
							$saldoLinea['comisiones']+=$comision["monto"];
							$saldoLinea['iva_comisiones']+=$comision["iva"];
							$saldoPagar['comisiones']+=$comision["monto"];
							$saldoPagar['iva_comisiones']+=$comision["iva"];
						}
					}

					//Mora
					$moratoriosDevengados=MoratoriosAmortizaciones::model()->findAll("id_amortizacion=:amortizacion AND fecha<=:fecha2",array(':amortizacion'=>$amortizacion->id,':fecha2'=>$fecha2));
					foreach ($moratoriosDevengados as $moratorioDevengado) {
						//Solo se agregan al saldo de linea|saldo pagar las amortizaciones no pagadas
						if(!isset($fecha_pago) || $fecha_pago==0 || strtotime($fecha_pago)>strtotime($fecha2)){
							$saldoLinea['mora']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$saldoLinea['iva_mora']+=$moratorioDevengado->monto_impuesto;
							$saldoPagar['mora']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$saldoPagar['iva_mora']+=$moratorioDevengado->monto_impuesto;
						}
						//Si se paga antes de la fecha1 es parte del saldo anterior
						if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<strtotime($fecha1)){
							//Se suma cero al saldo anterior cuando ya esta pagado
							$resumenPeriodo['mora']['saldo_anterior']+=0;
							$resumenPeriodo['iva_mora']['saldo_anterior']+=0;
						}elseif(strtotime($moratorioDevengado->fecha)<strtotime($fecha1)){
							//Si se vence antes de la fecha1 es parte del saldo anterior
							//Se suma el importe vencido al saldo anterior
							$resumenPeriodo['mora']['saldo_anterior']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$resumenPeriodo['iva_mora']['saldo_anterior']+=$moratorioDevengado->monto_impuesto;
						}else{
							//Si se vence o se paga despues de la fecha1 es parte del periodo ya que ya se sabe que es menor a la fecha2
							//Se suman los importes vencidos al cargo
							$resumenPeriodo['mora']['cargos']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$resumenPeriodo['iva_mora']['cargos']+=$moratorioDevengado->monto_impuesto;

							$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
							$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
							$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
							$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
							$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
							$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
							$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
							$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$moratorioDevengado->monto_moratorio;//Ya incluye el IVA
							$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
							$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
							$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
							$detallesPeriodo[$keyDetallePeriodo]['mora']+=$moratorioDevengado->monto_moratorio-$moratorioDevengado->monto_impuesto;
							$detallesPeriodo[$keyDetallePeriodo]['iva']+=$moratorioDevengado->monto_impuesto;
						}
					}
				}else{
					$idsDisp1[]=$amortizacion->id;
					//Si no se agrega la amortización revisar si la fecha anterior estaba en el periodo para calcular los días de interes de la fecha de vencimiento anterior a la fecha de corte del periodo
					//Se usa CAST en la fecha de pago para eliminar la hora de la fecha
					$parcialidades=ParcialidadesAmortizaciones::model()->findAll(array("condition"=>"id_amortizacion=:amortizacion AND CAST(fecha_pago AS DATE)<=:fecha","order"=>"fecha_pago ASC","params"=>array(':amortizacion'=>$amortizacion->id,':fecha'=>$fecha2)));

					//Interes
					if(strtotime($amortizaciones[$keyA-1]->fecha_amortizacion)<strtotime($fecha2)){
						//Mismo codigo que en amortizaciones para recalcular interes y luego se pueda calcular el del subperiodo
						if(($cobroInteres=="ajustable" && count($parcialidades)>0) || $cobroInteres=="variable"){
							$limiteDias=false;
							if(in_array($model->id_tipo_amortizacion0->nombre,array('Mensual','Trimestral','Semestral','Anual','Fin de Mes','Pago Único (Bullet) con Interes Mensual','15 y Fin de Mes','Pago Único (Bullet) con Interes Semestral','Quincenal Personalizado'))){
								$limiteDias=true;
							}
							$diasAño=$model->id_producto0->calculo_base;
							$veces_anual=$amortizacion->getVeces_anual($model);
							if(isset($amortización->id_grupo_solidario) && $amortización->id_grupo_solidario!=0){
								$tasa_interes=$model->sobretasa+($amortizacion->getValorTasaReferencia($model->nombre_tasa_referencia)/100);
							}elseif(isset($amortización->id_disposicion) && $amortización->id_disposicion!=0){
								$tasa_interes=$amortizacion->id_disposicion0->tasa;
							}else{
								$tasa_interes=$model->sobretasa+($amortizacion->getValorTasaReferencia($model->nombre_tasa_referencia)/100);
							}
							$fechaP0=$amortizaciones[$keyA-1]->fecha_amortizacion;
							$saldoCapital0=$amortizaciones[$keyA-1]->saldo_capital;
							$interes0=0;
							$diasMaximo=round($diasAño/$veces_anual);
							$diasCalculados=0;
							$fecha_vencimiento=$amortizacion->fecha_amortizacion;
							if($cobroInteres=="variable" && strtotime($fecha_vencimiento)>strtotime($fecha2)){
								$fecha_vencimiento=$fecha2;
							}
							foreach($parcialidades as $parcialidad){
								$idsParcialidad[]=$parcialidad->id;
								$fechaPagoParcial=date("Y-m-d",strtotime($parcialidad->fecha_pago));

								if($parcialidad->pago_capital>0){
									if(strtotime($fechaPagoParcial)<strtotime($fecha_vencimiento)){
										if(strtotime($fechaPagoParcial)>strtotime($fechaP0)){
											//$interes0-=$parcialidad->pago_interes;
											$diferenciaDias=round((strtotime($fechaPagoParcial)-strtotime($fechaP0))/60/60/24,0);
											if($diasCalculados+$diferenciaDias>$diasMaximo && $limiteDias==true){
												$diferenciaDias=$diasMaximo-$diasCalculados;
											}
											$diasCalculados+=$diferenciaDias;
											$interes0+=round((1+$model->porcentaje_impuesto)*$saldoCapital0*$tasa_interes*$diferenciaDias/$diasAño,$decimales);
											$fechaP0=$parcialidad->fecha_pago;

											$saldoCapital0-=$parcialidad->pago_capital;
										}
									}
								}
							}
							if(strtotime($fecha_vencimiento)>strtotime($fechaP0)){
								$diferenciaDias=round((strtotime($fecha_vencimiento)-strtotime($fechaP0))/60/60/24,0);
								if($diasCalculados+$diferenciaDias>$diasMaximo && $limiteDias==true){
									$diferenciaDias=$diasMaximo-$diasCalculados;
								}
								$interes0+=round((1+$model->porcentaje_impuesto)*$saldoCapital0*$tasa_interes*$diferenciaDias/$diasAño,$decimales);
								//echo "<br>";
								//var_dump("interes0: ".$interes0);
							}
							$interes_generado=$interes0/(1+$model->porcentaje_impuesto);
							// echo "<br>";
							// var_dump("interes generado 1: ".$interes_generado);
							$interes_generado=round($interes_generado,$decimales);
							$iva_interes_generado=$interes_generado*$model->porcentaje_impuesto;
						}
					}
					$fecha1Ante = $fechaSinCambiar;
					$between = false;
					if (strtotime($amortizaciones[$keyA-1]->fecha_amortizacion)>=strtotime($fecha1Ante) && strtotime($amortizaciones[$keyA-1]->fecha_amortizacion)<=strtotime($fecha2)) {
						//echo "<br>";
						//var_dump("fecha1Ante dentro de foreach: ".$fecha1Ante);
						//echo "<br>";
						//var_dump("fecha2 dentro de foreach: ".$fecha2);
						$between = true;
					}
					if ($between==false) {
						$fechaMenos = date("Y-m-d H:i:s",strtotime('-1 day',strtotime($fecha1Ante)));
						$fecha1Ante= $fechaMenos;
					}
					$diasAmortizacion=round((strtotime($amortizacion->fecha_amortizacion)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);
					$diasFecha2=round((strtotime($fecha2)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);
					$diasFecha1=round((strtotime($fecha1)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);

					if ($between==false) {
						$diasFecha1=round((strtotime($fecha1Ante)-strtotime($amortizaciones[$keyA-1]->fecha_amortizacion))/60/60/24,0);
					}
					// echo "<br>";
					// var_dump("dias fecha1: ".$diasFecha1);
					// echo "<br>";
					// var_dump("dias fecha2: ".$diasFecha2);
					// echo "<br>";
					//var_dump("fecha Amortizaciones: ".$amortizaciones[$keyA-1]->fecha_amortizacion);
					//echo "<br>";
					//var_dump("fecha1: ".$fecha1);
					//echo "<br>";
					//var_dump("fecha2: ".$fecha2);
					if($diasFecha1<=0){
						$diasFecha1=0;
					}
					//echo "<br>";
					//var_dump("fecha1|1|: ".$diasFecha1);
					if($cobroInteres=="variable"){
						//Cuando el cobro de interes es variable ya se calcula a los dias reales transcurridos hasta la fecha2
						$interes_periodo=$interes_generado*(($diasFecha2-$diasFecha1)/$diasFecha2);
						$iva_interes_periodo=$iva_interes_generado*(($diasFecha2-$diasFecha1)/$diasFecha2);
						$interes_periodo_anterior=$interes_generado*(($diasFecha1)/$diasFecha2);
						$iva_interes_periodo_anterior=$iva_interes_generado*(($diasFecha1)/$diasFecha2);
						// echo "<br>";
						// var_dump("interes generado: ".$interes_generado);
						// echo "<br>";
						// var_dump("interes periodo anterior: ".$interes_periodo_anterior);
					}else{
						$interes_periodo=$interes_generado*($diasFecha2/$diasAmortizacion)*(($diasFecha2-$diasFecha1)/$fecha2);
						$iva_interes_periodo=$iva_interes_generado*($diasFecha2/$diasAmortizacion)*(($diasFecha2-$diasFecha1)/$fecha2);
						$interes_periodo_anterior=$interes_generado*($diasFecha2/$diasAmortizacion)*(($diasFecha1)/$fecha2);
						$iva_interes_periodo_anterior=$iva_interes_generado*($diasFecha2/$diasAmortizacion)*(($diasFecha1)/$fecha2);
					}
					//Mora
					$mora_generado=0;//La amortización no esta vencida por lo que es cero
					$iva_mora_generado=0;
					$mora_periodo=0;
					$iva_mora_periodo=0;
					$mora_periodo_anterior=0;
					$iva_mora_periodo_anterior=0;

					//Comisiones
					$importeComisiones=0;
					$importeComisionesIVA=0;
					foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
						$importeComisiones+=$comision["monto"];
						$importeComisionesIVA+=$comision["iva"];
					}
					$comisiones_periodo=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo
					$iva_comisiones_periodo=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo
					$comisiones_periodo_anterior=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo
					$iva_comisiones_periodo_anterior=0;//Las comisiones no vencen por dia como los intereses solo vencen a la fecha de vencimiento por el importe completo


					//Se calcula lo pagado en parcialidades
					$interesPagado=0;
					$ivaInteresPagado=0;
					$moraPagado=0;
					$ivaMoraPagado=0;
					$comisionesPagado=0;
					$ivaComisionesPagado=0;

					$interesPagadoAnterior=0;
					$ivaInteresPagadoAnterior=0;
					$moraPagadoAnterior=0;
					$ivaMoraPagadoAnterior=0;
					$comisionesPagadoAnterior=0;
					$ivaComisionesPagadoAnterior=0;


					foreach ($parcialidades as $parcialidad) {
						if(strtotime($parcialidad->fecha_pago)>strtotime($fecha1)){
							//Si la fecha de pago es mayor a la fecha1 la parcialidad es del periodo
							$interesPagado+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							$ivaInteresPagado+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							if($amortizacion->pago_moratorios>0){
								$moraPagado+=$amortizacion->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
								$ivaMoraPagado+=$amortizacion->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							}
							if($parcialidad->pago_comisiones>0){
								$comisionesPagado+=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
								$ivaComisionesPagado+=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
							}
						}else{
							//Si la fecha de pago es menor a la fecha1 la parcialidad es anterior al periodo
							$interesPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							$ivaInteresPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							if($amortizacion->pago_moratorios>0){
								$moraPagadoAnterior+=$amortizacion->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
								$ivaMoraPagadoAnterior+=$amortizacion->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							}
							if($parcialidad->pago_comisiones>0){
								$comisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
								$ivaComisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
							}
						}
					}
					// echo "<br>";
					// var_dump("interes periodo: ".$interes_periodo);
					// echo "<br>";
					// var_dump("interes pagado: ".$interesPagado);

					if ($interesPagadoAnterior<=0) {
						$saldo_interes_anterior = $interes_periodo_anterior;
					}else{
						$saldo_interes_anterior=0;
					}
					//var_dump("interes pagado: ".$interesPagado);
					//INTERES
					//Si lo pagado en parcialidades es mayor a lo generado se agrega lo pagado en parcialidades
					if($interes_periodo+$saldo_interes_anterior<$interesPagado){
						//echo "<br>";
						//var_dump("Disposición: ".$amortizacion->id_disposicion0->clave);
						//Se suma el importe pagado en el periodo al saldo linea|saldo pagar
						//Se suma cero al saldo linea|saldo pagar cuando es pagado anterior porque ya esta pagado.
						$saldoLinea['interes']+=$interesPagado+0;
						$saldoLinea['iva_interes']+=$ivaInteresPagado+0;
						$saldoPagar['interes']+=$interesPagado+0;
						$saldoPagar['iva_interes']+=$ivaInteresPagado+0;

						//Se suman los importes pagados en el periodo al cargo
						$resumenPeriodo['interes']['cargos']+=$interesPagado;
						$resumenPeriodo['iva_interes']['cargos']+=$ivaInteresPagado;
						//Se suman cero al cargo cuando es del periodo anterior
						$resumenPeriodo['interes']['saldo_anterior']+=0;
						$resumenPeriodo['iva_interes']['saldo_anterior']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$interesPagado+$ivaInteresPagado;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=$interesPagado;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaInteresPagado;
					}elseif($interes_periodo>0){
						$idsParcialidad2[]=$interes_periodo_anterior;
						//echo "<br>";
						//var_dump("Disposición2: ".$amortizacion->id_disposicion0->clave);
						//Si lo pagado en parcialidades es menor al devengado se toma lo devengado
						//Se suma el importe devengado en el periodo al saldo linea|saldo pagar
						//Se suma el importe devegado en el periodo anterior al saldo linea|saldo pagar
						$saldoLinea['interes']+=$interes_periodo+$interes_periodo_anterior;
						$saldoLinea['iva_interes']+=$iva_interes_periodo+$iva_interes_periodo_anterior;
						$saldoPagar['interes']+=$interes_periodo+$interes_periodo_anterior;
						$saldoPagar['iva_interes']+=$iva_interes_periodo+$iva_interes_periodo_anterior;

						//Se suma el importe devengado al cargo
						$resumenPeriodo['interes']['cargos']+=$interes_periodo;
						$resumenPeriodo['iva_interes']['cargos']+=$iva_interes_periodo;
						//Se suma el importe devengado del periodo anterior al saldo anterior
						$resumenPeriodo['interes']['saldo_anterior']+=$interes_periodo_anterior;
						$resumenPeriodo['iva_interes']['saldo_anterior']+=$iva_interes_periodo_anterior;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$interes_periodo+$iva_interes_periodo;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=$interes_periodo;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$iva_interes_periodo;
					}

					//MORA
					//Si lo pagado en parcialidades es mayor a lo generado se agrega lo pagado en parcialidades
					if($mora_periodo<$moraPagado){
						//Se suma el importe pagado en el periodo al saldo linea|saldo pagar
						//Se suma cero al saldo linea|saldo pagar cuando es pagado anterior porque ya esta pagado.
						$saldoLinea['mora']+=$moraPagado+0;
						$saldoLinea['iva_mora']+=$ivaMoraPagado+0;
						$saldoPagar['mora']+=$moraPagado+0;
						$saldoPagar['iva_mora']+=$ivaMoraPagado+0;

						//Se suman los importes pagados en el periodo al cargo
						$resumenPeriodo['mora']['cargos']+=$moraPagado;
						$resumenPeriodo['iva_mora']['cargos']+=$ivaMoraPagado;
						//Se suman cero al cargo cuando es del periodo anterior
						$resumenPeriodo['mora']['saldo_anterior']+=0;
						$resumenPeriodo['iva_mora']['saldo_anterior']+=0;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$moraPagado+$ivaMoraPagado;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=$moraPagado;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaMoraPagado;
					}elseif($mora_periodo>0){
						//Si lo pagado en parcialidades es menor al devengado se toma lo devengado
						//Se suma el importe devengado en el periodo al saldo linea|saldo pagar
						//Se suma el importe devegado en el periodo anterior al saldo linea|saldo pagar
						$saldoLinea['mora']+=$mora_periodo+$mora_periodo_anterior;
						$saldoLinea['iva_mora']+=$iva_mora_periodo+$iva_mora_periodo_anterior;
						$saldoPagar['mora']+=$mora_periodo+$mora_periodo_anterior;
						$saldoPagar['iva_mora']+=$iva_mora_periodo+$iva_mora_periodo_anterior;

						//Se suma el importe devengado al cargo
						$resumenPeriodo['mora']['cargos']+=$mora_periodo;
						$resumenPeriodo['iva_mora']['cargos']+=$iva_mora_periodo;
						//Se suma el importe devengado del periodo anterior al saldo anterior
						$resumenPeriodo['mora']['cargos']+=$mora_periodo_anterior;
						$resumenPeriodo['iva_mora']['cargos']+=$iva_mora_periodo_anterior;

						$detallesPeriodo[$keyDetallePeriodo]['operacion']='vencimiento';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_amortizacion;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Vencimiento {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=$mora_periodo+$iva_mora_periodo;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=$mora_periodo;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$iva_mora_periodo;
					}

					//COMISIONES
					//Si lo pagado en parcialidades es mayor a lo generado se agrega lo pagado en parcialidades
					if($comisiones_periodo<$comisionesPagado){
						//Se suma el importe pagado en el periodo al saldo linea|saldo pagar
						//Se suma cero al saldo linea|saldo pagar cuando es pagado anterior porque ya esta pagado.
						//Nota: Las comisiones no se devengan por parcialidades por lo que siempre sera 0 hasta que la amortización vence
						/*
						$saldoLinea['comisiones']+=$comisionesPagado+0;
						$saldoLinea['iva_comisiones']+=$ivaComisionesPagado+0;
						$saldoPagar['comisiones']+=$comisionesPagado+0;
						$saldoPagar['iva_comisiones']+=$ivaComisionesPagado+0;
						*/
					}elseif($comisiones_periodo>0){
						//Si lo pagado en parcialidades es menor al devengado se toma lo devengado
						//Se suma el importe devengado en el periodo al saldo linea|saldo pagar
						//Se suma el importe devegado en el periodo anterior al saldo linea|saldo pagar
						//Nota: Las comisiones no se devengan por parcialidades por lo que siempre sera 0 hasta que la amortización vence
						/*
						$saldoLinea['comisiones']+=$comisiones_periodo+$comisiones_periodo_anterior;
						$saldoLinea['iva_comisiones']+=$iva_comisiones_periodo+$iva_comisiones_periodo_anterior;
						$saldoPagar['comisiones']+=$comisiones_periodo+$comisiones_periodo_anterior;
						$saldoPagar['iva_comisiones']+=$iva_comisiones_periodo+$iva_comisiones_periodo_anterior;
						*/
					}
				}
				if(isset($detallesPeriodo[$keyDetallePeriodo])){
					//Si se agrego la amortización se suma 1 al key
					$keyDetallePeriodo++;
				}
			}
		}
		//echo "<br>";
		//var_dump(implode(",",$idsDisp));
		//echo "<br>";
		//var_dump(implode(",",$idsDispA));
		//echo "<br>";
		//var_dump(implode(",",$idsDisp1));
		//echo "<br>";
		//var_dump(implode(",",$idsParcialidad));
		//echo "<br>";
		//var_dump(implode(",",$idsParcialidad2));
		//exit();
		//PAGOS
		foreach ($amortizacionesAll as $keyP=>$amortizaciones) {
			foreach ($amortizaciones as $keyA => $amortizacion) {
				if(isset($amortizacion->fecha_pago) && $amortizacion->fecha_pago!=0){
					$fecha_pago=date("Y-m-d",strtotime($amortizacion->fecha_pago));
				}else{
					$fecha_pago=0;
				}

				$importeComisiones=0;
				$importeComisionesIVA=0;
				foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
					$importeComisiones+=$comision["monto"];
					$importeComisionesIVA+=$comision["iva"];
				}

				$parcialidades=ParcialidadesAmortizaciones::model()->findAll(array("condition"=>"id_amortizacion=:amortizacion AND CAST(fecha_pago AS DATE)<=:fecha","order"=>"fecha_pago ASC","params"=>array(':amortizacion'=>$amortizacion->id,':fecha'=>$fecha2)));
				//Si tiene parcialidades se toma en cuenta la parcialidad
				if(count($parcialidades)>0){
					$capitalPagado=0;
					$interesPagado=0;
					$ivaInteresPagado=0;
					$moraPagado=0;
					$ivaMoraPagado=0;
					$comisionesPagado=0;
					$ivaComisionesPagado=0;

					$capitalPagadoAnterior=0;
					$interesPagadoAnterior=0;
					$ivaInteresPagadoAnterior=0;
					$moraPagadoAnterior=0;
					$ivaMoraPagadoAnterior=0;
					$comisionesPagadoAnterior=0;
					$ivaComisionesPagadoAnterior=0;

					foreach ($parcialidades as $parcialidad) {						
						$fecha_pago_parcialidad=date("Y-m-d",strtotime($parcialidad->fecha_pago));
						if(strtotime($fecha_pago_parcialidad)>strtotime($fecha2)){
							//Si la fecha de pago es despues de la fecha2 no se toma en cuenta
							continue;
						}
						//Si la fecha de pago es mayor o igual a la fecha1 la parcialidad es del periodo
						if(strtotime($fecha_pago_parcialidad)>=strtotime($fecha1)){
							$capitalPagado+=$parcialidad->pago_capital;
							if($amortizacion->pago_interes!=0){
								$interesPagado+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
								$ivaInteresPagado+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							}
							if($amortizacion->pago_moratorios>0){
								$moraPagado+=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
								$ivaMoraPagado+=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							}
							if($parcialidad->pago_comisiones>0){
								$comisionesPagado=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
								$ivaComisionesPagado=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
							}
						}else{
							//Si la fecha de pago es menor a la fecha1 la parcialidad es anterior al periodo
							$capitalPagadoAnterior+=$parcialidad->pago_capital;
							if($amortizacion->pago_interes!=0){
								$interesPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->pago_interes-$amortizacion->iva_interes_generado)/$amortizacion->pago_interes);

								$ivaInteresPagadoAnterior+=$parcialidad->pago_interes*(($amortizacion->iva_interes_generado)/$amortizacion->pago_interes);
							}
							if($amortizacion->pago_moratorios>0){
								$moraPagadoAnterior+=$parcialidad->pago_moratorios*(($amortizacion->pago_moratorios-$amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);

								$ivaMoraPagadoAnterior+=$parcialidad->pago_moratorios*(($amortizacion->iva_moratorios)/$amortizacion->pago_moratorios);
							}
							if($parcialidad->pago_comisiones>0){
								$comisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
								$ivaComisionesPagadoAnterior+=$parcialidad->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
							}
						}
						$verificar_cap= Operaciones::model()->find("referencia_operacion='".$parcialidad->referencia_operacion."'");
					
						if($verificar_cap->id_instrumento_monetario0->descripcion=="CAPITALIZACION"){
							var_dump($verificar_cap->id_instrumento_monetario0->descripcion); exit;

							$saldoLinea['interes_pagado_cap']+= $interesPagado;
							$interesPagado = 0;
							$interesPagadoAnterior = 0;
						}
					}
					//Nota: El capital pagado es de toda la historia y los demas conceptos pagados es del periodo
					//Es un tema que surgio por FORTRADE.
					$saldoLinea['capital_pagado']+=$capitalPagado+$capitalPagadoAnterior;
					$saldoLinea['interes_pagado']+=$interesPagado;
					$saldoLinea['iva_interes_pagado']+=$ivaInteresPagado;
					$saldoLinea['comisiones_pagado']+=$comisionesPagado;
					$saldoLinea['iva_comisiones_pagado']+=$ivaComisionesPagado;
					$saldoLinea['mora_pagado']+=$moraPagado;
					$saldoLinea['iva_mora_pagado']+=$ivaMoraPagado;
					$saldoLinea['iva_pagado']+=$ivaInteresPagado+$ivaMoraPagado;

					//Se resta el capital pagado del saldo de linea|saldo pagar, esto siempre esa asi ya que el capital se toma lo dispuesto
					//y no lo vencido
					$saldoLinea['capital']-=$capitalPagado+$capitalPagadoAnterior;
					$saldoPagar['capital']-=$capitalPagado+$capitalPagadoAnterior;
					//Solo se restan del saldo de linea|saldo pagar las amortizaciones no pagadas
					if(!isset($fecha_pago) || $fecha_pago==0 || strtotime($fecha_pago)>strtotime($fecha2)){
						$saldoLinea['interes']-=$interesPagado+$interesPagadoAnterior;
						$saldoLinea['iva_interes']-=$ivaInteresPagado+$ivaInteresPagadoAnterior;
						$saldoLinea['mora']-=$moraPagado+$moraPagadoAnterior;
						$saldoLinea['iva_mora']-=$ivaMoraPagado+$ivaMoraPagadoAnterior;

						$saldoPagar['interes']-=$interesPagado+$interesPagadoAnterior;
						$saldoPagar['iva_interes']-=$ivaInteresPagado+$ivaInteresPagadoAnterior;
						$saldoPagar['mora']-=$moraPagado+$moraPagadoAnterior;
						$saldoPagar['iva_mora']-=$ivaMoraPagado+$ivaMoraPagadoAnterior;

						//Para el caso de las comisiones es necesario que la fecha de vencimiento se encuentre en el periodo para que no de negativos al pagar antes.
						/*
						     Vencimiento ------------------------------|-----|--------
						                                               VA    PA
						        Comision -------|----------------------|--------------
						                        PC                     VC
						Estado de Cuenta -------------|-----------|-------------------
						                              I           F
						*/
						if(strtotime($amortizacion->fecha_amortizacion)<=strtotime($fecha2)){
							$saldoLinea['comisiones']-=$comisionesPagado+$comisionesPagadoAnterior;
							$saldoLinea['iva_comisiones']-=$ivaComisionesPagado+$ivaComisionesPagadoAnterior;

							$saldoPagar['comisiones']-=$comisionesPagado+$comisionesPagadoAnterior;
							$saldoPagar['iva_comisiones']-=$ivaComisionesPagado+$ivaComisionesPagadoAnterior;
						}
					}

					//Si se paga antes de la fecha1 es parte del saldo anterior
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<strtotime($fecha1)){
						//Se suma el importe de capital al saldo anterior
						$resumenPeriodo['capital']['saldo_anterior']-=$capitalPagadoAnterior;
						//Se suma cero al saldo anterior porque ya esta pagado
						$resumenPeriodo['interes']['saldo_anterior']-=0;//$interesPagadoAnterior;
						$resumenPeriodo['mora']['saldo_anterior']-=0;//$moraPagadoAnterior;
						$resumenPeriodo['iva_interes']['saldo_anterior']-=0;//$ivaInteresPagadoAnterior;
						$resumenPeriodo['iva_mora']['saldo_anterior']-=0;//$ivaMoraPagadoAnterior;
					}elseif(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)>=strtotime($fecha1) && strtotime($fecha_pago)<=strtotime($fecha2)){
						//Si se paga despues de la fecha1 y hasta la fecha2 el pago es parte del periodo
						$resumenPeriodo['capital']['abonos']+=$capitalPagado;
						$resumenPeriodo['interes']['abonos']+=$interesPagado;
						$resumenPeriodo['mora']['abonos']+=$moraPagado;
						$resumenPeriodo['iva_interes']['abonos']+=$ivaInteresPagado;
						$resumenPeriodo['iva_mora']['abonos']+=$ivaMoraPagado;
					}else{
						//Si no se ha pagado es parte del periodo
						$resumenPeriodo['capital']['abonos']+=$capitalPagado;
						$resumenPeriodo['interes']['abonos']+=$interesPagado;
						$resumenPeriodo['mora']['abonos']+=$moraPagado;
						$resumenPeriodo['iva_interes']['abonos']+=$ivaInteresPagado;
						$resumenPeriodo['iva_mora']['abonos']+=$ivaMoraPagado;

						//Se suman los importes al saldo anterior ya que aun no se ha pagado la amortizacion
						$resumenPeriodo['capital']['saldo_anterior']-=$capitalPagadoAnterior;
						$resumenPeriodo['interes']['saldo_anterior']-=$interesPagadoAnterior;
						$resumenPeriodo['mora']['saldo_anterior']-=$moraPagadoAnterior;
						$resumenPeriodo['iva_interes']['saldo_anterior']-=$ivaInteresPagadoAnterior;
						$resumenPeriodo['iva_mora']['saldo_anterior']-=$ivaMoraPagadoAnterior;
					}

					foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
						if($comisionesPagado>0){
							$comisionesPeriodo[]=array(
								'fecha'=>$parcialidad->fecha_pago,
								'concepto'=>"Parcialidad ".$comision['comision'],
								'monto'=>$comision['monto']*(($comisionesPagado)/($importeComisiones)),
								'iva'=>$comision['iva']*(($comisionesPagado)/($importeComisiones)),
								'moneda'=>'MXN',
							);
						}
						$amortizacion->iva_comisiones+=$comision['iva'];
					}

					if($capitalPagado+$interesPagado+$comisionesPagado+$moraPagado+$ivaInteresPagado+$ivaMoraPagado>0.01){
						$detallesPeriodo[$keyDetallePeriodo]['operacion']='pago';
						$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
						$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
						$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
						$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
						$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
						$detallesPeriodo[$keyDetallePeriodo]['fecha']=$parcialidad->fecha_pago;
						$detallesPeriodo[$keyDetallePeriodo]['concepto']="Parcialidad {$amortizacion->numero_amortizacion}";
						$detallesPeriodo[$keyDetallePeriodo]['cargo']+=0;
						$detallesPeriodo[$keyDetallePeriodo]['abono']+=$capitalPagado+$interesPagado+$comisionesPagado+$moraPagado+$ivaInteresPagado+$ivaMoraPagado;
						$detallesPeriodo[$keyDetallePeriodo]['capital']+=$capitalPagado;
						$detallesPeriodo[$keyDetallePeriodo]['interes']+=$interesPagado;
						$detallesPeriodo[$keyDetallePeriodo]['mora']+=$moraPagado;
						$detallesPeriodo[$keyDetallePeriodo]['iva']+=$ivaInteresPagado+$ivaMoraPagado;
						$detallesPeriodo[$keyDetallePeriodo]['comision']+=$comisionesPagado;
						$detallesPeriodo[$keyDetallePeriodo]['comision_iva']+=$amortizacion->iva_comisiones;

						$keyDetallePeriodo++;
					}


				}else{
					//Si la amortizacion no tiene parcialidades
					//Solo se toman en cuenta los pagos hasta la fecha2
					if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
						//Se resta el capital al saldo de linea de capital
						$saldoLinea['capital']-=$amortizacion->pago_capital;
						//Lo pagado no se agrega al saldo de linea
						if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
							$saldoLinea['interes']-=0;
							$saldoLinea['iva_interes']-=0;
							$saldoLinea['comisiones']-=0;
							$saldoLinea['iva_comisiones']-=0;
							$saldoLinea['mora']-=0;
							$saldoLinea['iva_mora']-=0;
						}

						//Lo pagado se agrega dentro de los pagados del saldo de linea
						$saldoLinea['capital_pagado']+=$amortizacion->pago_capital;
						$verificar_cap= Operaciones::model()->find("referencia_operacion='".$amortizacion->referencia_operacion."'");
						if($verificar_cap->id_instrumento_monetario0->descripcion=="CAPITALIZACION"){
							$saldoLinea['interes_pagado_cap']+= $amortizacion->pago_interes-$amortizacion->iva_interes_generado;
							$saldoLinea['interes_pagado']+= 0;
							$saldoLinea['iva_interes_pagado']+= 0;
						}else{
							$saldoLinea['interes_pagado']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
							$saldoLinea['iva_interes_pagado']+=$amortizacion->iva_interes_generado;
						}						
						$saldoLinea['comisiones_pagado']+=$amortizacion->pago_comisiones*(1-$amortizacion->factor_iva_comisiones);
						$saldoLinea['iva_comisiones_pagado']+=$amortizacion->pago_comisiones*($amortizacion->factor_iva_comisiones);
						$saldoLinea['mora_pagado']+=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
						$saldoLinea['iva_mora_pagado']+=$amortizacion->iva_moratorios;
						$saldoLinea['iva_pagado']+=$amortizacion->iva_interes_generado+$amortizacion->iva_moratorios+$amortizacion->pago_comisiones*($amortizacion->factor_iva_comisiones);												
						//Se resta el capital al saldo a pagar de capital
						$saldoPagar['capital']-=$amortizacion->pago_capital;
						//Lo pagado no se agrega al saldo a pagar
						if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)<=strtotime($fecha2)){
							$saldoPagar['interes']-=0;
							$saldoPagar['iva_interes']-=0;
							$saldoPagar['comisiones']-=0;
							$saldoPagar['iva_comisiones']-=0;
							$saldoPagar['mora']-=0;
							$saldoPagar['iva_mora']-=0;
						}

						if($amortizacion->pago_comisiones>0){
							$comisionesPagado=$amortizacion->pago_comisiones*($importeComisiones/($importeComisiones+$importeComisionesIVA));
							$ivaComisionesPagado=$amortizacion->pago_comisiones*($importeComisionesIVA/($importeComisiones+$importeComisionesIVA));
						}

						//Solo se agregan los pagos del periodo a los abonos del resumen del periodo
						if(isset($fecha_pago) && $fecha_pago!=0 && strtotime($fecha_pago)>=strtotime($fecha1)){
							$resumenPeriodo['capital']['abonos']+=$amortizacion->pago_capital;
							$resumenPeriodo['interes']['abonos']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
							$resumenPeriodo['mora']['abonos']+=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
							$resumenPeriodo['iva_interes']['abonos']+=$amortizacion->iva_interes_generado;
							$resumenPeriodo['iva_mora']['abonos']+=$amortizacion->iva_moratorios;

							//Si la amortizacion se paga en el periodo tambien se agregan las comisiones
							foreach ($infoComisiones[$amortizacion->id] as $keyC => $comision) {
								if($comisionesPagado>0){
									$comisionesPeriodo[]=array(
										'fecha'=>$amortizacion->fecha_pago,
										'concepto'=>"Pago ".$comision['comision'],
										'monto'=>$comision['monto'],
										'iva'=>$comision['iva'],
										'moneda'=>'MXN',
									);
								}
								$amortizacion->iva_comisiones+=$comision['iva'];
							}

							$detallesPeriodo[$keyDetallePeriodo]['operacion']='pago';
							$detallesPeriodo[$keyDetallePeriodo]['solicitud']=$model->id;
							$detallesPeriodo[$keyDetallePeriodo]['disposicion']=$amortizacion->id_disposicion;
							$detallesPeriodo[$keyDetallePeriodo]['clave_disposicion']=($keyP==0?"S_".$model->clave:"D_".$amortizacion->id_disposicion0->clave);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_disposicion']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_vencimiento']=($keyP==0?$model->fecha_disposicion:$amortizacion->id_disposicion0->fecha);
							$detallesPeriodo[$keyDetallePeriodo]['fecha_ultima_amortizacion']=($keyP==0?$model->fecha_ultimo_vencimiento:$amortizacion->id_disposicion0->fecha_ultimo_vencimiento);
							$detallesPeriodo[$keyDetallePeriodo]['plazo']=($keyP==0?$model->plazo_autorizado:$amortizacion->id_disposicion0->plazo);
							$detallesPeriodo[$keyDetallePeriodo]['fecha']=$amortizacion->fecha_pago;
							$detallesPeriodo[$keyDetallePeriodo]['concepto']="Pago {$amortizacion->numero_amortizacion}";
							$detallesPeriodo[$keyDetallePeriodo]['cargo']+=0;
							$detallesPeriodo[$keyDetallePeriodo]['abono']+=$amortizacion->pago_capital+$amortizacion->pago_interes+$amortizacion->pago_comisiones+$amortizacion->pago_moratorios;
							$detallesPeriodo[$keyDetallePeriodo]['capital']+=$amortizacion->pago_capital;
							$detallesPeriodo[$keyDetallePeriodo]['interes']+=$amortizacion->pago_interes-$amortizacion->iva_interes_generado;
							$detallesPeriodo[$keyDetallePeriodo]['mora']+=$amortizacion->pago_moratorios-$amortizacion->iva_moratorios;
							$detallesPeriodo[$keyDetallePeriodo]['iva']+=$amortizacion->iva_interes_generado+$amortizacion->iva_moratorios;
							$detallesPeriodo[$keyDetallePeriodo]['comision']+=$amortizacion->pago_comisiones-$amortizacion->iva_comisiones;
							$detallesPeriodo[$keyDetallePeriodo]['comision_iva']+=$amortizacion->iva_comisiones;

							$keyDetallePeriodo++;
						}else{
							//Se resta el importe de capital cuando el pago es del periodo anterior
							$resumenPeriodo['capital']['saldo_anterior']-=$amortizacion->pago_capital;
							//Se resta cero cuando el pago es del periodo anterior
							$resumenPeriodo['interes']['saldo_anterior']-=0;
							$resumenPeriodo['mora']['saldo_anterior']-=0;
							$resumenPeriodo['iva_interes']['saldo_anterior']-=0;
							$resumenPeriodo['iva_mora']['saldo_anterior']-=0;
						}
					}
				}
			}
		}
		//exit();

		$data=array(
			'saldo_linea'=>$saldoLinea,
			'saldo_pagar'=>$saldoPagar,
			'resumen_periodo'=>$resumenPeriodo,
			'comisiones_periodo'=>$comisionesPeriodo,
			'detalles_periodo'=>$detallesPeriodo,
		);

		return $data;
	}
	///////////////////////////////////////////
	//////////////CONSULTA INTL13 BURO DE CRÉDITO PF
	//////////////////////////////////////////
	public function getArchivoConsultaBuro(){
		//Nota para el buen uso de esta función, cuando la solicitud es de grupo solidario, se debe ajustar la solicitud con los datos del cliente que se quiere consultar
		//el monto, el cliente, y otros campos que apliquen
		$empresa=Empresa::model()->find();
		$consulta="";
		//Encabezado
		$consulta.="INTL";//Segmento
		$consulta.="14";//Version
		$consulta.=str_pad("",25," ",STR_PAD_LEFT);//Referencia de consulta
		$consulta.="501";//Producto de Buro
		$consulta.="MX";//Pais
		$consulta.="0000";//Reservado
		$consulta.=str_pad($empresa->nombre_usuario_buro,10," ",STR_PAD_LEFT);//Clave de Usuario
		$consulta.=str_pad($empresa->clave_buro,8," ",STR_PAD_LEFT);//Clave de Usuario
		if(isset($this->id_grupo_cliente)){
			$consulta.="J";//Tipo de Responsabilidad
		}else{
			$consulta.="I";//Tipo de Responsabilidad
		}
		$consulta.="  ";//Tipo de Contrato o Producto
		$consulta.="MX";//Moneda
		$consulta.="000000000";//Importe
		$consulta.="SP";//Idioma
		$consulta.="03";//Tipo Salida
		$consulta.=" ";//Tamaño del bloque del registro de respuesta
		$consulta.="    ";//Identificacion de la impresora
		$consulta.="0000000";//Reservado

		//Cliente
		$aux=substr($this->id_cliente0->id_pld_cliente0->apellido_paterno,0,26);
		$consulta.="PN".strlen($aux).$aux;//Apellido Paterno
		$aux=substr($this->id_cliente0->id_pld_cliente0->apellido_materno,0,26);
		$consulta.="00".strlen($aux).$aux;//Apellido Paterno
		//$consulta.="01".strlen($aux).$aux;//Apellido Adicional
		$aux=substr($this->id_cliente0->nombre,0,26);
		$consulta.="02".strlen($aux).$aux;//Nombre
		if(isset($this->id_cliente0->nombre2) && strlen($this->id_cliente0->nombre2)>=3){
			$aux=substr($this->id_cliente0->nombre2,0,26);
			$consulta.="03".strlen($aux).$aux;//Segundo Nombre
		}
		if(isset($this->id_cliente0->fecha_nacimiento)){
			$consulta.="04".strlen($this->id_cliente0->fecha_nacimiento).$this->id_cliente0->fecha_nacimiento;//Fecha de nacimiento
		}
		if(isset($this->id_cliente0->rfc)){
			$consulta.="05".strlen($this->id_cliente0->rfc).$this->id_cliente0->rfc;//RFC
		}
		//$consulta.="06".strlen("Prefijo")."Prefijo";//Prefijo personal o profesional
		//$consulta.="07".strlen("Sufijo")."Sufijo";//Sufijo personal
		if($this->nacionalidadClienteBF!=""){
			$consulta.="08".strlen($this->nacionalidadClienteBF).$this->nacionalidadClienteBF;//Nacionalidad
		}
		//$consulta.="09".strlen("Tipo Residencia")."Tipo de Residencia";//Tipo de Residencia
		//$consulta.="10".strlen("Numero Licencia")."Numero Licencia";//Numero de Licencia de Conducir
		if($this->estadoCivilClienteBF!=""){
			$consulta.="11".strlen($this->estadoCivilClienteBF).$this->estadoCivilClienteBF;//Numero de Licencia de Conducir
		}
		if($this->sexoClienteBF!=""){
			$consulta.="12".strlen($this->sexoClienteBF).$this->sexoClienteBF;//Numero de Licencia de Conducir
		}
		//$consulta.="13".strlen("Numero Cedula")."Numero Cedula";//Numero de Cedula Profesional
		//$consulta.="14".strlen("IFE")."IFE";//IFE
		if($this->id_cliente0->curp!=""){
			$consulta.="15".strlen($this->id_cliente0->curp).$this->id_cliente0->curp;//CURP
		}
		if($this->id_cliente0->pais!=""){
			$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
			if(!is_null($pais)){
				$consulta.="16".strlen($pais->iso).$pais->iso;//CURP
			}
		}
		//$consulta.="17".strlen("Numero Dependientes")."Numero Dependientes";//Numero de Dependientes
		//$consulta.="18".strlen("Edades Dependientes")."Edades Dependientes";//Edades de los Dependientes

		//Direccion del Cliente
		$consulta.="PA".strlen($this->direccion1ClienteBF).$this->direccion1ClienteBF;//Primer Linea de Direccion
		if($this->direccion2ClienteBF!=""){
			$consulta.="00".strlen($this->direccion2ClienteBF).$this->direccion2ClienteBF;//Segunda Linea de Direccion
		}
		if($this->coloniaClienteBF!=""){
			$consulta.="01".strlen($this->coloniaClienteBF).$this->coloniaClienteBF;//Colonia del Cliente
		}
		$consulta.="02".strlen($this->delegacionMunicipioClienteBF).$this->delegacionMunicipioClienteBF;//Delegacion o Municipio del Cliente
		$consulta.="03".strlen($this->ciudadClienteBF).$this->ciudadClienteBF;//Ciudad del Cliente
		$consulta.="04".strlen($this->estadoClienteBF).$this->estadoClienteBF;//Estado del Cliente
		$consulta.="05".strlen($this->codigoPostalClienteBF).$this->codigoPostalClienteBF;//Codigo Postal del Cliente
		//$consulta.="06".strlen("Fecha Residencia")."Fecha Residencia";//Fecha de Residencia del Cliente
		if($this->telefonoClienteBF!=""){
			$consulta.="07".strlen($this->telefonoClienteBF).$this->telefonoClienteBF;//Telefono del Cliente
		}
		//$consulta.="08".strlen("Extension Telefonica")."Extension Telefonica";//Estensión Telefonica
		//$consulta.="09".strlen("Numero FAX")."Numero FAX";//Número de FAX del Cliente
		//$consulta.="10".strlen("Tipo Domicilio")."Tipo Domicilio";//Tipo de Domicilio del Cliente
		//$consulta.="11".strlen("Indicador Especial Domicilio")."Indicador Especial Domicilio";//Indicador Especial del Domicilio del Cliente
		$consulta.="13".strlen($this->direccionOrigenClienteBF).$this->direccionOrigenClienteBF;//Origen del Domicilio (pais) del Cliente

		//Empleo del Cliente
		if($this->empresaEmpleoBF!=""){
			$consulta.="PE".strlen($this->empresaEmpleoBF).$this->empresaEmpleoBF;//Nombre o Razon Social del Empleador
			if($this->direccion1EmpleoBF!=""){
				$consulta.="00".strlen($this->direccion1EmpleoBF).$this->direccion1EmpleoBF;//Primer Linea de Direccion del Empleador
			}
			if($this->direccion2EmpleoBF!=""){
				$consulta.="01".strlen($this->direccion2EmpleoBF).$this->direccion2EmpleoBF;//Segunda Linea de Direccion del Empleador
			}
			if($this->coloniaEmpleoBF!=""){
				$consulta.="02".strlen($this->coloniaEmpleoBF).$this->coloniaEmpleoBF;//Colonia del Empleador
			}
			if($this->delegacionMunicipioEmpleoBF!=""){
				$consulta.="03".strlen($this->delegacionMunicipioEmpleoBF).$this->delegacionMunicipioEmpleoBF;//Delegaciob o Municipio del Empleador
			}
			if($this->ciudadEmpleoBF!=""){
				$consulta.="04".strlen($this->ciudadEmpleoBF).$this->ciudadEmpleoBF;//Ciudad del Empleador
			}
			if($this->estadoEmpleoBF!=""){
				$consulta.="05".strlen($this->estadoEmpleoBF).$this->estadoEmpleoBF;//Estado del Empleador
			}
			if($this->codigoPostalEmpleoBF!=""){
				$consulta.="06".strlen($this->codigoPostalEmpleoBF).$this->codigoPostalEmpleoBF;//Codigo Postal del Empleador
			}
			if($this->telefonoEmpleoBF!=""){
				$consulta.="07".strlen($this->telefonoEmpleoBF).$this->telefonoEmpleoBF;//Telefono del Empleador
			}
			//$consulta.="08".strlen("Extension")."Extensión";//Extension del Empleador
			//$consulta.="09".strlen("FAX")."FAX";//FAX del Empleador
			if(isset($this->id_cliente0->id_empleo0->puesto) && $this->id_cliente0->id_empleo0->puesto!=""){
				$consulta.="10".strlen($this->id_cliente0->id_empleo0->puesto).$this->id_cliente0->id_empleo0->puesto;//Puesto con el Empleador
			}
			if(isset($this->id_cliente0->id_empleo0->fecha_contratacion) && $this->id_cliente0->id_empleo0->fecha_contratacion!="" && $this->id_cliente0->id_empleo0->fecha_contratacion!=0){
				$consulta.="11"."08".date("dmY",strtotime($this->id_cliente0->id_empleo0->fecha_contratacion));//Fecha de Contratacion con el Empleador
			}
			//$consulta.="12".strlen("Clave Moneda Pago Sueldo")."Clave Moneda Pago Sueldo";//Clave de Moneda del Pago por Empleador
			if($this->salarioEmpleoBF!=""){
				$consulta.="13".strlen($this->salarioEmpleoBF).$this->salarioEmpleoBF;//Salario con Empleador
			}
			if(isset($this->id_cliente0->id_empleo0->periodo_pago) && $this->id_cliente0->id_empleo0->periodo_pago!=""){
				$consulta.="14".strlen($this->id_cliente0->id_empleo0->periodo_pago).$this->id_cliente0->id_empleo0->periodo_pago;//Periodo de Pago con Empleador
			}
			//$consulta.="15".strlen("Numero Empleado")."Numero Empleado";//Numero de Empleado
			if(isset($this->id_cliente0->id_empleo0->fecha_ultimo_dia) && $this->id_cliente0->id_empleo0->fecha_ultimo_dia!="" && $this->id_cliente0->id_empleo0->fecha_ultimo_dia!=0){
				$consulta.="16"."08".date("dmY",strtotime($this->id_cliente0->id_empleo0->fecha_ultimo_dia));//Fecha Ultimo Día con Empleador
			}
			$consulta.="17".strlen($this->direccionOrigenEmpleoBF).$this->direccionOrigenEmpleoBF;//Dirección de Origen (pais) de Empleador
		}

		//Referencias Crediticias
		//$consulta.="PI".strlen("Numero Cuenta")."Numero Cuenta";//Numero de Cuenta de la Referencia Crediticia
		//$consulta.="00".strlen("Clave Usuario")."Clave Usuario";//Clave de Usuario de Referencia Crediticia
		//$consulta.="01".strlen("Nombre Usuario")."Nombre Usuario";//Nombre de Usuario de Referencia Crediticia

		//Sintetiza
		//$consulta.="CL".strlen("Plantilla Solicitada")."Plantilla Solicitada";//Plantilla Solicitada de Sintetiza
		//$consulta.="00".strlen("Referencia Operador")."Referencia Operador";//Referencia del Operador en Sintetiza
		//$consulta.="01".strlen("Uso Futuro")."Uso Futuro";//Uso Futuro de Sintetiza
		//$consulta.="02".strlen("Uso Futuro")."Uso Futuro";//Uso Futuro de Sintetiza
		//$consulta.="03".strlen("Uso Futuro")."Uso Futuro";//Uso Futuro de Sintetiza

		//Cierre
		$consulta.="ES"."05".strlen($consulta+7);//Longitud del Registro
		$consulta.="0"."02"."**";//El fin

		//Autenticador
		$variable1=SolicitudesVariables::model()->find("variable=:variable",array(':variable'=>'¿Cuenta con tarjeta de crédito otorgado por un banco?'));
		$variable2=SolicitudesVariables::model()->find("variable=:variable",array(':variable'=>'Tarjeta de Crédito (últimos 4 dígitos)'));
		$variable3=SolicitudesVariables::model()->find("variable=:variable",array(':variable'=>'¿Cuenta con crédito hipotecario otorgado por un banco?'));
		$variable4=SolicitudesVariables::model()->find("variable=:variable",array(':variable'=>'¿Ha ejercido un crédito de auto otorgado por un banco en los últimos 24 meses?'));
		if(!is_null($variable1) && !is_null($variable2) && !is_null($variable3) && !is_null($variable4)){
			$consulta.="AU"."03"."RCN";//Tipo de Reporte
			$consulta.="00"."01"."3";//Tipo de Salida
			$consulta.="01"."25".str_pad("",25," ",STR_PAD_LEFT);//Referencia Operador
			$dato1=SolicitudesDatos::model()->find("id_solicitud_variable=:variable AND id_solicitud=:solicitud",array(':variable'=>$variable1->id,':solicitud'=>$this->id));
			$consulta.="02"."01".$dato1->valor;//Referencia Operador
			$dato2=SolicitudesDatos::model()->find("id_solicitud_variable=:variable AND id_solicitud=:solicitud",array(':variable'=>$variable2->id,':solicitud'=>$this->id));
			$consulta.="02"."01".$dato2->valor;//Referencia Operador
			$dato3=SolicitudesDatos::model()->find("id_solicitud_variable=:variable AND id_solicitud=:solicitud",array(':variable'=>$variable3->id,':solicitud'=>$this->id));
			$consulta.="02"."01".$dato3->valor;//Referencia Operador
			$dato4=SolicitudesDatos::model()->find("id_solicitud_variable=:variable AND id_solicitud=:solicitud",array(':variable'=>$variable2->id,':solicitud'=>$this->id));
			$consulta.="02"."01".$dato4->valor;//Referencia Operador
		}
	}

	public function normalizar($texto){
		$reemplazar=array('#','@','%','.',',','-','"');
		$texto=str_replace($reemplazar, "", $texto);
		return $texto;
	}

    public function getDevengado($interes_devengado=0){
        $devengado=0;
        $devengadoOpc=0;
        if(isset(Yii::app()->session['reporteDevengadosFechas'])){
            $fechas=Yii::app()->session['reporteDevengadosFechas'];
            $fecha1=$fechas["fecha1"];
            $fecha2=$fechas["fecha2"];
            $amortizaciones=Amortizaciones::model()->getAmortizaciones($this);
            foreach ($amortizaciones as $amortizacion){
                if($amortizacion["fecha_amortizacion"]>=$fecha1 && $amortizacion["fecha_amortizacion"]<=$fecha2 && $amortizacion["numero_amortizacion"]=="*"){
                    $devengado=$devengado+$amortizacion["interes_generado"];
                }
                if($amortizacion["fecha_amortizacion"]>=$fecha1 && $amortizacion["fecha_amortizacion"]<=$fecha2 && $amortizacion["numero_amortizacion"]!="*"){
                    $devengadoOpc=$devengadoOpc+$amortizacion["interes_generado"];
                }
            }
        }else{
            $devengado=$interes_devengado;
        }
        if($devengado==0){
            $devengado=$interes_devengado;
            if($devengado==0 && $devengadoOpc>0){
                $devengado=$devengadoOpc;
            }
        }
        return $devengado;
    }

	public function getReporteCDCF($info,$fecha=null){
		if(is_null($fecha)){
			$fecha=date("Y-m-d",strtotime("+1 MONTH -1 DAY",strtotime(date("Y-m-01"))));
		}
		$empresa=Empresa::model()->find();
		$data=array(
			'encabezado'=>array(
				'clave_otorgante'=> $this-> atributosCDCPF('ClaveOtorgante',$empresa->clave_otorgante),
				'nombre_otorgante'=> $this-> atributosCDCPF('NombreOtorgante',$empresa->nombre_otorgante),
				'identificador_de_medio'=> $this-> atributosCDCPF('IdentificadorDeMedio',1),

				'fecha_extraccion'=>date("Ymd",strtotime($fecha)),
				'nota_otorgante'=>"",
				'version'=>"4",
			),
		);
		$fecha_inicio=date("Y-m-d H:i:s",strtotime ( '-1 month',strtotime ($fecha)));
		$fecha_fin=date("Y-m-d H:i:s",strtotime($fecha));
		$key=0;

		if(isset($this->id_grupo_cliente) && $this->id_grupo_cliente!=0){
			$solidarios=GruposSolidarios::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$this->id));
			foreach ($solidarios as $keyS=>$solidario){
				if($solidario->id_cliente0->tipo_persona=="Persona Fisica"){
					//checamos si el integrante del grupo tiene amortizacion
					$amortizaciones_integrante=Amortizaciones::model()->findAll('id_grupo_solidario = :id_grupo_solidario',array(':id_grupo_solidario'=>$solidario->id));
					//fechaextraccion


					if(!empty($amortizaciones_integrante)){
						//checamos si su saldo insoluto del integante

						if($this-> atributosCDCPF('SaldoActual',$info[$this->id][$solidario->id]['saldo_actual']) == 0){
							$entra=1;
							if(empty($info[$this->id][$solidario->id]['fecha_cierre_credito'])){
								$entra=1.1;
								//preguntamos si estamos en rango de la fecha
								//fecha del ultimopago
								if(($info[$this->id][$solidario->id]['fecha_ultimo_pago'] >= $fecha_inicio) && ($info[$this->id][$solidario->id]['fecha_ultimo_pago'] <= $fecha_fin)) {
									$sentencia=1;
									$entra="SI";
									$entra="1.1.1";
								} else {
									$sentencia=0;
									$entra="1.1.2";
									$entra="NO";
								}
								//
							}else{
								if(($info[$this->id][$solidario->id]['fecha_cierre_credito'] >= $fecha_inicio) && ($info[$this->id][$solidario->id]['fecha_cierre_credito'] <= $fecha_fin)) {
									$sentencia=1;
									$entra="SI";
									$entra="1.1.1";
								} else {
									$sentencia=0;
									$entra="1.1.2";
									$entra="NO";
								}
							}
						//aquiterminaesto
						}else{
							$entra=2;
							$sentencia=1;
						}

						if($sentencia==1){

								//Clientes
								$data['cliente'][$key]['id']=$solidario->id_cliente;//Campo auxiliar, no pertenece al reporte
								$data['cliente'][$key]['nota_otorgante']=$solidario->id_solicitud0->id_grupo_cliente0->nombre;//Campo auxiliar, no pertenece al reporte
								$data['cliente'][$key]['apellido_paterno']= $this-> atributosCDCPF('ApellidoPaterno',$solidario->id_cliente0->id_pld_cliente0->apellido_paterno);

								//$data['cliente'][$key]['nota_otorgante']=$info[$this->id][$solidario->id]['fecha_cierre_credito']."__".$entra."__".$fecha_inicio."___".$fecha_fin."___".$this-> atributosCDCPF('SaldoActual',$info[$this->id][$solidario->id]['saldo_actual'])."___".$info[$this->id][$solidario->id]['fecha_ultimo_pago'];

								$data['cliente'][$key]['apellido_materno']= $this-> atributosCDCPF('ApellidoMaterno',$solidario->id_cliente0->id_pld_cliente0->apellido_materno);
								if(!isset($data['cliente'][$key]['apellido_materno']) || $data['cliente'][$key]['apellido_materno']==""){
									$data['cliente'][$key]['apellido_materno']="NO PROPORCIONADO";
								}
								$data['cliente'][$key]['apellido_adicional']='';
								$data['cliente'][$key]['nombres']=$this-> atributosCDCPF('Nombres',$solidario->id_cliente0->nombre." ".$solidario->id_cliente0->nombre2);
								$data['cliente'][$key]['fecha_nacimiento']='';
								if(isset($solidario->id_cliente0->fecha_nacimiento) && $solidario->id_cliente0->fecha_nacimiento!=0)
									$data['cliente'][$key]['fecha_nacimiento']=date("Ymd",strtotime($solidario->id_cliente0->fecha_nacimiento));

								$data['cliente'][$key]['rfc']= $this-> atributosCDCPF('RFC',$solidario->id_cliente0->rfc);
								$data['cliente'][$key]['curp']= $this-> atributosCDCPF('CURP',$solidario->id_cliente0->curp);
								$data['cliente'][$key]['numero_seguridad_social']= $this-> atributosCDCPF('NumeroSeguridadSocial','');
								$data['cliente'][$key]['nacionalidad']='';
								if($solidario->id_cliente0->id_pld_cliente0->nacionalidad=="Mexicano"){
									$data['cliente'][$key]['nacionalidad']='MX';
								}else{
									$pais=Paises::model()->find(array(
										'condition'=>"(pais=:pais AND :pais<>'') OR (pais=:pais2 AND :pais='' AND :pais2<>'')",
										'order'=>'FIELD(pais,:pais,:pais2)',
										'params'=>array(':pais'=>$solidario->id_cliente0->id_pld_cliente0->pais_nacimiento,':pais2'=>$solidario->id_cliente0->pais)
									));
									if(!is_null($pais)){
										$data['cliente'][$key]['nacionalidad']= $this-> atributosCDCPF('Nacionalidad',$pais->iso);
									}
								}
								$data['cliente'][$key]['residencia']= $this-> atributosCDCPF('Residencia','');
								$data['cliente'][$key]['numero_licencia_conducir']= $this-> atributosCDCPF('NumeroLicenciaConducir','');
								$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil','');
								if($solidario->id_cliente0->estado_civil=="Soltero"){
									$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"S");
								}elseif($solidario->id_cliente0->estado_civil=="Union Libre"){
									$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"L");
								}elseif($solidario->id_cliente0->estado_civil=="Casado"){
									$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"C");
								}elseif($solidario->id_cliente0->estado_civil=="Divorciado"){
									$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"D");
								}elseif($solidario->id_cliente0->estado_civil=="Viudo"){
									$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"V");
								}
								$data['cliente'][$key]['sexo']='';
								if(isset($solidario->id_cliente0->id_pld_cliente0->genero) && $solidario->id_cliente0->id_pld_cliente0->genero=="M"){
									$data['cliente'][$key]['sexo']= $this-> atributosCDCPF('Sexo',"F");
								}elseif(isset($solidario->id_cliente0->id_pld_cliente0->genero) && $solidario->id_cliente0->id_pld_cliente0->genero=="H"){
									$data['cliente'][$key]['sexo']= $this-> atributosCDCPF('Sexo',"M");
								}
								$data['cliente'][$key]['clave_elector_ife']= $this-> atributosCDCPF('ClaveElectorIFE','');
								$data['cliente'][$key]['numero_dependientes']= $this-> atributosCDCPF('NumeroDependientes','');
								$data['cliente'][$key]['fecha_defuncion']='';
								$data['cliente'][$key]['indicador_de_defuncion']= $this-> atributosCDCPF('IndicadorDefuncion','');
								$data['cliente'][$key]['tipo_persona']='PF';
								$data['cliente'][$key]['direccion']= $this-> atributosCDCPF('Direccion',$solidario->id_cliente0->calle." ".$solidario->id_cliente0->numero_exterior);
								$data['cliente'][$key]['colonia_poblacion']= $this-> atributosCDCPF('ColoniaPoblacion',$solidario->id_cliente0->colonia);
								$data['cliente'][$key]['delegacion_municipio']= $this-> atributosCDCPF('DelegacionMunicipio',$solidario->id_cliente0->municipio);
								$data['cliente'][$key]['ciudad']= $this-> atributosCDCPF('Ciudad',$solidario->id_cliente0->localidad);
								$data['cliente'][$key]['estado']='';
								if(isset($solidario->id_cliente0->estado) && $solidario->id_cliente0->estado!=""){
									$estado=Estados::model()->find("estado=:estado",array(':estado'=>$solidario->id_cliente0->estado));
									if(!is_null($estado)){
										$data['cliente'][$key]['estado']= $this-> atributosCDCPF('Estado',$estado->clave);
									}
								}
								$data['cliente'][$key]['codigo_postal']= $this-> atributosCDCPF('CP',$solidario->id_cliente0->codigo_postal);
								$data['cliente'][$key]['fecha_residencia']='';
								$data['cliente'][$key]['telefono']= $this-> atributosCDCPF('NumeroTelefono',$solidario->id_cliente0->telefono);
								$data['cliente'][$key]['tipo_domicilio']= $this-> atributosCDCPF('TipoDomicilio','');
								$data['cliente'][$key]['tipo_asentamiento']= $this-> atributosCDCPF('TipoAsentamiento','');
								//paises
								$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
								$data['cliente'][$key]['origen_domicilio']= $this-> atributosCDCPF('OrigenDomicilio',$pais['iso']);

								//Empleo
								if(isset($solidario->id_cliente0->id_empleo0)){
									$data['cliente'][$key]['empleo']['empresa']= $this-> atributosCDCPF('NombreEmpresa',$solidario->id_cliente0->id_empleo0->empresa);
									$data['cliente'][$key]['empleo']['direccion']= $this-> atributosCDCPF('Direccion',$solidario->id_cliente0->id_empleo0->direccion);
									$data['cliente'][$key]['empleo']['colonia_poblacion']= $this-> atributosCDCPF('ColoniaPoblacion',$solidario->id_cliente0->id_empleo0->colonia);
									$data['cliente'][$key]['empleo']['delegacion_municipio']= $this-> atributosCDCPF('DelegacionMunicipio',$solidario->id_cliente0->id_empleo0->municipio);
									$data['cliente'][$key]['empleo']['ciudad']= $this-> atributosCDCPF('Ciudad',$solidario->id_cliente0->id_empleo0->ciudad);
									$data['cliente'][$key]['empleo']['estado']='';
									if(isset($solidario->id_cliente0->id_empleo0->estado) && $solidario->id_cliente0->id_empleo0->estado!=""){
										$estado=Estados::model()->find("estado=:estado",array(':estado'=>$solidario->id_cliente0->id_empleo0->estado));
										if(!is_null($estado)){
											$data['cliente'][$key]['empleo']['estado']= $this-> atributosCDCPF('Estado',$estado->clave);
										}
									}
									$data['cliente'][$key]['empleo']['codigo_postal']= $this-> atributosCDCPF('CP',$solidario->id_cliente0->id_empleo0->codigo_postal);
									$data['cliente'][$key]['empleo']['telefono_empresa']= $this-> atributosCDCPF('NumeroTelefono',$solidario->id_cliente0->id_empleo0->telefono);
									$data['cliente'][$key]['empleo']['extension']= $this-> atributosCDCPF('Extension',$solidario->id_cliente0->id_empleo0->extension);
									$data['cliente'][$key]['empleo']['fax']= $this-> atributosCDCPF('Fax',$solidario->id_cliente0->id_empleo0->fax);
									$data['cliente'][$key]['empleo']['puesto']= $this-> atributosCDCPF('Puesto',$solidario->id_cliente0->id_empleo0->puesto);
									$data['cliente'][$key]['empleo']['fecha_contratacion']='';
									if(isset($solidario->id_cliente0->id_empleo0->fecha_contratacion) && $solidario->id_cliente0->id_empleo0->fecha_contratacion!=0){
										$data['cliente'][$key]['empleo']['fecha_contratacion']=date("Ymd",strtotime($solidario->id_cliente0->id_empleo0->fecha_contratacion));
									}
									$data['cliente'][$key]['empleo']['moneda_salario']= $this-> atributosCDCPF('ClaveMoneda','');
									$data['cliente'][$key]['empleo']['salario_mensual']= $this-> atributosCDCPF('SalarioMensual','');
									$data['cliente'][$key]['empleo']['fecha_ultimo_dia']='';
									if(isset($solidario->id_cliente0->id_empleo0->fecha_ultimo_dia) && $solidario->id_cliente0->id_empleo0->fecha_ultimo_dia!=0){
										$data['cliente'][$key]['empleo']['fecha_ultimo_dia']=date("Ymd",strtotime($solidario->id_cliente0->id_empleo0->fecha_ultimo_dia));
									}
									$data['cliente'][$key]['empleo']['fecha_verificacion']='';
									if(isset($solidario->id_cliente0->id_empleo0->fecha_verificacion) && $solidario->id_cliente0->id_empleo0->fecha_verificacion!=0){
										$data['cliente'][$key]['empleo']['fecha_verificacion']=date("Ymd",strtotime($solidario->id_cliente0->id_empleo0->fecha_verificacion));
									}



								}

								//Credito
								$data['cliente'][$key]['credito']['clave_actual_otorgante']= $this-> atributosCDCPF('ClaveActualOtorgante',$empresa->clave_otorgante);
								$data['cliente'][$key]['credito']['nombre_actual_otorgante']= $this-> atributosCDCPF('NombreOtorgante',$empresa->nombre_otorgante);
								$data['cliente'][$key]['credito']['numero_cuenta']= $this-> atributosCDCPF('CuentaActual',$this->contrato."-".chr($keyS+97));//Letra ASCII
								$data['cliente'][$key]['credito']['tipo_responsabilidad_cuenta']= $this-> atributosCDCPF('TipoResponsabilidad','I');
								$data['cliente'][$key]['credito']['tipo_cuenta']= $this-> atributosCDCPF('TipoCuenta',$this->id_producto0->id_tipo_cuenta0->valor);
								$data['cliente'][$key]['credito']['tipo_contrato']= $this-> atributosCDCPF('TipoContrato','GS');
								$data['cliente'][$key]['credito']['moneda']= $this-> atributosCDCPF('ClaveUnidadMonetaria','MX');
								$data['cliente'][$key]['credito']['valor_activo_valuacion']= $this-> atributosCDCPF('ValorActivoValuacion',$info[$this->id][$solidario->id]['valor_activo_valuacion']);
								$data['cliente'][$key]['credito']['numero_pagos']= $this-> atributosCDCPF('NumeroPagos',$this->plazo_autorizado);
								$data['cliente'][$key]['credito']['frecuencia_pagos']= $this-> atributosCDCPF('FrecuenciaPagos',$this->id_tipo_amortizacion0->clave_circulo_credito);
								$data['cliente'][$key]['credito']['monto_pagar']= $this-> atributosCDCPF('MontoPagar',$info[$this->id][$solidario->id]['monto_pagar']);
								$data['cliente'][$key]['credito']['fecha_apertura']=date("Ymd",strtotime($this->fecha_disposicion));
								$data['cliente'][$key]['credito']['fecha_ultimo_pago']='19010101';
								if(isset($info[$this->id][$solidario->id]['fecha_ultimo_pago']) && $info[$this->id][$solidario->id]['fecha_ultimo_pago']!=0){
									$data['cliente'][$key]['credito']['fecha_ultimo_pago']=date("Ymd",strtotime($info[$this->id][$solidario->id]['fecha_ultimo_pago']));
								}
								$data['cliente'][$key]['credito']['fecha_ultima_compra']='';
								if(isset($info[$this->id][$solidario->id]['fecha_ultima_compra']) && $info[$this->id][$solidario->id]['fecha_ultima_compra']!=0){
									$data['cliente'][$key]['credito']['fecha_ultima_compra']=date("Ymd",strtotime($info[$this->id][$solidario->id]['fecha_ultima_compra']));
								}
								$data['cliente'][$key]['credito']['fecha_cierre_credito']='';

								$data['cliente'][$key]['credito']['fecha_corte']=date("Ymd",strtotime($fecha));
								$data['cliente'][$key]['credito']['garantia']= $this-> atributosCDCPF('Garantia','');
								$data['cliente'][$key]['credito']['credito_maximo']= $this-> atributosCDCPF('CreditoMaximo',$info[$this->id][$solidario->id]['credito_maximo']);

								$data['cliente'][$key]['credito']['saldo_actual']= $this-> atributosCDCPF('SaldoActual',$info[$this->id][$solidario->id]['saldo_actual']);
								/*
								if($data['cliente'][$key]['credito']['saldo_actual'] < 0.43637 ){
									$data['cliente'][$key]['credito']['monto_pagar']=0;
								}*/
								/*if($this->id_producto0->id_tipo_cuenta0->valor == "F"  || $this->id_producto0->id_tipo_cuenta0->valor == "H"){
									$data['cliente'][$key]['credito']['saldo_actual']=0;
									$data['cliente'][$key]['credito']['fecha_cierre_credito']="";
								}else{

									if($data['cliente'][$key]['credito']['saldo_actual'] == 0){
										if(isset($info[$this->id][$solidario->id]['fecha_cierre_credito']) && $info[$this->id][$solidario->id]['fecha_cierre_credito']!=0){
										$data['cliente'][$key]['credito']['fecha_cierre_credito']=date("Ymd",strtotime($info[$this->id][$solidario->id]['fecha_cierre_credito']));
										}
									}
								}*/
								//cambranoaqui
								if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
										if(isset($info[$this->id][$solidario->id]['fecha_cierre_credito']) && $info[$this->id][$solidario->id]['fecha_cierre_credito']!=0){
										$data['cliente'][$key]['credito']['fecha_cierre_credito']=date("Ymd",strtotime($info[$this->id][$solidario->id]['fecha_cierre_credito']));
										}else{
											$data['cliente'][$key]['credito']['fecha_cierre_credito']=$data['cliente'][$key]['credito']['fecha_ultimo_pago'];
											$data['cliente'][$key]['credito']['monto_pagar']=0;
										}
								}



								$data['cliente'][$key]['credito']['limite_credito']= $this-> atributosCDCPF('LimiteCredito',$info[$this->id][$solidario->id]['limite_credito']);
								$data['cliente'][$key]['credito']['saldo_vencido']=0;
								if($info[$this->id][$solidario->id]['saldo_vencido']>0){
									$data['cliente'][$key]['credito']['saldo_vencido']= $this-> atributosCDCPF('SaldoVencido',$info[$this->id][$solidario->id]['saldo_vencido']);
								}
								//cambranoaqui2
								if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
									$data['cliente'][$key]['credito']['saldo_vencido']=0;
								}

								$data['cliente'][$key]['credito']['numero_pagos_vencidos']='';
								$data['cliente'][$key]['credito']['numero_pagos_vencidos']= $this-> atributosCDCPF('NumeroPagosVencidos',$info[$this->id][$solidario->id]['numero_pagos_vencidos']);
								$data['cliente'][$key]['credito']['pago_actual']='';
								if($info[$this->id][$solidario->id]['numero_pagos_vencidos']==0){
									$data['cliente'][$key]['credito']['pago_actual']="V";
								}elseif($info[$this->id][$solidario->id]['numero_pagos_vencidos']<84){
									$data['cliente'][$key]['credito']['pago_actual']= $this-> atributosCDCPF('PagoActual',$info[$this->id][$solidario->id]['numero_pagos_vencidos']);
								}else{
									$data['cliente'][$key]['credito']['pago_actual']=84;
								}
								//cambranoaqui3
								if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
									$data['cliente'][$key]['credito']['numero_pagos_vencidos']=0;
								}
								$data['cliente'][$key]['credito']['historico_pagos']= $this-> atributosCDCPF('HistoricoPagos','');
								$data['cliente'][$key]['credito']['clave_prevencion']= $this-> atributosCDCPF('ClavePrevencion','');
								$data['cliente'][$key]['credito']['total_pagos_reportados']= $this-> atributosCDCPF('TotalPagosReportados','');
								$data['cliente'][$key]['credito']['total_pagos_reportados']=$info[$this->id][$solidario->id]['total_pagos_reportados'];
								$data['cliente'][$key]['credito']['clave_anterior_otorgante']= $this-> atributosCDCPF('ClaveAnteriorOtorgante','');
								$data['cliente'][$key]['credito']['nombre_anterior_otorgante']= $this-> atributosCDCPF('NombreAnteriorOtorgante','');
								$data['cliente'][$key]['credito']['numero_cuenta_anterior']= $this-> atributosCDCPF('NumeroCuentaAnterior','');
								$data['cliente'][$key]['credito']['fecha_primer_incumplimiento']='19010101';
								if(isset($info[$this->id][$solidario->id]['fecha_primer_incumplimiento']) && $info[$this->id][$solidario->id]['fecha_primer_incumplimiento']!=0){
									$data['cliente'][$key]['credito']['fecha_primer_incumplimiento']=date("Ymd",strtotime($info[$this->id][$solidario->id]['fecha_primer_incumplimiento']));
								}
								//cambranoaqui4
								if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
									$data['cliente'][$key]['credito']['fecha_primer_incumplimiento']='19010101';
								}

								$data['cliente'][$key]['credito']['saldo_insoluto']= $this-> atributosCDCPF('SaldoInsoluto',$info[$this->id][$solidario->id]['saldo_insoluto']);
								$data['cliente'][$key]['credito']['monto_ultimo_pago']= $this-> atributosCDCPF('MontoUltimoPago',$info[$this->id][$solidario->id]['monto_ultimo_pago']);

								/*
								if(isset($info[$this->id][$solidario->id]['fecha_ingreso_cartera_vencida']) && $info[$this->id][$solidario->id]['fecha_ingreso_cartera_vencida']!=0){
									$data['cliente'][$key]['credito']['fecha_ingreso_cartera_vencida']=date("Ymd",strtotime($info[$this->id][$solidario->id]['fecha_ingreso_cartera_vencida']));
								}
								$data['cliente'][$key]['credito']['monto_correspondiente_interes']= $this-> atributosCDCPF('MontoCorrespondienteIntereses',$info[$this->id][$solidario->id]['monto_correspondiente_interes']);
								//checar
								$data['cliente'][$key]['credito']['forma_pago_actual_intereses']= $this-> atributosCDCPF('FormaPagoActualIntereses',"");

								//$fecha;
								if($data['cliente'][$key]['credito']['saldo_insoluto'] != 0){
									$fecha_ingreso_cartera_vencida = new DateTime($info[$this->id][$solidario->id]['fecha_ingreso_cartera_vencida']);
									$fecha_reporte = new DateTime($fecha);
									$dias_vencimientos = $fecha_ingreso_cartera_vencida->diff($fecha_reporte);
									$data['cliente'][$key]['credito']['dias_vencimiento']= $this-> atributosCDCPF('DiasVencimiento',$dias_vencimientos->format('%a'));
								}else{
									$data['cliente'][$key]['credito']['dias_vencimiento']=0;
								}*/


								//cambranoaqui6
								if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
									$data['cliente'][$key]['credito']['fecha_ingreso_cartera_vencida']="";
									$data['cliente'][$key]['credito']['forma_pago_actual_intereses']="";
									$data['cliente'][$key]['credito']['dias_vencimiento']=0;
									$data['cliente'][$key]['credito']['saldo_insoluto'] =0;
									$data['cliente'][$key]['credito']['monto_pagar']=0;

								}else
								{
									if(isset($info[$this->id][$solidario->id]['fecha_ingreso_cartera_vencida']) && $info[$this->id][$solidario->id]['fecha_ingreso_cartera_vencida']!=0){
										$data['cliente'][$key]['credito']['fecha_ingreso_cartera_vencida']=date("Ymd",strtotime($info[$this->id][$solidario->id]['fecha_ingreso_cartera_vencida']));
									}
									$data['cliente'][$key]['credito']['monto_correspondiente_interes']= $this-> atributosCDCPF('MontoCorrespondienteIntereses',$info[$this->id][$solidario->id]['monto_correspondiente_interes']);
									//checarcambrano
									//$data['cliente'][$key]['credito']['forma_pago_actual_intereses']="";
									if($data['cliente'][$key]['credito']['saldo_insoluto'] !=0 ){
										$fecha_ingreso_cartera_vencida = new DateTime($info[$this->id][$solidario->id]['fecha_ingreso_cartera_vencida']);
										$fecha_reporte = new DateTime($fecha);
										$dias_vencimientos = $fecha_ingreso_cartera_vencida->diff($fecha_reporte);
										$data['cliente'][$key]['credito']['dias_vencimiento']= $this-> atributosCDCPF('DiasVencimiento',$dias_vencimientos->format('%a'));
									}else{
										$data['cliente'][$key]['credito']['dias_vencimiento']=0;
									}
								}











								$data['cliente'][$key]['credito']['plazo_meses']= $this-> atributosCDCPF('PlazoMeses',$info[$this->id][$solidario->id]['plazo_dias']);
								$data['cliente'][$key]['credito']['monto_credito_originacion']= $this-> atributosCDCPF('MontoCreditoOriginacion',$info[$this->id][$solidario->id]['monto_credito_originacion']);
						}
					}

					$key++;
				}
			}
		}elseif($this->id_cliente0->tipo_persona=="Persona Fisica"){
			$avales=AvalesSolicitudes::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$this->id));

			//checamos si su saldo insoluto del integante

			if($this-> atributosCDCPF('SaldoActual',$info[$this->id]['saldo_actual']) == 0){
							$entra=1;
							if(empty($info[$this->id]['fecha_cierre_credito'])){
								$entra=1.1;
								//preguntamos si estamos en rango de la fecha
								//fecha del ultimopago
								if(($info[$this->id]['fecha_ultimo_pago'] >= $fecha_inicio) && ($info[$this->id]['fecha_ultimo_pago'] <= $fecha_fin)) {
									$sentencia=1;
									$entra="SI";
									$entra="1.1.1";
								} else {
									$sentencia=0;
									$entra="1.1.2";
									$entra="NO";
								}
								//
							}else{
								if(($info[$this->id]['fecha_cierre_credito'] >= $fecha_inicio) && ($info[$this->id]['fecha_cierre_credito'] <= $fecha_fin)) {
									$sentencia=1;
									$entra="SI";
									$entra="1.1.1";
								} else {
									$sentencia=0;
									$entra="1.1.2";
									$entra="NO";
								}
							}
						//aquiterminaesto
						}else{
							$entra=2;
							$sentencia=1;
						}

			if($sentencia==1){
				//Clientes
				$data['cliente'][$key]['id']=$this->id_cliente;//Campo auxiliar, no pertenece al reporte
				$data['cliente'][$key]['nota_otorgante']='';//Campo auxiliar, no pertenece al reporte
				$data['cliente'][$key]['apellido_paterno']= $this-> atributosCDCPF('ApellidoPaterno',$this->id_cliente0->id_pld_cliente0->apellido_paterno);
				$data['cliente'][$key]['apellido_materno']= $this-> atributosCDCPF('ApellidoMaterno',$this->id_cliente0->id_pld_cliente0->apellido_materno);
				if(!isset($data['cliente'][$key]['apellido_materno']) || $data['cliente'][$key]['apellido_materno']==""){
					$data['cliente'][$key]['apellido_materno']="NO PROPORCIONADO";
				}
				$data['cliente'][$key]['apellido_adicional']= $this-> atributosCDCPF('ApellidoAdicional','');
				$data['cliente'][$key]['nombres']= $this-> atributosCDCPF('Nombres',$this->id_cliente0->nombre." ".$this->id_cliente0->nombre2);
				$data['cliente'][$key]['fecha_nacimiento']='';
				if(isset($this->id_cliente0->fecha_nacimiento) && $this->id_cliente0->fecha_nacimiento!=0)
					$data['cliente'][$key]['fecha_nacimiento']=date("Ymd",strtotime($this->id_cliente0->fecha_nacimiento));
				$data['cliente'][$key]['rfc']= $this-> atributosCDCPF('RFC',$this->id_cliente0->rfc);
				$data['cliente'][$key]['curp']= $this-> atributosCDCPF('CURP',$this->id_cliente0->curp);
				$data['cliente'][$key]['numero_seguridad_social']= $this-> atributosCDCPF('NumeroSeguridadSocial','');
				$data['cliente'][$key]['nacionalidad']='';
				if($this->id_cliente0->id_pld_cliente0->nacionalidad=="Mexicano"){
					$data['cliente'][$key]['nacionalidad']='MX';
				}else{
					$pais=Paises::model()->find(array(
						'condition'=>"(pais=:pais AND :pais<>'') OR (pais=:pais2 AND :pais='' AND :pais2<>'')",
						'order'=>'FIELD(pais,:pais,:pais2)',
						'params'=>array(':pais'=>$this->id_cliente0->id_pld_cliente0->pais_nacimiento,':pais2'=>$this->id_cliente0->pais)
					));
					if(!is_null($pais)){
						$data['cliente'][$key]['nacionalidad']= $this-> atributosCDCPF('Nacionalidad',$pais->iso);
					}
				}
				$data['cliente'][$key]['residencia']= $this-> atributosCDCPF('Residencia','');
				$data['cliente'][$key]['numero_licencia_conducir']= $this-> atributosCDCPF('NumeroLicenciaConducir','');
				$data['cliente'][$key]['estado_civil']='';
				if($this->id_cliente0->estado_civil=="Soltero"){
					$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"S");
				}elseif($this->id_cliente0->estado_civil=="Union Libre"){
					$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"L");
				}elseif($this->id_cliente0->estado_civil=="Casado"){
					$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"C");
				}elseif($this->id_cliente0->estado_civil=="Casado con Separación de Bienes"){
					$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"C");
				}elseif($this->id_cliente0->estado_civil=="Casado con Bienes Mancomunados"){
					$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"C");
				}elseif($this->id_cliente0->estado_civil=="Divorciado"){
					$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"D");
				}elseif($this->id_cliente0->estado_civil=="Viudo"){
					$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',"V");
				}


				$data['cliente'][$key]['sexo']='';
				if(isset($this->id_cliente0->id_pld_cliente0->genero) && $this->id_cliente0->id_pld_cliente0->genero=="M"){
					$data['cliente'][$key]['sexo']= $this-> atributosCDCPF('Sexo',"F");
				}elseif(isset($this->id_cliente0->id_pld_cliente0->genero) && $this->id_cliente0->id_pld_cliente0->genero=="H"){
					$data['cliente'][$key]['sexo']= $this-> atributosCDCPF('Sexo',"M");
				}
				$data['cliente'][$key]['clave_elector_ife']= $this-> atributosCDCPF('ClaveElectorIFE','');
				$data['cliente'][$key]['numero_dependientes']= $this-> atributosCDCPF('NumeroDependientes','');
				$data['cliente'][$key]['fecha_defuncion']='';
				$data['cliente'][$key]['indicador_de_defuncion']= $this-> atributosCDCPF('IndicadorDefuncion','');

				$data['cliente'][$key]['tipo_persona']='PF';
				//domicilio
				$data['cliente'][$key]['direccion']= $this-> atributosCDCPF('Direccion',$this->id_cliente0->calle." ".$this->id_cliente0->numero_exterior);
				$data['cliente'][$key]['colonia_poblacion']= $this-> atributosCDCPF('ColoniaPoblacion',$this->id_cliente0->colonia);
				$data['cliente'][$key]['delegacion_municipio']= $this-> atributosCDCPF('DelegacionMunicipio',$this->id_cliente0->municipio);
				$data['cliente'][$key]['ciudad']='';
				if (isset($this->id_cliente0->localidad) AND $this->id_cliente0->localidad!="") {
					$data['cliente'][$key]['ciudad']= $this-> atributosCDCPF('Ciudad',$this->id_cliente0->localidad);
				}else{
					$data['cliente'][$key]['delegacion_municipio']= $this-> atributosCDCPF('DelegacionMunicipio',$this->id_cliente0->municipio);
				}
				$data['cliente'][$key]['estado']='';
				if(isset($this->id_cliente0->estado) && $this->id_cliente0->estado!=""){
					$estado=Estados::model()->find("estado=:estado",array(':estado'=>$this->id_cliente0->estado));
					if(!is_null($estado)){
						$data['cliente'][$key]['estado']= $this-> atributosCDCPF('Estado',$estado->clave_buro);
					}
				}
				$data['cliente'][$key]['codigo_postal']= $this-> atributosCDCPF('CP',$this->id_cliente0->codigo_postal);
				$data['cliente'][$key]['fecha_residencia']= $this-> atributosCDCPF('FechaResidencia','');
				$data['cliente'][$key]['telefono']= $this-> atributosCDCPF('NumeroTelefono',$this->id_cliente0->telefono);
				$data['cliente'][$key]['tipo_domicilio']= $this-> atributosCDCPF('TipoDomicilio','');
				$data['cliente'][$key]['tipo_asentamiento']= $this-> atributosCDCPF('TipoAsentamiento','');
				//paises
				$pais=Paises::model()->find("pais=:pais",array(':pais'=>$this->id_cliente0->pais));
				$data['cliente'][$key]['origen_domicilio']= $this-> atributosCDCPF('OrigenDomicilio',$pais['iso']);
				//ESTARARO

				//Empleo
				if(isset($this->id_cliente0->id_empleo0)){
					$data['cliente'][$key]['empleo']['empresa']= $this-> atributosCDCPF('NombreEmpresa',$this->id_cliente0->id_empleo0->empresa);
					$data['cliente'][$key]['empleo']['direccion']= $this-> atributosCDCPF('Direccion',$this->id_cliente0->id_empleo0->direccion);
					$data['cliente'][$key]['empleo']['colonia_poblacion']= $this-> atributosCDCPF('ColoniaPoblacion',$this->id_cliente0->id_empleo0->colonia);
					$data['cliente'][$key]['empleo']['delegacion_municipio']= $this-> atributosCDCPF('DelegacionMunicipio',$this->id_cliente0->id_empleo0->municipio);
					$data['cliente'][$key]['empleo']['ciudad']= $this-> atributosCDCPF('Ciudad',$this->id_cliente0->id_empleo0->ciudad);
					$data['cliente'][$key]['empleo']['estado']='';
					if(isset($this->id_cliente0->id_empleo0->estado) && $this->id_cliente0->id_empleo0->estado!=""){
						$estado=Estados::model()->find("estado=:estado",array(':estado'=>$this->id_cliente0->id_empleo0->estado));
						if(!is_null($estado)){
							$data['cliente'][$key]['empleo']['estado']= $this-> atributosCDCPF('Estado',$estado->clave_buro);
						}
					}
					$data['cliente'][$key]['empleo']['codigo_postal']= $this-> atributosCDCPF('CP',$this->id_cliente0->id_empleo0->codigo_postal);
					$data['cliente'][$key]['empleo']['telefono_empresa']= $this-> atributosCDCPF('NumeroTelefono',$this->id_cliente0->id_empleo0->telefono);
					$data['cliente'][$key]['empleo']['extension']= $this-> atributosCDCPF('Extension',$this->id_cliente0->id_empleo0->extension);
					$data['cliente'][$key]['empleo']['fax']= $this-> atributosCDCPF('Fax',$this->id_cliente0->id_empleo0->fax);
					$data['cliente'][$key]['empleo']['puesto']= $this-> atributosCDCPF('Puesto',$this->id_cliente0->id_empleo0->puesto);
					$data['cliente'][$key]['empleo']['fecha_contratacion']='';
					if(isset($this->id_cliente0->id_empleo0->fecha_contratacion) && $this->id_cliente0->id_empleo0->fecha_contratacion!=0){
						$data['cliente'][$key]['empleo']['fecha_contratacion']=date("Ymd",strtotime($this->id_cliente0->id_empleo0->fecha_contratacion));
					}
					$data['cliente'][$key]['empleo']['moneda_salario']= $this-> atributosCDCPF('ClaveMoneda','');
					$data['cliente'][$key]['empleo']['salario_mensual']= $this-> atributosCDCPF('SalarioMensual','');
					$data['cliente'][$key]['empleo']['fecha_ultimo_dia']='';
					if(isset($this->id_cliente0->id_empleo0->fecha_ultimo_dia) && $this->id_cliente0->id_empleo0->fecha_ultimo_dia!=0){
						$data['cliente'][$key]['empleo']['fecha_ultimo_dia']=date("Ymd",strtotime($this->id_cliente0->id_empleo0->fecha_ultimo_dia));
					}
					$data['cliente'][$key]['empleo']['fecha_verificacion']='';
					if(isset($this->id_cliente0->id_empleo0->fecha_verificacion) && $this->id_cliente0->id_empleo0->fecha_verificacion!=0){
						$data['cliente'][$key]['empleo']['fecha_verificacion']=date("Ymd",strtotime($this->id_cliente0->id_empleo0->fecha_verificacion));
					}
				}

				//Credito
				$data['cliente'][$key]['credito']['clave_actual_otorgante']= $this-> atributosCDCPF('ClaveActualOtorgante',$empresa->clave_otorgante);
				$data['cliente'][$key]['credito']['nombre_actual_otorgante']= $this-> atributosCDCPF('NombreOtorgante',$empresa->nombre_otorgante);
				$data['cliente'][$key]['credito']['numero_cuenta']= $this-> atributosCDCPF('CuentaActual',$this->contrato);
				if(count($avales)>0){
					$data['cliente'][$key]['credito']['tipo_responsabilidad_cuenta']='T';
				}else{
					$data['cliente'][$key]['credito']['tipo_responsabilidad_cuenta']='I';
				}
				$data['cliente'][$key]['credito']['tipo_cuenta']= $this-> atributosCDCPF('TipoCuenta',$this->id_producto0->id_tipo_cuenta0->valor);
				$data['cliente'][$key]['credito']['tipo_contrato']='PP';
				if($this->id_producto0->id_tipo_producto0->nombre=='Arrendamiento Puro'){
					$data['cliente'][$key]['credito']['tipo_contrato']="AR";
				}
				$data['cliente'][$key]['credito']['moneda']='MX';
				$data['cliente'][$key]['credito']['valor_activo_valuacion']= $this-> atributosCDCPF('ValorActivoValuacion',$info[$this->id]['valor_activo_valuacion']);
				$data['cliente'][$key]['credito']['numero_pagos']= $this-> atributosCDCPF('NumeroPagos',$this->plazo_autorizado);
				$data['cliente'][$key]['credito']['frecuencia_pagos']= $this-> atributosCDCPF('FrecuenciaPagos',$this->id_tipo_amortizacion0->clave_circulo_credito);
				$data['cliente'][$key]['credito']['monto_pagar']= $this-> atributosCDCPF('MontoPagar',$info[$this->id]['monto_pagar']);
				$data['cliente'][$key]['credito']['fecha_apertura']=date("Ymd",strtotime($this->fecha_disposicion));
				$data['cliente'][$key]['credito']['fecha_ultimo_pago']='';
				if(isset($info[$this->id]['fecha_ultimo_pago']) && $info[$this->id]['fecha_ultimo_pago']!=0){
					$data['cliente'][$key]['credito']['fecha_ultimo_pago']=date("Ymd",strtotime($info[$this->id]['fecha_ultimo_pago']));
				}
				$data['cliente'][$key]['credito']['fecha_ultima_compra']='';
				if(isset($info[$this->id]['fecha_ultima_compra']) && $info[$this->id]['fecha_ultima_compra']!=0){
					$data['cliente'][$key]['credito']['fecha_ultima_compra']=date("Ymd",strtotime($info[$this->id]['fecha_ultima_compra']));
				}
				$data['cliente'][$key]['credito']['fecha_cierre_credito']='';

				$data['cliente'][$key]['credito']['fecha_corte']=date("Ymd",strtotime($fecha));
				$data['cliente'][$key]['credito']['garantia']= $this-> atributosCDCPF('Garantia','');
				$data['cliente'][$key]['credito']['credito_maximo']= $this-> atributosCDCPF('CreditoMaximo',$info[$this->id]['credito_maximo']);


				/*
				$data['cliente'][$key]['credito']['saldo_actual']= $this-> atributosCDCPF('SaldoActual',$info[$this->id]['saldo_actual']);
				if($this->id_producto0->id_tipo_cuenta0->valor == "F"  || $this->id_producto0->id_tipo_cuenta0->valor == "H"){
							$data['cliente'][$key]['credito']['saldo_actual']=0;
							$data['cliente'][$key]['credito']['fecha_cierre_credito']="";
				}else{
					if($data['cliente'][$key]['credito']['saldo_actual']== 0){
						if(isset($info[$this->id]['fecha_cierre_credito']) && $info[$this->id]['fecha_cierre_credito']!=0){
							$data['cliente'][$key]['credito']['fecha_cierre_credito']=date("Ymd",strtotime($info[$this->id]['fecha_cierre_credito']));
					}
					}
				}*/
				//cambranoaqui
				$data['cliente'][$key]['credito']['saldo_actual']= $this-> atributosCDCPF('SaldoActual',$info[$this->id]['saldo_actual']);
				if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
									if(isset($info[$this->id]['fecha_cierre_credito']) && $info[$this->id]['fecha_cierre_credito']!=0){
									$data['cliente'][$key]['credito']['fecha_cierre_credito']=date("Ymd",strtotime($info[$this->id]['fecha_cierre_credito']));
									}else{
										$data['cliente'][$key]['credito']['fecha_cierre_credito']=$data['cliente'][$key]['credito']['fecha_ultimo_pago'];
										$data['cliente'][$key]['credito']['monto_pagar']=0;
									}
				}




				$data['cliente'][$key]['credito']['limite_credito']= $this-> atributosCDCPF('LimiteCredito',$info[$this->id]['limite_credito']);
				$data['cliente'][$key]['credito']['saldo_vencido']=0;
				if($info[$this->id]['saldo_vencido']>0){
					$data['cliente'][$key]['credito']['saldo_vencido']= $this-> atributosCDCPF('SaldoVencido',$info[$this->id]['saldo_vencido']);
				}
				//cambranoaqui2
				if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
					$data['cliente'][$key]['credito']['saldo_vencido']=0;
				}
				$data['cliente'][$key]['credito']['numero_pagos_vencidos']='';
				$data['cliente'][$key]['credito']['numero_pagos_vencidos']= $this-> atributosCDCPF('NumeroPagosVencidos',$info[$this->id]['numero_pagos_vencidos']);
				$data['cliente'][$key]['credito']['pago_actual']='';
				//cambranoaqui3
				if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
					$data['cliente'][$key]['credito']['numero_pagos_vencidos']=0;
				}
				if($info[$this->id]['numero_pagos_vencidos']==0){
					$data['cliente'][$key]['credito']['pago_actual']="V";
				}elseif($info[$this->id]['numero_pagos_vencidos']<84){
					$data['cliente'][$key]['credito']['pago_actual']= $this-> atributosCDCPF('PagoActual',$info[$this->id]['numero_pagos_vencidos']);
				}else{
					$data['cliente'][$key]['credito']['pago_actual']=84;
				}
				$data['cliente'][$key]['credito']['historico_pagos']='';
				$data['cliente'][$key]['credito']['clave_prevencion']='';
				$data['cliente'][$key]['credito']['total_pagos_reportados']='';
				$data['cliente'][$key]['credito']['total_pagos_reportados']= $this-> atributosCDCPF('TotalPagosReportados',$info[$this->id]['total_pagos_reportados']);
				$data['cliente'][$key]['credito']['clave_anterior_otorgante']='';
				$data['cliente'][$key]['credito']['nombre_anterior_otorgante']='';
				$data['cliente'][$key]['credito']['numero_cuenta_anterior']='';
				$data['cliente'][$key]['credito']['fecha_primer_incumplimiento']='19010101';
				if(isset($info[$this->id]['fecha_primer_incumplimiento']) && $info[$this->id]['fecha_primer_incumplimiento']!=0){
					$data['cliente'][$key]['credito']['fecha_primer_incumplimiento']=date("Ymd",strtotime($info[$this->id]['fecha_primer_incumplimiento']));
				}
				//cambranoaqui4
					if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
					$data['cliente'][$key]['credito']['fecha_primer_incumplimiento']='19010101';
				}
				$data['cliente'][$key]['credito']['saldo_insoluto']= $this-> atributosCDCPF('SaldoInsoluto',$info[$this->id]['saldo_insoluto']);
				//cambranoaqui5
				if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
					$data['cliente'][$key]['credito']['saldo_insoluto']=0;
				}
				$data['cliente'][$key]['credito']['monto_ultimo_pago']= $this-> atributosCDCPF('MontoUltimoPago',$info[$this->id]['monto_ultimo_pago']);

				if(isset($info[$this->id]['fecha_ingreso_cartera_vencida']) && $info[$this->id]['fecha_ingreso_cartera_vencida']!=0){
							$data['cliente'][$key]['credito']['fecha_ingreso_cartera_vencida']=date("Ymd",strtotime($info[$this->id]['fecha_ingreso_cartera_vencida']));
						}
				$data['cliente'][$key]['credito']['monto_correspondiente_interes']= $this-> atributosCDCPF('MontoCorrespondienteIntereses',$info[$this->id][$solidario->id]['monto_correspondiente_interes']);
				//checar
						$data['cliente'][$key]['credito']['forma_pago_actual_intereses']="";
				//$fecha;


				/*
				if($data['cliente'][$key]['credito']['saldo_insoluto'] != 0){
							$fecha_ingreso_cartera_vencida = new DateTime($info[$this->id]['fecha_ingreso_cartera_vencida']);
							$fecha_reporte = new DateTime($fecha);
							$dias_vencimientos = $fecha_ingreso_cartera_vencida->diff($fecha_reporte);
							$data['cliente'][$key]['credito']['dias_vencimiento']= $this-> atributosCDCPF('DiasVencimiento',$dias_vencimientos->format('%a'));
				}else{
							$data['cliente'][$key]['credito']['dias_vencimiento']=0;
				}*/
				//cambranoaqui6
				if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
					$data['cliente'][$key]['credito']['fecha_ingreso_cartera_vencida']="";
					$data['cliente'][$key]['credito']['forma_pago_actual_intereses']="";
					$data['cliente'][$key]['credito']['dias_vencimiento']=0;
					$data['cliente'][$key]['credito']['saldo_insoluto'] =0;
				}else{
					if(isset($info[$this->id]['fecha_ingreso_cartera_vencida']) && $info[$this->id]['fecha_ingreso_cartera_vencida']!=0){
						$data['cliente'][$key]['credito']['fecha_ingreso_cartera_vencida']=date("Ymd",strtotime($info[$this->id]['fecha_ingreso_cartera_vencida']));
					}
					$data['cliente'][$key]['credito']['monto_correspondiente_interes']= $this-> atributosCDCPF('MontoCorrespondienteIntereses',$info[$this->id]['monto_correspondiente_interes']);
					//checarcambrano
					//$data['cliente'][$key]['credito']['forma_pago_actual_intereses']="";
					if($data['cliente'][$key]['credito']['saldo_insoluto'] !=0 ){
						$fecha_ingreso_cartera_vencida = new DateTime($info[$this->id]['fecha_ingreso_cartera_vencida']);
						$fecha_reporte = new DateTime($fecha);
						$dias_vencimientos = $fecha_ingreso_cartera_vencida->diff($fecha_reporte);
						$data['cliente'][$key]['credito']['dias_vencimiento']= $this-> atributosCDCPF('DiasVencimiento',$dias_vencimientos->format('%a'));
					}else{
						$data['cliente'][$key]['credito']['dias_vencimiento']=0;
					}
				}



				$data['cliente'][$key]['credito']['plazo_meses']= $this-> atributosCDCPF('PlazoMeses',$info[$this->id]['plazo_dias']);
				$data['cliente'][$key]['credito']['monto_credito_originacion']= $this-> atributosCDCPF('PlazoMeses',$info[$this->id]['monto_credito_originacion']);
				$data['cliente'][$key]['credito']['correo_electronico_consumidor']= $this-> atributosCDCPF('CorreoElectronicoConsumidor',$this->id_cliente0->email);

				//Avales
				//$avales=AvalesSolicitudes::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$this->id));
				foreach ($avales as $aval){
					if($aval->tipo_persona=="Persona Fisica"){
						$key++;
						//Clientes
						$data['cliente'][$key]['id_aval']=$aval->id;//Campo auxiliar, no pertenece al reporte
						$data['cliente'][$key]['nota_otorgante']='Aval '.$aval->id_solicitud0->id_cliente0->fullName;//Campo auxiliar, no pertenece al reporte
						$data['cliente'][$key]['apellido_paterno']= $this-> atributosCDCPF('ApellidoPaterno',$aval->apellido_paterno);
						$data['cliente'][$key]['apellido_materno']= $this-> atributosCDCPF('ApellidoMaterno',$aval->apellido_materno);
						if(!isset($data['cliente'][$key]['apellido_materno']) || $data['cliente'][$key]['apellido_materno']==""){
							$data['cliente'][$key]['apellido_materno']="NO PROPORCIONADO";
						}
						$data['cliente'][$key]['apellido_adicional']='';
						$data['cliente'][$key]['nombres']= $this-> atributosCDCPF('Nombres',$aval->nombre." ".$aval->nombre2);
						$data['cliente'][$key]['fecha_nacimiento']='';
						if(isset($aval->fecha_nacimiento) && $aval->fecha_nacimiento!=0)
							$data['cliente'][$key]['fecha_nacimiento']=date("Ymd",strtotime($aval->fecha_nacimiento));
						$data['cliente'][$key]['rfc']= $this-> atributosCDCPF('RFC',$aval->rfc);
						$data['cliente'][$key]['curp']= $this-> atributosCDCPF('CURP',$aval->curp);
						$data['cliente'][$key]['numero_seguridad_social']='';
						$data['cliente'][$key]['nacionalidad']='';
						if($aval->nacionalidad=="Mexicano"){
							$data['cliente'][$key]['nacionalidad']='MX';
						}else{
							$pais=Paises::model()->find(array(
								'condition'=>"(pais=:pais AND :pais<>'') OR (pais=:pais2 AND :pais='' AND :pais2<>'')",
								'order'=>'FIELD(pais,:pais,:pais2)',
								'params'=>array(':pais'=>$aval->pais,':pais2'=>$aval->pais)
							));
							if(!is_null($pais)){
								$data['cliente'][$key]['nacionalidad']= $this-> atributosCDCPF('Nacionalidad',$pais->iso);
							}
						}
						$data['cliente'][$key]['residencia']='';
						$data['cliente'][$key]['numero_licencia_conducir']='';
						$data['cliente'][$key]['estado_civil']= $this-> atributosCDCPF('EstadoCivil',$aval->estado_civil);
						if($aval->estado_civil=="Soltero"){
							$data['cliente'][$key]['estado_civil']="S";
						}elseif($aval->estado_civil=="Union Libre"){
							$data['cliente'][$key]['estado_civil']="L";
						}elseif($aval->estado_civil=="Casado"){
							$data['cliente'][$key]['estado_civil']="C";
						}elseif($aval->estado_civil=="Divorciado"){
							$data['cliente'][$key]['estado_civil']="D";
						}elseif($aval->estado_civil=="Viudo"){
							$data['cliente'][$key]['estado_civil']="V";
						}
						$data['cliente'][$key]['sexo']='';
						$data['cliente'][$key]['clave_elector_ife']='';
						$data['cliente'][$key]['numero_dependientes']='';
						$data['cliente'][$key]['fecha_defuncion']='';
						$data['cliente'][$key]['indicador_de_defuncion']='';
						$data['cliente'][$key]['tipo_persona']='PF';
						$data['cliente'][$key]['direccion']= $this-> atributosCDCPF('Direccion',$aval->calle." ".$aval->numero_exterior);
						$data['cliente'][$key]['colonia_poblacion']= $this-> atributosCDCPF('ColoniaPoblacion',$aval->colonia);
						$data['cliente'][$key]['delegacion_municipio']= $this-> atributosCDCPF('DelegacionMunicipio',$aval->municipio);
						$data['cliente'][$key]['ciudad']= $this-> atributosCDCPF('Ciudad',$aval->localidad);
						$data['cliente'][$key]['estado']='';
						if(isset($aval->estado) && $aval->estado!=""){
							$estado=Estados::model()->find("estado=:estado",array(':estado'=>$aval->estado));
							if(!is_null($estado)){
								$data['cliente'][$key]['estado']= $this-> atributosCDCPF('Estado',$estado->clave);
							}
						}
						$data['cliente'][$key]['codigo_postal']= $this-> atributosCDCPF('CP',$aval->codigo_postal);
						$data['cliente'][$key]['fecha_residencia']='';
						$data['cliente'][$key]['telefono']= $this-> atributosCDCPF('NumeroTelefono',$aval->telefono);
						$data['cliente'][$key]['tipo_domicilio']='';
						$data['cliente'][$key]['tipo_asentamiento']='';
						$pais=Paises::model()->find("pais=:pais",array(':pais'=>$aval->pais));
						$data['cliente'][$key]['origen_domicilio']= $this-> atributosCDCPF('OrigenDomicilio',$pais['iso']);


						//Empleo
						if(isset($aval->empleo0)){
							$data['cliente'][$key]['empleo']['empresa']= $this-> atributosCDCPF('NombreEmpresa',$aval->empleo0->empresa);
							$data['cliente'][$key]['empleo']['direccion']= $this-> atributosCDCPF('Direccion',$aval->empleo0->direccion);
							$data['cliente'][$key]['empleo']['colonia_poblacion']= $this-> atributosCDCPF('ColoniaPoblacion',$aval->empleo0->colonia);
							$data['cliente'][$key]['empleo']['delegacion_municipio']= $this-> atributosCDCPF('DelegacionMunicipio',$aval->empleo0->municipio);
							$data['cliente'][$key]['empleo']['ciudad']= $this-> atributosCDCPF('Ciudad',$aval->empleo0->ciudad);
							$data['cliente'][$key]['empleo']['estado']= $this-> atributosCDCPF('Estado',$aval->empleo0->estado);
							$data['cliente'][$key]['empleo']['codigo_postal']= $this-> atributosCDCPF('CP',$aval->empleo0->codigo_postal);
							$data['cliente'][$key]['empleo']['telefono_empresa']= $this-> atributosCDCPF('NumeroTelefono',$aval->empleo0->telefono);
							$data['cliente'][$key]['empleo']['extension']= $this-> atributosCDCPF('Extension',$aval->empleo0->extension);
							$data['cliente'][$key]['empleo']['fax']= $this-> atributosCDCPF('Fax',$aval->empleo0->fax);
							$data['cliente'][$key]['empleo']['puesto']= $this-> atributosCDCPF('Puesto',$aval->empleo0->puesto);
							$data['cliente'][$key]['empleo']['fecha_contratacion']='';
							if(isset($aval->empleo0->fecha_contratacion) && $aval->empleo0->fecha_contratacion!=0){
								$data['cliente'][$key]['empleo']['fecha_contratacion']=date("Ymd",strtotime($aval->empleo0->fecha_contratacion));
							}
							$data['cliente'][$key]['empleo']['moneda_salario']='';
							$data['cliente'][$key]['empleo']['salario_mensual']='';
							$data['cliente'][$key]['empleo']['fecha_ultimo_dia']='';
							if(isset($aval->empleo0->fecha_ultimo_dia) && $aval->empleo0->fecha_ultimo_dia!=0){
								$data['cliente'][$key]['empleo']['fecha_ultimo_dia']=date("Ymd",strtotime($aval->empleo0->fecha_ultimo_dia));
							}
							$data['cliente'][$key]['empleo']['fecha_verificacion']='';
							if(isset($aval->empleo0->fecha_verificacion) && $aval->empleo0->fecha_verificacion!=0){
								$data['cliente'][$key]['empleo']['fecha_verificacion']=date("Ymd",strtotime($aval->empleo0->fecha_verificacion));
							}
						}

						//Credito
						$data['cliente'][$key]['credito']['clave_actual_otorgante']= $this-> atributosCDCPF('ClaveActualOtorgante',$empresa->clave_otorgante);
						$data['cliente'][$key]['credito']['nombre_actual_otorgante']= $this-> atributosCDCPF('NombreOtorgante',$empresa->nombre_otorgante);
						$data['cliente'][$key]['credito']['numero_cuenta']= $this-> atributosCDCPF('CuentaActual',$this->clave);
						$data['cliente'][$key]['credito']['tipo_responsabilidad_cuenta']='A';
						$data['cliente'][$key]['credito']['tipo_cuenta']= $this-> atributosCDCPF('TipoCuenta',$this->id_producto0->id_tipo_cuenta0->valor);
						$data['cliente'][$key]['credito']['tipo_contrato']='PP';
						if($this->id_producto0->id_tipo_producto0->nombre=='Arrendamiento Puro'){
							$data['cliente'][$key]['credito']['tipo_contrato']="AR";
						}
						$data['cliente'][$key]['credito']['moneda']='MX';
						$data['cliente'][$key]['credito']['valor_activo_valuacion']= $this-> atributosCDCPF('ValorActivoValuacion',$info[$this->id]['valor_activo_valuacion']);
						$data['cliente'][$key]['credito']['numero_pagos']= $this-> atributosCDCPF('NumeroPagos',$this->plazo_autorizado);
						$data['cliente'][$key]['credito']['frecuencia_pagos']= $this-> atributosCDCPF('FrecuenciaPagos',$this->id_tipo_amortizacion0->clave_circulo_credito);
						$data['cliente'][$key]['credito']['monto_pagar']= $this-> atributosCDCPF('MontoPagar',$info[$this->id]['monto_pagar']);
						$data['cliente'][$key]['credito']['fecha_apertura']=date("Ymd",strtotime($this->fecha_disposicion));
						$data['cliente'][$key]['credito']['fecha_ultimo_pago']='';
						if(isset($info[$this->id]['fecha_ultimo_pago']) && $info[$this->id]['fecha_ultimo_pago']!=0){
							$data['cliente'][$key]['credito']['fecha_ultimo_pago']=date("Ymd",strtotime($info[$this->id]['fecha_ultimo_pago']));
						}
						$data['cliente'][$key]['credito']['fecha_ultima_compra']='';
						if(isset($info[$this->id]['fecha_ultima_compra']) && $info[$this->id]['fecha_ultima_compra']!=0){
							$data['cliente'][$key]['credito']['fecha_ultima_compra']=date("Ymd",strtotime($info[$this->id]['fecha_ultima_compra']));
						}
						$data['cliente'][$key]['credito']['fecha_cierre_credito']='';

						$data['cliente'][$key]['credito']['fecha_corte']=date("Ymd",strtotime($fecha));
						$data['cliente'][$key]['credito']['garantia']='';
						$data['cliente'][$key]['credito']['credito_maximo']= $this-> atributosCDCPF('CreditoMaximo',$info[$this->id]['credito_maximo']);


						$data['cliente'][$key]['credito']['saldo_actual']= $this-> atributosCDCPF('SaldoActual',$info[$this->id]['saldo_actual']);

						/*
						if($this->id_producto0->id_tipo_cuenta0->valor == "F"  || $this->id_producto0->id_tipo_cuenta0->valor == "H"){
							$data['cliente'][$key]['credito']['saldo_actual']=0;
							$data['cliente'][$key]['credito']['fecha_cierre_credito']="";
						}else{

							if($data['cliente'][$key]['credito']['saldo_actual'] == 0){
								if(isset($info[$this->id]['fecha_cierre_credito']) && $info[$this->id]['fecha_cierre_credito']!=0){
								$data['cliente'][$key]['credito']['fecha_cierre_credito']=date("Ymd",strtotime($info[$this->id]['fecha_cierre_credito']));
								}
							}
						}
						*/
						//cambranoaqui
						if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
									if(isset($info[$this->id]['fecha_cierre_credito']) && $info[$this->id]['fecha_cierre_credito']!=0){
									$data['cliente'][$key]['credito']['fecha_cierre_credito']=date("Ymd",strtotime($info[$this->id]['fecha_cierre_credito']));
									}else{
										$data['cliente'][$key]['credito']['fecha_cierre_credito']=$data['cliente'][$key]['credito']['fecha_ultimo_pago'];
										$data['cliente'][$key]['credito']['monto_pagar']=0;
									}
						}



						$data['cliente'][$key]['credito']['limite_credito']= $this-> atributosCDCPF('LimiteCredito',$info[$this->id]['limite_credito']);
						$data['cliente'][$key]['credito']['saldo_vencido']=0;
						if($info[$this->id]['saldo_vencido']>0){
							$data['cliente'][$key]['credito']['saldo_vencido']= $this-> atributosCDCPF('SaldoVencido',$info[$this->id]['saldo_vencido']);
						}
						//cambranoaqui2
						if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
							$data['cliente'][$key]['credito']['saldo_vencido']=0;
						}
							$data['cliente'][$key]['credito']['numero_pagos_vencidos']='';
						$data['cliente'][$key]['credito']['numero_pagos_vencidos']= $this-> atributosCDCPF('NumeroPagosVencidos',$info[$this->id]['numero_pagos_vencidos']);
						if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
							$data['cliente'][$key]['credito']['numero_pagos_vencidos']=0;
						}


						$data['cliente'][$key]['credito']['pago_actual']='';
						if($info[$this->id]['numero_pagos_vencidos']==0){
							$data['cliente'][$key]['credito']['pago_actual']="V";
						}elseif($info[$this->id]['numero_pagos_vencidos']<84){
							$data['cliente'][$key]['credito']['pago_actual']= $this-> atributosCDCPF('PagoActual',$info[$this->id]['numero_pagos_vencidos']);
						}else{
							$data['cliente'][$key]['credito']['pago_actual']=84;
						}
						//cambranoaqui3
						if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
							$data['cliente'][$key]['credito']['numero_pagos_vencidos']=0;
						}

						$data['cliente'][$key]['credito']['historico_pagos']='';
						$data['cliente'][$key]['credito']['clave_prevencion']='';
						$data['cliente'][$key]['credito']['total_pagos_reportados']='';
						$data['cliente'][$key]['credito']['total_pagos_reportados']= $this-> atributosCDCPF('TotalPagosReportados',$info[$this->id]['total_pagos_reportados']);
						$data['cliente'][$key]['credito']['clave_anterior_otorgante']='';
						$data['cliente'][$key]['credito']['nombre_anterior_otorgante']='';
						$data['cliente'][$key]['credito']['numero_cuenta_anterior']='';
						$data['cliente'][$key]['credito']['fecha_primer_incumplimiento']='19010101';
						if(isset($info[$this->id]['fecha_primer_incumplimiento']) && $info[$this->id]['fecha_primer_incumplimiento']!=0){
							$data['cliente'][$key]['credito']['fecha_primer_incumplimiento']=date("Ymd",strtotime($info[$this->id]['fecha_primer_incumplimiento']));
						}
						//cambranoaqui4
						if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
							$data['cliente'][$key]['credito']['fecha_primer_incumplimiento']='19010101';
						}
						$data['cliente'][$key]['credito']['saldo_insoluto']=round($info[$this->id]['saldo_insoluto']);
						//cambranoaqui5
						if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
							$data['cliente'][$key]['credito']['saldo_insoluto']=0;
						}
						$data['cliente'][$key]['credito']['monto_ultimo_pago']=round($info[$this->id]['monto_ultimo_pago']);
						//cambranoaqui6
						if($data['cliente'][$key]['credito']['saldo_actual'] ==0){
							$data['cliente'][$key]['credito']['fecha_ingreso_cartera_vencida']="";
							$data['cliente'][$key]['credito']['forma_pago_actual_intereses']="";
							$data['cliente'][$key]['credito']['dias_vencimiento']=0;
							$data['cliente'][$key]['credito']['saldo_insoluto'] =0;
							$data['cliente'][$key]['credito']['monto_pagar']=0;

						}else
						{
							if(isset($info[$this->id]['fecha_ingreso_cartera_vencida']) && $info[$this->id]['fecha_ingreso_cartera_vencida']!=0){
								$data['cliente'][$key]['credito']['fecha_ingreso_cartera_vencida']=date("Ymd",strtotime($info[$this->id]['fecha_ingreso_cartera_vencida']));
							}
							$data['cliente'][$key]['credito']['monto_correspondiente_interes']= $this-> atributosCDCPF('MontoCorrespondienteIntereses',$info[$this->id]['monto_correspondiente_interes']);
							//checarcambrano
							//$data['cliente'][$key]['credito']['forma_pago_actual_intereses']="";
							if($data['cliente'][$key]['credito']['saldo_insoluto'] !=0 ){
								$fecha_ingreso_cartera_vencida = new DateTime($info[$this->id]['fecha_ingreso_cartera_vencida']);
								$fecha_reporte = new DateTime($fecha);
								$dias_vencimientos = $fecha_ingreso_cartera_vencida->diff($fecha_reporte);
								$data['cliente'][$key]['credito']['dias_vencimiento']= $this-> atributosCDCPF('DiasVencimiento',$dias_vencimientos->format('%a'));
							}else{
								$data['cliente'][$key]['credito']['dias_vencimiento']=0;
							}
						}



						//$fecha;





						//Aval
						$data['cliente'][$key]['aval']['rfc']='';
						$data['cliente'][$key]['aval']['curp']='';
						$data['cliente'][$key]['aval']['compañia']='';
						$data['cliente'][$key]['aval']['nombre1']='';
						$data['cliente'][$key]['aval']['nombre2']='';
						$data['cliente'][$key]['aval']['apellido_paterno']='';
						$data['cliente'][$key]['aval']['apellido_materno']='';
						$data['cliente'][$key]['aval']['direccion1']='';
						$data['cliente'][$key]['aval']['direccion2']='';
						$data['cliente'][$key]['aval']['colonia']='';
						$data['cliente'][$key]['aval']['delegacion_municipio']='';
						$data['cliente'][$key]['aval']['ciudad']='';
						$data['cliente'][$key]['aval']['estado']='';
						$data['cliente'][$key]['aval']['codigo_postal']='';
						$data['cliente'][$key]['aval']['telefono']='';
						$data['cliente'][$key]['aval']['extension']='';
						$data['cliente'][$key]['aval']['fax']='';
						$data['cliente'][$key]['aval']['tipo_cliente']='';
						$data['cliente'][$key]['aval']['estado_extranjero']='';
						$data['cliente'][$key]['aval']['pais']='';

						$data['cliente'][$key]['credito']['plazo_meses']= $this-> atributosCDCPF('PlazoMeses',$info[$this->id]['plazo_dias']);
						$data['cliente'][$key]['credito']['monto_credito_originacion']= $this-> atributosCDCPF('MontoCreditoOriginacion',$info[$this->id]['monto_credito_originacion']);
						$data['cliente'][$key]['credito']['correo_electronico_consumidor']= $this-> atributosCDCPF('CorreoElectronicoConsumidor',$this->id_cliente0->email);
					}
				}
			}
		}
		return $data;
	}

	public function getUsuarioEtapa($etapa){
		if($etapa ==1){
			$dataSin=array(
				'2'=>'Analista'
			);
		}
		if($etapa ==2){
			$dataSin=array(
				'1'=>'Ejecutivo',
			);
		}
		if($etapa ==3){
			$dataSin=array(
				'1'=>'Ejecutivo',
				'2'=>'Analista',
				'3'=>'Supervisor',
			);
		}
		if($etapa ==4){
			$dataSin=array(
				'2'=>'Analista'
			);
		}

		return $dataSin;

	}

	public function getGarantias() {
		$id_solicitud=$this->id;
		$data=GarantiasSolicitudes::model()->findAll('id_solicitud=:id_solicitud AND status !="Aplicado"',array(':id_solicitud'=>$id_solicitud));
		foreach ($data as $key => $row) {
			$list[$row->id]=" $".number_format($row->valor_actual, 2, '.', ',')." ".$row->garantia;
		}

		return $list;
	}

// Función para obtener los fondos de ahorro del usuario
public function getFondoAhorro() {
	/* $id_solicitud=$this->id;
	$sql = 'SELECT id_cliente from solicitudes where id = ' .$id_solicitud.';';
	$result = Yii::app()->db->createCommand($sql)->queryAll();
	$id_cliente = $result[0]['id_cliente']; */

	$data=SolicitudesCaja::model()->with(['aportes'])->findAll('id_cliente=:id_cliente and monto > 0',array(':id_cliente'=>$this->id_cliente));

	foreach ($data as $key => $row) {

		$totalAhorro = 0;

		foreach ($row->aportes as $index => $aporte) {
			if (strtolower($aporte->estatus) === 'pagado') {
				$totalAhorro += ($aporte->aporte_realizado + $aporte->interes);
			}
		}

		$list[$row->id]=" $".number_format($totalAhorro, 2, '.', ',');
	}

	return $list;
}



	//Columnas
	public function getColumnasSolicitudes(){
		if(!isset($this->_columnas)){
			// $data=Columnas::model()->findAllByAttributes(array('tabla'=>'solicitudes','id_usuario'=>Yii::app()->getUser()->id));
			$data=Columnas::model()->findAll("(tabla='solicitudes' AND id_usuario=".Yii::app()->getUser()->id.") OR (tabla='solicitudes_variables' AND id_usuario=".Yii::app()->getUser()->id.")");
			$datos=array();
			if(!is_null($data)){
				foreach ($data as $d){
					if($d->status==1){//Permitido
						if($d->tabla=="solicitudes_variables"){
							$datos[]="Var_".$d->columna;
						}else{
							$datos[]=$d->columna;
						}
					}
				}
			}
			$this->_columnas=$datos;
		}

		return $this->_columnas;
	}
	public function getColumnasDisponibles() {
		$labels=array(
			'id_cliente'=>'Cliente',
			'claveCliente'=>'No. Cliente',
			'id_grupo_cliente'=>'Grupo Solidario',
			'claveGrupoCliente'=>'Clave Grupo Solidario',
			'integrantes'=>'Integrantes',
			'id_grupo_solicitud'=>'Grupo de Solicitud',
			'clave'=>'Clave',
			'contrato'=>'Contrato',
			'referencia_oxxo'=>'Referencia OXXO',
			'referencia_pagos'=>'Referencia Pagos',
			'referencia_pagos2'=>'Referencia Pagos 2',
			'fecha_solicitud'=>'Fecha de Solicitud',
			'fecha_aceptacion'=>'Fecha de Aceptación',
			'fecha_disposicion'=>'Fecha de Disposición',
			'fecha_vencimiento'=>'Fecha de Vencimiento de Linea',
			'id_banco'=>'Banco Financiera',
			'id_deudor'=>'Deudor',
			'id_banco_cliente'=>'Banco Cliente',
			'monto_solicitado'=>'Monto Solicitud',
			'monto_autorizado'=>'Monto Autorización',
			'entregable'=>'Monto Primera Disposición',
			'montoDispuesto'=>'Monto Dispuesto',
			'id_producto'=>'Producto',
			'id_moneda'=>'Moneda',
			'tipo_cobro'=>'Tipo de Cobro',
			'plazo_solicitado'=>'Plazo Solicitud',
			'plazo_autorizado'=>'Plazo Autorización',
			'nombre_tasa_referencia'=>'Tasa de Referencia',
			'calificacion_calculada'=>'Calificación Calculada',
			'calificacion_asignada'=>'Calificación Asignada',
			'status_calculado'=>'Estatus Sistema',
			'status_asignado'=>'Estatus Analista',
			'id_status'=>'Estatus Interno',
			'autorizador'=>'Autorizador',
			'sesion_comite'=>'Sesión de Comité',
			'riesgo_buro'=>'Riesgo Crediticio',
			'cartera_vencida'=>'Cartera Vencida',
			'id_supervisor'=>'Supervisor',
			'idEjecutivo'=>'Ejecutivo',
			'id_sucursal'=>'Sucursal',
			'id_empresa'=>'Empresa',
			'id_fondeadora'=>'Fondeadora',
			'id_aportes_fondeadores'=>'Aportes Fondeadoras',
			'numero_disposiciones'=>'No. Disposiciones',
			'calificacion_cliente_cdc' =>'Califición Circulo de Credito',
			'calificacion_cliente_bdc' =>'Califición Buro de Credito',
			'dadoaltaSTP'=>'Alta en enlace financiero STP',
			'cuentastp'=>'clabe STP para recibir cobranza',
			'proceso'=>'Procesos del Credito',
			'montoDispersion'=>'Monto Dispersion',
			'fechaDispersion'=>'Fecha Dispersion',
			'id_cotizador'=>'Cotizador',
			'id_estatus_cobro'=>'Estatus Cobro',
			'id_estatus_pago'=>'Estatus Pago',
            'id_tipo_cartera'=>'Tipo Cartera',
            'status_pre'=>'Estatus Precalificación',
            'folio_pre'=>'Folio Precalificación',
			'monto_preautorizado' => 'Monto Pre-autorizado',
			'nombre_banco'=>'Banco',
			'id_activo_arrendamiento'=>'Activo Arrendamiento',
		);
		$columnas=Columnas::model()->findAll(array(
			'condition'=>"(tabla=:tabla AND status=:permitido AND id_usuario=:usuario) OR (tabla='solicitudes_variables' AND status=:permitido AND id_usuario=:usuario)",
			'order'=>"orden ASC",
			'params'=>array(
				':tabla'=>"solicitudes",
				':permitido'=>1,
				':usuario'=>Yii::app()->getUser()->id,
			)
		));
		$variables=SolicitudesVariables::model()->findAll();
		foreach($variables as $variable){
			$labels["Var_".$variable->clave]=$variable->variable;
		}
		$data1=array();
		foreach ($columnas as $columna) {
			if($columna->tabla=="solicitudes_variables"){
				$columna1="Var_".$columna->columna;
			}else{
				$columna1=$columna->columna;
			}
			$data1[$columna1]=$labels[$columna1];
			unset($labels[$columna1]);
		}

		$data=array();
		foreach ($labels as $key=>$label) {
			//Los labels que hayan sobrado se agregan al principio
			$data1[$key]=$label;
		}

		return $data1;
	}
	public function getColumnasDisponiblesClientes() {
		$labels=array(
			'id_cliente'=>'Cliente',
			'claveCliente'=>'No. Cliente',
			'id_grupo_cliente'=>'Grupo Solidario',
			'claveGrupoCliente'=>'Clave Grupo Solidario',
			'integrantes'=>'Integrantes',
			'id_grupo_solicitud'=>'Grupo de Solicitud',
			'clave'=>'Clave',
			'contrato'=>'Contrato',
			'referencia_oxxo'=>'Referencia OXXO',
			'referencia_pagos'=>'Referencia Pagos',
			'referencia_pagos2'=>'Referencia Pagos 2',
			'fecha_solicitud'=>'Fecha de Solicitud',
			'fecha_aceptacion'=>'Fecha de Aceptación',
			'fecha_disposicion'=>'Fecha de Disposición',
			'fecha_vencimiento'=>'Fecha de Vencimiento de Linea',
			'id_banco_cliente'=>'Banco Cliente',
			'monto_solicitado'=>'Monto Solicitud',
			'monto_autorizado'=>'Monto Autorización',
			'entregable'=>'Monto Primera Disposición',
			'montoDispuesto'=>'Monto Dispuesto',
			'id_producto'=>'Producto',
			'id_moneda'=>'Moneda',
			'tipo_cobro'=>'Tipo de Cobro',
			'plazo_solicitado'=>'Plazo Solicitud',
			'plazo_autorizado'=>'Plazo Autorización',
			'nombre_tasa_referencia'=>'Tasa de Referencia',
			'status_calculado'=>'Estatus Sistema',
			'status_asignado'=>'Estatus Analista',
			'id_status'=>'Estatus Interno',
			'autorizador'=>'Autorizador',
			'sesion_comite'=>'Sesión de Comité',
			'cartera_vencida'=>'Cartera Vencida',
			'id_supervisor'=>'Supervisor',
			'idEjecutivo'=>'Ejecutivo',
			'id_sucursal'=>'Sucursal',
			'id_empresa'=>'Empresa',
			'numero_disposiciones'=>'No. Disposiciones',
			'bandera_alarma_vencimiento'=>'Alarma Vencimiento de linea'
		);
		$columnas=Columnas::model()->findAll(array(
			'condition'=>"(tabla=:tabla AND status=:permitido AND id_usuario=:usuario) OR (tabla='solicitudes_variables' AND status=:permitido AND id_usuario=:usuario)",
			'order'=>"orden ASC",
			'params'=>array(
				':tabla'=>"solicitudes",
				':permitido'=>1,
				':usuario'=>Yii::app()->getUser()->id,
			)
		));
		$variables=SolicitudesVariables::model()->findAll();
		foreach($variables as $variable){
			$labels[$variable->clave]=$variable->variable;
		}
		$data1=array();
		foreach ($columnas as $columna) {
			if($columna->tabla=="solicitudes_variables"){
				$columna2="Var_".$columna->columna;
			}else{
				$columna2=$columna->columna;
			}
			$data1[$columna2]=$labels[$columna->columna];
			unset($labels[$columna->columna]);
		}

		$data=array();
		foreach ($labels as $key=>$label) {
			//Los labels que hayan sobrado se agregan al principio
			$data1[$key]=$label;
		}
		// foreach($variables as $variable){
		// 	$data1["Var_".$variable->clave]=$variable->variable;
		// }

		return $data1;
	}
	public function getTipoFinanciamiento(){
		$data=array(
				'1'=>'Sin IVA',
				'2'=>'Con IVA',
		);
		return $data;
	}
	public function getColumnasGrid($columna){

		$columnas=array(
			'id_cliente'=>array(
				'name' =>'id_cliente',
				'type'=>'raw',
				'value'=>function($data){
					return isset($data->id_grupo_cliente)?"":$data->id_cliente0->fullName.(new Clientes())->nombreCliProvedores($data->id);
				},
				'filter'=> null,
			),
			'claveCliente'=>array(
				'name'=>'claveCliente',
				'type'=>'raw',
				'value'=>function($data){
					return isset($data->id_grupo_cliente)?"":$data->id_cliente0->clave_cliente;
				},
				'filter'=>null,
			),
			'segmentacion'=>array(
				'name'=>'segmentacion',
				'type'=>'raw',
				'value'=>$data->segmentacion->nombre,
				'filter'=>null,
			),
			'id_grupo_cliente'=>array(
				'name'=>'id_grupo_cliente',
				'value'=>'$data->id_grupo_cliente0->nombre',
				'filter'=>$this->getGruposClientes(),
			),
			'claveGrupoCliente'=>array(
				'name'=>'claveGrupoCliente',
				'value'=>'$data->id_grupo_cliente0->clave',
				'filter'=>null,
			),
			'integrantes'=>array(
				'name'=>'integrantes',
				'value'=>null,
				'filter'=>null,
			),
			'id_grupo_solicitud'=>array(
				'name'=>'id_grupo_solicitud',
				'value'=>'$data->id_grupo_solicitud0->nombre',
				'filter'=>$this->getGruposSolicitudes(),
			),
			'clave'=>array(
				'name'=>'clave',
				'value'=>null,
				'filter'=>null,
			),
			'contrato'=>array(
				'name'=>'contrato',
				'value'=>null,
				'filter'=>null,
			),
			'referencia_oxxo'=>array(
				'name'=>'referencia_oxxo',
				'value'=>null,
				'filter'=>null,
			),
			'referencia_pagos'=>array(
				'name'=>'referencia_pagos',
				'value'=>null,
				'filter'=>null,
			),
			'referencia_pagos2'=>array(
				'name'=>'referencia_pagos2',
				'value'=>null,
				'filter'=>null,
			),
			'fecha_solicitud'=>array(
				'name'=>'fecha_solicitud',
				'value'=>null,
				'filter'=>null,
			),
			'fecha_aceptacion'=>array(
				'name'=>'fecha_aceptacion',
				'type'=>'raw',
				'value'=>function($data){
					return (isset($data->fecha_aceptacion) && $data->fecha_aceptacion!=0?date("Y-m-d",strtotime($data->fecha_aceptacion)):"");
				},
				'filter'=>null,
			),
			'fecha_disposicion'=>array(
				'name'=>'fecha_disposicion',
				'type'=>'raw',
				'value'=>function($data){
					return (isset($data->fecha_disposicion) && $data->fecha_disposicion!=0?date("Y-m-d",strtotime($data->fecha_disposicion)):"");
				},
				'filter'=>null,
			),
			'fecha_vencimiento'=>array(
				'name'=>'fecha_vencimiento',
				'type'=>'raw',
				'value'=>function($data){
					return (isset($data->fecha_ultimo_vencimiento) && $data->fecha_ultimo_vencimiento!=0?date("Y-m-d",strtotime($data->fecha_ultimo_vencimiento)):"");
				},
				'filter'=>null,
			),
			'id_banco'=>array(
				'name'=>'id_banco',
				'value'=>'$data->id_banco0->nombre',
				'filter'=>null,
			),
			'id_cotizador'=>array(
				'name'=>'id_cotizador',
				'value'=>'$data->id_cotizador0->clave',
				'filter'=>null,
			),
			'id_deudor'=>array(
				'name'=>'id_deudor',
				'value'=>'$data->id_deudor0->fullName',
				'filter'=>null,
			),
			'id_banco_cliente'=>array(
				'name'=>'id_banco_cliente',
				'value'=>'$data->id_banco_cliente0->nombre',
				'filter'=>null,
			),
			'monto_solicitado'=>array(
				'name'=>'monto_solicitado',
				'type'=>'raw',
				'value'=>function($data){
					return number_format((isset($data->id_grupo_cliente)?$data->montoSolidario:$data->monto_solicitado),2,".",",");
				},
				'filter'=>null,
			),
			'monto_autorizado'=>array(
				'name'=>'monto_autorizado',
				'type'=>'raw',
				'value'=>function($data){
					return number_format((isset($data->id_grupo_cliente)?$data->montoSolidarioAceptado:$data->monto_autorizado),2,".",",");
				},
				'filter'=>null,
			),
			'entregable'=>array(
				'name'=>'entregable',
				'value'=>'number_format($data->entregable,2,".",",")',
				'filter'=>null,
			),
			'montoDispuesto'=>array(
				'name'=>'montoDispuesto',
				'value'=>'number_format($data->montoDispuesto,2,".",",")',
				'filter'=>null,
			),
			'montoDispersion'=>array(
				'name'=>'montoDispersion',
				'value'=>'number_format($data->montoDispersion,2,".",",")',
				'filter'=>null,
			),
			'fechaDispersion'=>array(
				'name'=>'fechaDispersion',
				'value'=>'$data->fechaDispersion',
				'filter'=>null,
			),
			'id_producto'=>array(
				'name'=>'id_producto',
				'value'=>'$data->id_producto0->nombre',
				'filter'=>$this->getProductos(false, false, false),
			),
			'id_moneda'=>array(
				'name'=>'id_moneda',
				'value'=>'$data->id_moneda0->clave',
				'filter'=>$this->getMonedas(),
			),
			'tipo_cobro'=>array(
				'name'=>'tipo_cobro',
				'value'=>null,
				'filter'=>$this->getTiposCobros(),
			),
			'plazo_solicitado'=>array(
				'name'=>'plazo_solicitado',
				'value'=>null,
				'filter'=>null,
			),
			'plazo_autorizado'=>array(
				'name'=>'plazo_autorizado',
				'value'=>null,
				'filter'=>null,
			),
			'nombre_tasa_referencia'=>array(
				'name'=>'nombre_tasa_referencia',
				'value'=>null,
				'filter'=>$this->getTasasReferencia(),
			),
			'calificacion_calculada'=>array(
				'name'=>'calificacion_calculada',
				'value'=>null,
				'filter'=>null,
			),
			'calificacion_asignada'=>array(
				'name'=>'calificacion_asignada',
				'value'=>null,
				'filter'=>null,
			),
			'status_calculado'=>array(
				'name'=>'status_calculado',
				'value'=>null,
				'filter'=>null,
			),
			'status_asignado'=>array(
				'name'=>'status_asignado',
				'type'=>'raw',
				'value'=>function($data){
					return (!isset($data->id_grupo_cliente)?(isset($data->status_asignado)?$data->status_asignado:$data->status_calculado):$data->statusSolidario);
				},
				'filter'=>$this->getStatus(),
			),
			'id_status'=>array(
				'name'=>'id_status',
				'value'=>'$data->id_status0->nombre',
				'filter'=>$this->getStatusSolicitudes(),
			),
			'id_estatus_cobro'=>array(
				'name'=>'id_estatus_cobro',
				'value'=>'$data->id_estatus_cobro0->nombre',
				'filter'=>$this->getEstatusSolicitudesCobro(),
			),
			'id_estatus_pago'=>array(
				'name'=>'id_estatus_pago',
				'value'=>'$data->id_estatus_pago0->estatus_pago',
				'filter'=>$this->getEstatusSolicitudesPago(),
			),
			'autorizador'=>array(
				'name'=>'autorizador',
				'value'=>'$data->autorizador',
				'filter'=>$this->getAutorizadores(),
			),
			'sesion_comite'=>array(
				'name'=>'sesion_comite',
				'value'=>null,
				'filter'=>null,
			),
			'riesgo_buro'=>array(
				'name'=>'riesgo_buro',
				'value'=>null,
				'filter'=>null,
			),
			'cartera_vencida'=>array(
				'name'=>'cartera_vencida',
				'type'=>'raw',
				'value'=>function($data){
					return (( isset($data->cartera_vencida) && $data->cartera_vencida==1 )? "Cartera Vencida": "Cartera Vigente");
				},
				'filter'=>$this->getCarteraVencidaList(),
			),
			'id_supervisor'=>array(
				'name'=>'id_supervisor',
				'value'=>'$data->id_supervisor0->id_usuario0->fullName',
				'filter'=>$this->getSupervisores(),
			),
			'idEjecutivo'=>array(
				'name'=>'idEjecutivo',
				'type'=>'raw',
				'value'=>function($data){
					return (isset($data->id_grupo_cliente))?$data->id_grupo_cliente0->id_usuario0->fullName:$data->id_cliente0->id_ejecutivo0->id_usuario0->fullName;
				},
				'filter'=>$this->getEjecutivos(),
			),
			'id_sucursal'=>array(
				'name'=>'id_sucursal',
				'value'=>'$data->id_cliente0->id_sucursal0->nombre',
				'filter'=>$this->getSucursales(),
			),
			'id_activo_arrendamiento'=>array(
				'name'=>'id_activo_arrendamiento',
				'value'=>'$data->id_activo_arrendamiento0->arrendamiento',
				'filter'=>$this->getEquipoActivo(),
			),
			'id_empresa'=>array(
				'name'=>'id_empresa',
				'value'=>'$data->id_empresa0->nombre_comercial',
				'filter'=>$this->getEmpresas(),
			),
			'id_fondeadora'=>array(
				'name'=>'id_fondeadora',
				'value'=>'$data->id_fondeadora0->clave',
				'filter'=>$this->getFondeadoras(),
			),
			'id_aportes_fondeadores'=>array(
				'name'=>'id_aportes_fondeadores',
				'value'=>'$data->id_aportes_fondeadores1->clave',
				'filter'=>$this->getAporteFondeadoras(),
			),
			'numero_disposiciones'=>array(
				'name'=>'numero_disposiciones',
				'value'=>null,
				'filter'=>null,
			),
			'proceso'=>array(
				'name'=>'proceso',
				'value'=>null,
				'filter'=>$this->getProcesos(),
			),
            'id_tipo_cartera'=>array(
                'name'=>'id_tipo_cartera',
                'value'=>'$data->id_tipo_cartera0->nombre',
                'filter'=>$this->getTiposCartera(),
            ),
            'status_pre'=>array(
                'name'=>'status_pre'
            ),
            'folio_pre'=>array(
                'name'=>'folio_pre'
			),
			'monto_preautorizado'=>array(
				'name'=>'monto_preautorizado',
				'value'=>'number_format($data->monto_preautorizado,2,".",",")',
				'filter'=>null,
			),
			'nombre_banco'=>array(
				'name'=>'nombre_banco',
				'value'=>'$data->id_nombre_banco0->nombre_banco',
				'filter'=>$this->getBancosSTP(),
			),
		);
		if (array_key_exists($columna, $columnas)) {
			$atributos=$columnas[$columna];
		}else{
			$atributos = array('name' => $columna );
		}
		return $atributos;
	}
	public function getProcesos(){
		$data=array(
				'Generar solicitud'=>'Generar solicitud',
				'Integración checklist'=>'Integración checklist',
				'Autorización de crédito'=>'Autorización de crédito',
				'Rechazado'=>'Rechazado',
				'Firma de contrato digital'=>'Firma de contrato digital',
				'Disposición del crédito'=>'Disposición del crédito',
				'Cobranza del crédito'=>'Cobranza del crédito',
				'Liquidación del crédito'=>'Liquidación del crédito',
				'Reestructurado'=>'Reestructurado',
				'Quebrantado'=>'Quebrantado',
		);
		return $data;
	}
	public function getColumnasAdicionalesGrid($columna){
		$variables=SolicitudesVariables::model()->findAll();
		foreach($variables as $variable){
			// $valor=SolicitudesDatos::model()->find("id_solicitud_variable=".$variable->id);
			// $r="'".$valor->valor."'";
			// $valor=SolicitudesDatos::model()->find("id_solicitud_variable=".$variable->id);
			// $r="'".(SolicitudesDatos::model()->find("id_solicitud_variable=".$variable->id))->valor."'";
			// 'value'=>"'".(SolicitudesDatos::model()->find("id_solicitud_variable=".$variable->id." AND id_solicitud=42"))->valor."'",
			$columnas[$variable->clave]=array(
				'name' =>'variables_adicionales',
				'header' =>$variable->variable,
				'value'=>'(SolicitudesDatos::model()->find("id_solicitud_variable='.$variable->id.' AND id_solicitud=$data->id"))->valor',
				'filter'=> null,
			);
		}
		if (array_key_exists($columna, $columnas)) {
			$atributos=$columnas[$columna];
		}else{
			$atributos = array('name' => $columna );
		}
		return $atributos;
	}
	public function getTipoConsultaBuro(){
		$data = array(
			"A" => "Usuario Autorizado",
			"I" => "Individual",
			"J" => "Mancomunado",
		);
		return $data;
	}
	public function getTipoContratoBuro(){
		$data = array(
			"AF"=> "Aparatos /Muebles",
			"OA"=> "Otros adeudos vencidos (PFAE)",
			"AG"=> "Agropecuario (PFAE)",
			"PA"=> "Préstamo para Personas Físicas con Actividad Empresarial (PFAE)",
			"AL"=> "Arrendamiento Automotriz",
			"PB"=> "Editorial",
			"AP"=> "Aviación",
			"PG"=> "PGUE - Préstamo como garantía de unidades industriales para PFAE",
			"AU"=> "Compra de Automóvil",
			"PL"=> "Préstamo personal",
			"BD"=> "Fianza",
			"PN"=> "Préstamo de nómina",
			"BT"=> "Bote / Lancha",
			"PQ"=> "Quirografario (PFAE)",
			"CC"=> "Tarjeta de Crédito",
			"PR"=> "Prendario (PFAE)",
			"CE"=> "Cartas de Crédito (PFAE)",
			"PS"=> "Pago de Servicios",
			"CF"=> "Crédito fiscal",
			"RC"=> "Reestructurado (PFAE)",
			"CL"=> "Línea de Crédito",
			"RD"=> "Redescuento (PFAE)",
			"CO"=> "Consolidación",
			"RE"=> "Bienes Raíces",
			"CS"=> "Crédito Simple (PFAE)",
			"RF"=> "Refaccionario (PFAE)",
			"CT"=> "Con Colateral (PFAE)",
			"RN"=> "Renovado (PFAE)",
			"DE"=> "Descuentos (PFAE)",
			"RV"=> "Vehículo Recreativo",
			"EQ"=> "Equipo",
			"SC"=> "Tarjeta garantizada",
			"FI"=> "Fideicomiso (PFAE)",
			"SE"=> "Préstamo garantizado",
			"FT"=> "Factoraje",
			"SG"=> "Seguros",
			"HA"=> "Habilitación o Avío (PFAE)",
			"SM"=> "Segunda hipoteca",
			"HE"=> "Préstamo tipo 'Home Equity'",
			"ST"=> "Préstamo para estudiante",
			"HI"=> "Mejoras a la casa",
			"TE"=> "Tarjeta de Crédito Empresarial",
			"LS"=> "Arrendamiento",
			"UK"=> "Desconocido",
			"LR"=> "Línea de Crédito Reinstalable",
			"US"=> "Préstamo no garantizado",
			"MI"=> "Otros",
		);
		return $data;
	}
	public function getTipoProductoBuro($version = 'v1'){
		if ($version == 'v1') {
			$data = array(
				"001"=>"Reporte de Crédito",
				"501"=>"Informe Buró",
				"004"=>"Reporte de Crédito con BC Score + Índice de Capacidad Crediticia (ICC)",
				"504"=>"Informe Buró con BC Score + Índice de Capacidad Crediticia (ICC)",
				"006"=>"Reporte de Crédito con Score Buró No Hit",
				"506"=>"Informe Buró con Score Buró No Hit",
				"007"=>"Reporte de Crédito con BC Score",
				"507"=>"Informe Buró con BC Score",
				"009"=>"Reporte de Crédito con Score Buró Microfinancieras",
				"509"=>"Informe Buró con Score Buró Microfinancieras",
				"010"=>"Reporte de Crédito con Score Buró Tarjeta de Crédito",
				"510"=>"Informe Buró con Score Buró Tarjeta de Crédito",
				"011"=>"Reporte de Crédito con Score Buró Telecomunicaciones",
				"511"=>"Informe Buró con Score Buró Telecomunicaciones",
				"012"=>"Reporte de Crédito con Score Buró Propensión de Tarjeta de Crédito",
				"512"=>"Informe Buró con Score Buró Propensión de Tarjeta de Crédito",
				"013"=>"Reporte de Crédito con Score Buró Prevención de Fraudes",
				"513"=>"Informe Buró con Score Buró Prevención de Fraudes",
				"016"=>"Reporte de Crédito con Estimador de Ingresos",
				"516"=>"Informe Buró con Estimador de Ingresos",
				"040"=>"Reporte de Crédito con BC Score + Score Buró Tarjeta de Crédito",
				"540"=>"Informe Buró con BC Score + Score Buró Tarjeta de Crédito",
				"041"=>"Reporte de Crédito con BC Score + Score Buró Microfinancieras",
				"541"=>"Informe Buró con BC Score + Score Buró Microfinancieras",
				"042"=>"Reporte de Crédito con Score Buró Tarjeta de Crédito + Score Buró Microfinancieras",
				"542"=>"Informe Buró con Score Buró Tarjeta de Crédito + Score Buró Microfinancieras",
				"045"=>"Reporte de Crédito con BC Score + Score Buró Tarjeta de Crédito + Índice de Capacidad Crediticia (ICC)",
				"545"=>"Informe Buró con BC Score + Score Buró Tarjeta de Crédito + Índice de Capacidad Crediticia (ICC)",
				"046"=>"Reporte de Crédito con Score Buró Tarjeta de Crédito + Índice de Capacidad Crediticia (ICC) +  Score Buró Microfinancieras",
				"546"=>"Informe Buró con Score Buró Tarjeta de Crédito + Índice de Capacidad Crediticia (ICC) +  Score Buró Microfinancieras",
				"047"=>"Reporte de Crédito con BC Score + Score Buró No Hit",
				"547"=>"Informe Buró con BC Score + Score Buró No Hit",
				"048"=>"Reporte de Crédito con BC Score + Índice de Capacidad Crediticia (ICC) + Score Buró Microfinancieras",
				"548"=>"Informe Buró con BC Score + Índice de Capacidad Crediticia (ICC) + Score Buró Microfinancieras",
				"049"=>"Reporte de Crédito con Score Buró Propensión Tarjeta de Crédito + BC Score",
				"549"=>"Informe Buró con Score Buró Propensión Tarjeta de Crédito + BC Score",
				"052"=>"Reporte de Crédito con Score Buró Propensión Tarjeta de Crédito + Score Buró Tarjeta de Crédito con ICC",
				"552"=>"Informe Buró con Score Buró Propensión Tarjeta de Crédito + Score Buró Tarjeta de Crédito  con ICC",
				"053"=>"Reporte de Crédito con Score Buró Tarjeta de Crédito + Índice de Capacidad Crediticia (ICC)",
				"553"=>"Informe Buró con Score Buró Tarjeta de Crédito + Índice de Capacidad Crediticia (ICC)",
				"054"=>"Reporte de Crédito con Score Buró Microfinancieras + Índice de Capacidad Crediticia (ICC)",
				"554"=>"Informe Buró con Score Buró Microfinancieras + Índice de Capacidad Crediticia (ICC)",
				"055"=>"Reporte de Crédito con Score Buró Propensión Tarjeta de Crédito + BC Score con ICC",
				"555"=>"Informe Buró con Score Buró Propensión Tarjeta de Crédito + BC Score con ICC",
				"056"=>"Reporte de Crédito con Score Buró Propensión Tarjeta de Crédito + Score Buró Tarjeta de Crédito",
				"556"=>"Informe Buró con Score Buró Propensión Tarjeta de Crédito + Score Buró Tarjeta de Crédito",
				"057"=>"Reporte de Crédito con Score Buró Telecomunicaciones + Índice de Capacidad Crediticia (ICC)",
				"557"=>"Informe Buró con Score Buró Telecomunicaciones + Índice de Capacidad Crediticia (ICC)",
				"058"=>"Reporte de Crédito con Score Buró Fraude + BC Score",
				"558"=>"Informe Buró con Score Buró Fraude + BC Score",
				"059"=>"Reporte de Crédito con Estimador de Ingresos + BC Score",
				"559"=>"Informe Buró con Estimador de Ingresos + BC Score",
				"060"=>"Reporte de Crédito con Estimador de Ingresos + BC Score + Índice de Capacidad Crediticia (ICC)",
				"560"=>"Informe Buró con Estimador de Ingresos + BC Score + Índice de Capacidad Crediticia (ICC)",
				"017"=>"Reporte de Crédito con Score Buró Histórico",
				"517"=>"Informe Buró con Score Buró Histórico",
				"207"=>"Reporte de Crédito con BC Score Integrado",
				"N/A"=>"N/A",
			);
		} elseif ($version == 'v2') {
			$data = array(
				"001"=>"Reporte de Crédito",
				"004"=>"Reporte de Crédito con BC Score + Índice de Capacidad Crediticia (ICC)",
				"006"=>"Reporte de Crédito con Score Buró No Hit",
				"007"=>"Reporte de Crédito con BC Score",
				"009"=>"Reporte de Crédito con Score Buró Microfinancieras",
				"010"=>"Reporte de Crédito con Score Buró Tarjeta de Crédito",
				"011"=>"Reporte de Crédito con Score Buró Telecomunicaciones",
				"013"=>"Reporte de Crédito con Score Buró Prevención de Fraudes",
				"016"=>"Reporte de Crédito con Estimador de Ingresos",
				"017"=>"Reporte de Crédito con Score Buró Histórico",
				"040"=>"Reporte de Crédito con BC Score + Score Buró Tarjeta de Crédito",
				"041"=>"Reporte de Crédito con BC Score + Score Buró Microfinancieras",
				"042"=>"Reporte de Crédito con Score Buró Tarjeta de Crédito + Score Buró Microfinancieras",
				"045"=>"Reporte de Crédito con BC Score + Score Buró Tarjeta de Crédito + Índice de Capacidad Crediticia (ICC)",
				"046"=>"Reporte de Crédito con Score Buró Tarjeta de Crédito + Índice de Capacidad Crediticia (ICC) +  Score Buró Microfinancieras",
				"047"=>"Reporte de Crédito con BC Score + Score Buró No Hit",
				"048"=>"Reporte de Crédito con BC Score + Índice de Capacidad Crediticia (ICC) + Score Buró Microfinancieras",
				"053"=>"Reporte de Crédito con Score Buró Tarjeta de Crédito + Índice de Capacidad Crediticia (ICC)",
				"054"=>"Reporte de Crédito con Score Buró Microfinancieras + Índice de Capacidad Crediticia (ICC)",
				"057"=>"Reporte de Crédito con Score Buró Telecomunicaciones + Índice de Capacidad Crediticia (ICC)",
				"058"=>"Reporte de Crédito con Score Buró Fraude + BC Score",
				"059"=>"Reporte de Crédito con Estimador de Ingresos + BC Score",
				"060"=>"Reporte de Crédito con Estimador de Ingresos + BC Score + Índice de Capacidad Crediticia (ICC)",
				"068"=>"Reporte de Crédito con BC Score Telecomunicaciones + Score Buró No Hit",
				"075"=>"Reporte de Crédito con BC Score + Score TDC + Estimador de Ingresos",
				"077"=>"Reporte de Crédito con BC Score + ICC+ Estimador de Ingresos o Reporte de Crédito + Score No Hit + Estimador de Ingresos",
				"207"=>"Reporte de Crédito con BC Score Integrado"
			);
		}
		
		uasort($data, function($a, $b) {
			return strcmp($a, $b);
		});

		return $data;
	}
	public function getInterpretadorBuro(){
		$data = array(
			"Y"=>"Generar el Interpretador Buró Personas Morales",
			"N"=>"No generar el Interpretador Buró Personas Morales"
		);
		return $data;
	}
	public function getConsultaBuro(){
		$data = array(
			"Y"=>"Consulta real en producción",
			"N"=>"Consulta de prueba"

		);
		return $data;
	}
	public function getTipoReporteBuro(){
		$data = array(
			"RCE" =>"Reporte de Crédito Especial",
			"RCO" =>"Reporte de Crédito Ordinario",
			"CALIFICA" =>"Reporte con Características CNBV",
			"MI_BURO" =>"Reporte de Crédito Especial Individual",
			"INFORME_BURO" =>"Reporte de Crédito Ordinario Individual",
			"MONITOR" =>"Reporte de Monitoreo",
			"REPORTE_ACC_AV" =>"Reporte de Accionistas y Avalistas"
		);
		return $data;
	}
	public function getVariablesCnbv(){
		$data = array(
			"Y"=>"Incluir variables CNBV",
			"N"=>"No incluir variables CNBV",
		);
		return $data;
	}
	public function getGenerarConsolidado(){
		$data = array(
			"Y"=>"Generar Reporte Consolidado",
			"N"=>"No generar Reporte Consolidado",
		);
		return $data;
	}
	public function getFirmaAutografa(){
		$data = array(
			"Y"=>"El Usuario cuenta con la firma autógrafa del Cliente",
			"N"=>"El Usuario NO cuenta con la firma autógrafa del Cliente y en caso de ser requerida, la respuesta entrega sólo los datos generales del Cliente",
		);
		return $data;
	}
	public function getScoreCode(){
		$data = array(
			"009"=>"Indicar en caso de que se requiera solicitar la generación de Score de una Persona Moral y/o sus accionistas (máximo cinco)",
		);
		return $data;
	}
    private function addErrSchema($errText, $errModulo, $errRefer) {

        // Function that generates an error array to later create the setFlash message,
        // originally used for Credit Bureau request  Mar 11, 2022 **jbatun**
        //
        array_push($errArrBCc, array('errMsj' => $errText, 'errModulo' => $errModulo, 'errRefer'=>$errRefer));

    }

	public function getXMLBuro($clientes,$solicitudes,$numero_referencia_operador,
	$producto_requerido,$identificador_buro,
	$tipo_consulta,$tipo_contrato){

        $cliente_idCurr = $clientes["id"];
        $empresa=Empresa::model()->find();
        $apiConfig=CuentasUsuariosPass::model()->find("producto_conexion='buro' AND tipo='Consultar' AND tipo_persona='$clientes->tipo_persona' AND por_defecto=1");
		$xml = new DOMDocument('1.0', 'UTF-8');

		//Fecha de Nacimiento
		if (isset($clientes['fecha_nacimiento']) && !is_null($clientes['fecha_nacimiento'])) {
			$fecha_nacimiento = date("dmY",strtotime($clientes['fecha_nacimiento']));
		}

		$clientesBuro= array();

		foreach ($clientes as $key => $cliente) {
			//Validaciones
			if ($key=="apellido_paterno") {
				$cliente = $clientes->id_pld_cliente0->apellido_paterno;
                if (strlen(trim($cliente))> 3) {$this->addErrSchema("Campo <b>apellido Paterno<b> requerido", "Clientes", "$cliente->id");}
			}
			//Apellido Materno
			if ($key=="apellido_materno") {
				if (!is_null($clientes->id_pld_cliente0->apellido_materno) && $clientes->id_pld_cliente0->apellido_materno!="") {
					$cliente=$clientes->id_pld_cliente0->apellido_materno;
				}else{
					$cliente="NO PROPORCIONADO";
				}
			}
			//Nacionalidad
			if ($key=="pais") {
				if (!is_null($clientes->pais) && isset($clientes->pais) && $clientes->pais!="") {
					$pais = Paises::model()->find('pais=:pais',array(':pais'=>$clientes->pais));
					$cliente=$pais->iso;
				}else{
                    $this->addErrSchema("Campo <b>pais<b> requerido", "Clientes", "$cliente->id");
                }
			}
			//Estado civil
			if ($key=="estado_civil") {
                if (!is_null($clientes->estado_civil) && isset($clientes->estado_civil) && $clientes->estado_civil!="") {
					// CAUTION -> correct search value "asado", because if you search for "casado" the value is thundered
                    if (!empty(strpos(strtolower(trim($clientes->estado_civil)), 'asado'))> 0) {
						$cliente = "M";
					}elseif ($clientes->estado_civil=="Divorciado") {
						$cliente = "D";
					}elseif ($clientes->estado_civil=="Soltero") {
						$cliente = "S";
					}elseif ($clientes->estado_civil=="Viudo") {
						$cliente = "W";
					}elseif ($clientes->estado_civil=="Union Libre") {
						$cliente = "F";
					}else {
                        $this->addErrSchema("Campo <b>estado civil<b> requerido", "Clientes", "$cliente->id");
                    }
                } else {
                    $this->addErrSchema("Campo <b>genero<b> es requerido", "Clientes", "$cliente->id");
                }
                //Genero
                // al mover el campo genero a pld se busca forzadamente para el llenado
                $clientePLD = PldClientes::model()->findBySql("Select * from pld_clientes where id_cliente =:id_cliente", array(":id_cliente" => $cliente_idCurr));
                if ($clientePLD->genero == "H") {
                    $clientesBuro["genero"] = "M";
                } elseif ($clientePLD->genero == "M") {
                    $clientesBuro["genero"] = "F";
                } else {
                    $clientesBuro["genero"] = "";
                }

                //<ClaveImpuestosOtroPais> si es mexicano se presenta la CURP
                if ($clientePLD->nacionalidad =='Mexicano'){
                    $clientesBuro["ClaveImpuestosOtroPais"] = $clientes->curp;
                }

			}
            // identificacion_oficial
            if ($key=="ine") {
                if (!is_null($clientes->ine) && isset($clientes->ine) && $clientes->ine!="") {
                    $cliente=str_pad(trim($clientes->ine), 20, " ", STR_PAD_LEFT);
                }else{
                    $this->addErrSchema("Campo <b>identificacion oficial numero<b>  es requerido", "Clientes", "$cliente->id");
                }
            }

            // dependientes_economicos
            if ($key=="dependientes_economicos") {
                if (!is_null($clientes->dependientes_economicos) && isset($clientes->dependientes_economicos) && $clientes->dependientes_economicos!="") {
                    $cliente=sprintf('%02d',$clientes->dependientes_economicos);
                }
            }

			//Dirreccion completa
			if ($key=="direccion_completa") {
				$cliente = $clientes->id_pld_cliente0->getDireccionBuro();
				if (strlen($cliente)>40) {
					$cliente2 = substr($cliente, 41,79);
					$cliente = substr($cliente,0,40);
					$valor2 = strtoupper($cliente2);
					$search2 = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
					$replace2 = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
					$valor2 = str_replace($search2, $replace2, $valor2);
					$clientesBuro["direccion_completa2"] = $valor2;
				}
			}
			//Localidad
			if (isset($clientes->id_pld_cliente0->localidad_pld0)) {
				$clienteLocalidad = $clientes->id_pld_cliente0->localidad_pld0->localidad;
				$valorLocalidad = strtoupper($clienteLocalidad);
				$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
				$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
				$valorLocalidad = str_replace($search, $replace, $valorLocalidad);
				if(strpos($valorLocalidad,","))$valorLocalidad = substr($valorLocalidad,0,strpos($valorLocalidad,","));
				$clientesBuro["localidad_pld"] = $valorLocalidad;
			}else{
				$clienteLocalidad = $clientes->localidad;
				$valorLocalidad = strtoupper($clienteLocalidad);
				$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
				$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
				$valorLocalidad = str_replace($search, $replace, $valorLocalidad);
				if(strpos($valorLocalidad,","))$valorLocalidad = substr($valorLocalidad,0,strpos($valorLocalidad,","));
				$clientesBuro["localidad_pld"] = $valorLocalidad;
			}
			//Estado
			if ($key=="estado") {
				if (!is_null($clientes->estado) && isset($clientes->estado)  && $clientes->estado!="") {
					$estado = Estados::model()->findBySql("SELECT * from estados where LOWER(estado) =:estado",array(":estado"=>$clientes->estado));
                    $cliente = $estado->clave_buro;
				}
			}

			//Pais
			if ($key=="pais") {
				if (!is_null($clientes->pais) && isset($clientes->pais)  && $clientes->pais!="") {
					$pais = Paises::model()->find("pais=:pais",array(":pais"=>$clientes->pais));
					$cliente = $pais->iso;
				}
			}
			$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
			$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
			$valor = str_replace($search, $replace, $cliente);
			$valor = strtoupper($valor);
			$clientesBuro[$key] = $valor;
		}

		//Empleo
        $consultaEmpleo = EmpleoCliente::model()->find("id_cliente=:cliente",array(":cliente"=>$clientes->id));

        $empleoBuro = array();
		foreach ($consultaEmpleo as $llave => $info) {
			if ($llave=="empresa") {
				if (!is_null($info) && isset($info) && $info!="") {
					$info = $info;
				}else{
					$info = "NO PROPORCIONADO";
				}
			}
			if ($llave=="calle") {
				$info = $consultaEmpleo->getDireccionBuro();
				if (strlen($info)>40) {
					$direccion2 = substr($info, 41,79);
					$info = substr($info,0,40);
					$valor2 = strtoupper($direccion2);
					$search2 = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
					$replace2 = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
					$valor2 = str_replace($search2, $replace2, $valor2);
					$empleoBuro["calle2"] = $valor2;
				}
			}
			if ($llave=="estado") {
				if (!is_null($consultaEmpleo->estado) && isset($consultaEmpleo->estado)  && $consultaEmpleo->estado!="") {
					$estado = Estados::model()->findBySql("SELECT * from estados where LOWER(estado) =:estado",array(":estado"=>$consultaEmpleo->estado));
                    $info = $estado->clave_buro;
				}
			}
			//Fecha Contratacion
			if ($llave=="fecha_contratacion") {
				if ($consultaEmpleo->fecha_contratacion!="" && !is_null($consultaEmpleo->fecha_contratacion) && $consultaEmpleo->fecha_contratacion!="0000-00-00" ) {
					$info = date("dmY",strtotime($consultaEmpleo->fecha_contratacion));
				}else{
					$info = "";
				}
			}
			//Fecha Ultimo Dia
			if ($llave=="fecha_ultimo_dia") {
				if ($consultaEmpleo->fecha_ultimo_dia!="" && !is_null($consultaEmpleo->fecha_ultimo_dia) && $consultaEmpleo->fecha_ultimo_dia!="0000-00-00" ) {
					$info = date("dmY",strtotime($consultaEmpleo->fecha_ultimo_dia));
				}else{
					$info = "";
				}
			}
			$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
			$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
			$valor = str_replace($search, $replace, $info);
			$valor = strtoupper($valor);
			$empleoBuro[$llave] = $valor;
		}

		//<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:bean="http://bean.consulta.ws.bc.com/">

		$xx =$xml->appendChild($xml->createElementNS("http://schemas.xmlsoap.org/soap/envelope/","soapenv:Envelope",""));
		$xb=$xx->appendChild($xml->createElement("soapenv:Body",""));
		$xc=$xb->appendChild($xml->createElement("bean:consultaXML",""));
		$consulta=$xc->appendChild($xml->createElementNS("","Consulta"));
		$personas=$consulta->appendChild($xml->createElement("Personas",""));
		$persona=$personas->appendChild($xml->createElement("Persona",""));
		$encabezado=$persona->appendChild($xml->createElement("Encabezado",""));

		$version=$encabezado->appendChild($xml->createElement("Version","13"));
		if(is_null($numero_referencia_operador) || $numero_referencia_operador==""){
			//Genero un consecutivo
			$referencia=$clientes->id.date("Y").date("m").date("d");
			$referencia=str_pad(trim($referencia), 25, "0", STR_PAD_LEFT);
			$referencia=$numeroReferenciaOperador=$encabezado->appendChild($xml->createElement("NumeroReferenciaOperador",$referencia));

		}else{
			$numeroReferenciaOperador=$encabezado->appendChild($xml->createElement("NumeroReferenciaOperador",$numero_referencia_operador));
		}

		$productoRequerido=$encabezado->appendChild($xml->createElement("ProductoRequerido",$producto_requerido));
		$clavePais=$encabezado->appendChild($xml->createElement("ClavePais","MX"));
		$identificadorBuro=$encabezado->appendChild($xml->createElement("IdentificadorBuro",$identificador_buro));
		$claveUsuario=$encabezado->appendChild($xml->createElement("ClaveUsuario",(($apiConfig->usuario!="")?$apiConfig->usuario:$empresa->nombre_usuario_buro)));
		$password=$encabezado->appendChild($xml->createElement("Password",(($apiConfig->password!="")?$apiConfig->password:$empresa->clave_buro)));
		$tipoConsulta=$encabezado->appendChild($xml->createElement("TipoConsulta",$tipo_consulta));
		$tipoContrato=$encabezado->appendChild($xml->createElement("TipoContrato",$tipo_contrato));

		$claveUnidadMonetaria=$encabezado->appendChild($xml->createElement("ClaveUnidadMonetaria","MX"));
		$idioma=$encabezado->appendChild($xml->createElement("Idioma","ES"));
		$tipoSalida=$encabezado->appendChild($xml->createElement("TipoSalida","01"));

		$nombre=$persona->appendChild($xml->createElement("Nombre",""));
		$apellidoPaterno=$nombre->appendChild($xml->createElement("ApellidoPaterno",$clientesBuro['apellido_paterno']));
		$apellidoMaterno=$nombre->appendChild($xml->createElement("ApellidoMaterno",$clientesBuro['apellido_materno']));
		$apellidoAdicional=$nombre->appendChild($xml->createElement("ApellidoAdicional",""));
		$primerNombre=$nombre->appendChild($xml->createElement("PrimerNombre",$clientesBuro['nombre']));
		$segundoNombre=$nombre->appendChild($xml->createElement("SegundoNombre",$clientesBuro['nombre2']));
		$fechaNacimiento=$nombre->appendChild($xml->createElement("FechaNacimiento",$fecha_nacimiento));
		$RFC=$nombre->appendChild($xml->createElement("RFC",$clientesBuro['rfc']));
		$prefijo=$nombre->appendChild($xml->createElement("Prefijo",""));
		$sufijo=$nombre->appendChild($xml->createElement("Sufijo",""));
		$nacionalidad=$nombre->appendChild($xml->createElement("Nacionalidad",$clientesBuro['pais']));
		$residencia=$nombre->appendChild($xml->createElement("Residencia",""));
		$numeroLicenciaConducir=$nombre->appendChild($xml->createElement("NumeroLicenciaConducir",""));
		$estadoCivil=$nombre->appendChild($xml->createElement("EstadoCivil",$clientesBuro['estado_civil']));
		$sexo=$nombre->appendChild($xml->createElement("Sexo",$clientesBuro['genero']));
		$numeroCedulaProfesional=$nombre->appendChild($xml->createElement("NumeroCedulaProfesional",""));
		$numeroRegistroElectoral=$nombre->appendChild($xml->createElement("NumeroRegistroElectoral",$clientesBuro['ine']));
		$claveImpuestosOtroPais=$nombre->appendChild($xml->createElement("ClaveImpuestosOtroPais",$clientesBuro['ClaveImpuestosOtroPais']));
		$claveOtroPais=$nombre->appendChild($xml->createElement("ClaveOtroPais",""));
		$numeroDependientes=$nombre->appendChild($xml->createElement("NumeroDependientes",$clientesBuro['dependientes_economicos']));
		$edadesDependientes=$nombre->appendChild($xml->createElement("EdadesDependientes",""));

		$domicilios=$persona->appendChild($xml->createElement("Domicilios",""));
		$domicilio=$domicilios->appendChild($xml->createElement("Domicilio",""));
		$direccion1=$domicilio->appendChild($xml->createElement("Direccion1",$clientesBuro["direccion_completa"]));
		$direccion2=$domicilio->appendChild($xml->createElement("Direccion2",isset($clientesBuro["direccion_completa2"])?$clientesBuro["direccion_completa2"]:""));
		$coloniaPoblacion=$domicilio->appendChild($xml->createElement("ColoniaPoblacion",$clientesBuro["colonia"]));
		$delegacionMunicipio=$domicilio->appendChild($xml->createElement("DelegacionMunicipio",$clientesBuro["municipio"]));
		$ciudad=$domicilio->appendChild($xml->createElement("Ciudad",isset($clientesBuro["localidad_pld"])?$clientesBuro["localidad_pld"]:""));
		$estado=$domicilio->appendChild($xml->createElement("Estado",$clientesBuro["estado"]));
		$CP=$domicilio->appendChild($xml->createElement("CP",$clientes["codigo_postal"]));
		$fechaResidencia=$domicilio->appendChild($xml->createElement("FechaResidencia",""));
		$numeroTelefono=$domicilio->appendChild($xml->createElement("NumeroTelefono",""));
		$extension=$domicilio->appendChild($xml->createElement("Extension",""));
		$fax=$domicilio->appendChild($xml->createElement("Fax",""));
		$tipoDomicilio=$domicilio->appendChild($xml->createElement("TipoDomicilio",""));
		$indicadorEspecialDomicilio=$domicilio->appendChild($xml->createElement("IndicadorEspecialDomicilio",""));
		$codPais=$domicilio->appendChild($xml->createElement("CodPais",$clientesBuro['pais']));

		$empleos=$persona->appendChild($xml->createElement("Empleos",""));
		$empleo=$empleos->appendChild($xml->createElement("Empleo",""));
		$nombreEmpresa=$empleo->appendChild($xml->createElement("NombreEmpresa",isset($empleoBuro["empresa"])?$empleoBuro["empresa"]:""));
		$direccion1Empleo=$empleo->appendChild($xml->createElement("Direccion1",isset($empleoBuro["calle"])?$empleoBuro["calle"]:""));
		$direccion2Empleo=$empleo->appendChild($xml->createElement("Direccion2",isset($empleoBuro["calle2"])?$empleoBuro["calle2"]:""));
		$coloniaPoblacionEmpleo=$empleo->appendChild($xml->createElement("ColoniaPoblacion",$empleoBuro["colonia"]));
		$delegacionMunicipioEmpleo=$empleo->appendChild($xml->createElement("DelegacionMunicipio",$empleoBuro["municipio"]));
		$ciudadEmpleo=$empleo->appendChild($xml->createElement("Ciudad",$empleoBuro["ciudad"]));
		$estadoEmpleo=$empleo->appendChild($xml->createElement("Estado",$empleoBuro["estado"]));
		$CPEmpleo=$empleo->appendChild($xml->createElement("CP",$empleoBuro["codigo_postal"]));
		$numeroTelefonoEmpleo=$empleo->appendChild($xml->createElement("NumeroTelefono",$empleoBuro["telefono"]));
		$extensionEmpleo=$empleo->appendChild($xml->createElement("Extension",$empleoBuro["extension"]));
		$faxEmpleo=$empleo->appendChild($xml->createElement("Fax",$empleoBuro["fax"]));
		$cargo=$empleo->appendChild($xml->createElement("Cargo",$empleoBuro["puesto"]));
		$fechaContratacion=$empleo->appendChild($xml->createElement("FechaContratacion",$empleoBuro["fecha_contratacion"]));
		$claveMonedaSalario=$empleo->appendChild($xml->createElement("ClaveMonedaSalario",""));
		$salario=$empleo->appendChild($xml->createElement("Salario",""));
		$baseSalarial=$empleo->appendChild($xml->createElement("BaseSalarial",""));
		$numeroEmpleado=$empleo->appendChild($xml->createElement("NumeroEmpleado",""));
		$fechaUltimoDiaEmpleo=$empleo->appendChild($xml->createElement("FechaUltimoDiaEmpleo",$empleoBuro["fecha_ultimo_dia"]));
		$codPaisEmpleo=$empleo->appendChild($xml->createElement("CodPais","MX"));
		$xmlString=$xml->saveXML();

		$xmlString=str_replace('xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"', 'xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:bean="http://bean.consulta.ws.bc.com/"',$xmlString);
		$xmlString=str_replace(' xmlns=""', "",$xmlString);
		$xmlString=str_replace('<?xml version="1.0" encoding="UTF-8"?>', "",$xmlString);
		$xmlString=trim($xmlString);

        //echo htmlentities($xmlString);
		//die();

        $dataSend = json_decode(base64_encode($xmlString));
        $dataEnv = array(array("Headers", $_SERVER),
            array("Payload",  htmlentities($xmlString, ENT_COMPAT, 'UTF-8')));

		if($apiConfig->pruebaoproduccion==0){
			$url=(($apiConfig->url_test!="")?$apiConfig->url_test:"http://128.9.55.102:9080/WSConsultaBCC/WSConsultaService");
		}else{
			$url=(($apiConfig->url_conexion!="")?$apiConfig->url_conexion:"http://128.9.55.14:9080/WSConsultaBCC/WSConsultaService");
		} 

        //echo json_encode(BASE64_ENCODE(htmlentities($xmlString, ENT_COMPAT, 'UTF-8')));
        //die();

		$headers[]="Content-Type:text/xml";
		$ch=curl_init();

		curl_setopt($ch, CURLOPT_URL,$url);
		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
		curl_setopt($ch, CURLOPT_POSTFIELDS,$xmlString);
		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 300);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch,CURLOPT_CUSTOMREQUEST,"POST");

		$result=curl_exec($ch);
        //$result= "Done";
        //echo htmlentities($result, ENT_COMPAT, 'UTF-8');
        //die();
		curl_close($ch);
		curl_close($ch);

        array_push($dataEnv, array("Response", htmlentities($result, ENT_COMPAT, 'UTF-8')));
        array_push($dataEnv, array("UrlConsulta", $url));

        $dataStr = "[" . $this->wsTime() . "] [" . $_SERVER["REMOTE_ADDR"] . ":" . $_SERVER["REMOTE_PORT"] . "] " . base64_encode(json_encode($dataEnv)) . "\n";
        file_put_contents(  Yii::app()->basepath. "/customerFiles/BuroCredito/rqstBuroC-" . date("Ymd") . ".logs", $dataStr, FILE_APPEND);

        return $result;

	}

	public function getXMLBuroPM($clientes,$solicitudes){
		$empresa=Empresa::model()->find();
		$apiConfig=CuentasUsuariosPass::model()->find("producto_conexion='buro' AND tipo='Consultar' AND tipo_persona='$clientes->tipo_persona' AND por_defecto=1");
		$xml = new DOMDocument('1.0', 'UTF-8');

		if ($clientes->tipo_persona == "Persona Fisica" && $clientes->actividad_empresarial==1) {
			$tipoClienteBuro = "PFAE";
		}elseif ($clientes->tipo_persona == "Persona Moral") {
			$tipoClienteBuro = "PM";
		}

		$fecha_nacimiento="";
		if($tipoClienteBuro<>"PM"){
				//Fecha de Nacimiento
			if (isset($clientes['fecha_nacimiento']) && !is_null($clientes['fecha_nacimiento']) && $clientes['fecha_nacimiento']!="0000-00-00") {
				$fecha_nacimiento = date("dmY",strtotime($clientes['fecha_nacimiento']));
			}
		}/*else{ //Si se llega considerar validar cual tabla debe de llenar este dato
			$AccionistasSearch=AccionistasClientes::model()->findAll('id_cliente=:cliente',array(':cliente'=>2));
		}*/

		$clientesBuro= array();
		foreach ($clientes as $key => $cliente) {
			//Validaciones
			if ($key=="nombre") {
				if ($clientes->tipo_persona == "Persona Moral") {
					$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
					$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
					$valor2 = str_replace($search, $replace, $clientes->id_pld_cliente0->razon_social);
					$valor2 = strtoupper($valor2);
					$clientesBuro["nombre_moral"] = $valor2;
				}
			}
			if ($key=="nombre") {
				if ($clientes->tipo_persona == "Persona Fisica" && $clientes->actividad_empresarial==1) {
					$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
					$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
					$valor2 = str_replace($search, $replace, $cliente);
					$valor2 = strtoupper($valor2);
					$clientesBuro["primer_nombre_pfae"] = $valor2;
				}
			}
			if ($key=="nombre2") {
				if ($clientes->tipo_persona == "Persona Fisica" && $clientes->actividad_empresarial==1) {
					$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
					$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
					$valor2 = str_replace($search, $replace, $cliente);
					$valor2 = strtoupper($valor2);
					$clientesBuro["segundo_nombre_pfae"] = $valor2;
				}
			}
			if ($key=="apellido_paterno") {
				if ($clientes->tipo_persona == "Persona Fisica" && $clientes->actividad_empresarial==1) {
					$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
					$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
					$valor2 = str_replace($search, $replace, $cliente->apellido_paterno);
					$valor2 = strtoupper($valor2);
					$clientesBuro["apellido_paterno_pfae"] = $valor2;
				}
			}
			if ($key=="apellido_materno") {
				if ($clientes->tipo_persona == "Persona Fisica" && $clientes->actividad_empresarial==1) {
					$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
					$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
					$valor2 = str_replace($search, $replace, $cliente->apellido_materno);
					$valor2 = strtoupper($valor2);
					$clientesBuro["apellido_materno_pfae"] = $valor2;
				}
			}
			//Dirreccion completa
			if ($key=="direccion_completa") {
				$cliente = $clientes->getDireccionBuro();
			}
			//Localidad
			if (isset($clientes->localidad)) {
				$clienteLocalidad = $clientes->localidad;
				$valorLocalidad = strtoupper($clienteLocalidad);
				$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
				$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
				$valorLocalidad = str_replace($search, $replace, $valorLocalidad);
				if(strpos($valorLocalidad,","))$valorLocalidad = substr($valorLocalidad,0,strpos($valorLocalidad,","));
				$clientesBuro["localidad_pld"] = $valorLocalidad;
			}
			//Estado
			if ($key=="estado") {
				if (!is_null($clientes->estado) && isset($clientes->estado)  && $clientes->estado!="") {
					$estado = Estados::model()->find("estado=:estado",array(":estado"=>$clientes->estado));
					$cliente = $estado->clave_buro;
				}
			}
			//Pais
			if ($key=="pais") {
				if (!is_null($clientes->pais) && isset($clientes->pais)  && $clientes->pais!="") {
					$pais = Paises::model()->find("pais=:pais",array(":pais"=>$clientes->pais));
					$cliente = $pais->iso;
					if ($cliente!="MX") {
						$clienteExtranjero = $clientes->estado;
						$valorEstado = strtoupper($clienteExtranjero);
						$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
						$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
						$valorEstado = str_replace($search, $replace, $valorEstado);
						$clientesBuro["estado_extranjero"] = $valorEstado;
					}
				}
			}
			$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
			$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
			$valor = str_replace($search, $replace, $cliente);
			$valor = strtoupper($valor);
			$clientesBuro[$key] = $valor;
		}

		$consulta=$xml->appendChild($xml->createElementNS("","consulta"));

		//***************************************** ENCABEZADO **********************************************************/
		$encabezado=$consulta->appendChild($xml->createElement("encabezado",""));
		$usuario=$encabezado->appendChild($xml->createElement("usuario",(($apiConfig->usuario!="")?$apiConfig->usuario:$empresa->nombre_usuario_buro)));
		$contrasena=$encabezado->appendChild($xml->createElement("contrasena",(($apiConfig->password!="")?$apiConfig->password:$empresa->clave_buro)));
		$tipoReporte=$encabezado->appendChild($xml->createElement("tipoReporte",$solicitudes[0]['tipo_reporte_buro']));
		$formatoReporte=$encabezado->appendChild($xml->createElement("formatoReporte","XML"));
		$variablesCnbv=$encabezado->appendChild($xml->createElement("variablesCnbv",$solicitudes[0]['variables_cnbv']));
		$generarConsolidado=$encabezado->appendChild($xml->createElement("generarConsolidado",$solicitudes[0]['generar_consolidado']));
		$firmaAutografa=$encabezado->appendChild($xml->createElement("firmaAutografa",$solicitudes[0]['firma_autografa']));
		//***************************************** ENCABEZADO **********************************************************/

		//***************************************** PERSONA    **********************************************************/
		//***************************************************************************************************************/
		if($clientes->tipo_persona == "Persona Moral"){
			$persona=$consulta->appendChild($xml->createElement("persona",""));
			$rfc=$persona->appendChild($xml->createElement("rfc",$clientesBuro['rfc']));
			$nombre=$persona->appendChild($xml->createElement("nombre",isset($clientesBuro['nombre_moral'])?$clientesBuro['nombre_moral']:""));
			$tipoCliente=$persona->appendChild($xml->createElement("tipoCliente",$tipoClienteBuro));
		}
		if ($clientes->tipo_persona == "Persona Fisica" && $clientes->actividad_empresarial==1) {
			$persona=$consulta->appendChild($xml->createElement("persona",""));
			$rfc=$persona->appendChild($xml->createElement("rfc",$clientesBuro['rfc']));
			$primerNombre=$persona->appendChild($xml->createElement("primerNombre",isset($clientesBuro['primer_nombre_pfae'])?$clientesBuro['primer_nombre_pfae']:""));
			$segundoNombre=$persona->appendChild($xml->createElement("segundoNombre",isset($clientesBuro['segundo_nombre_pfae'])?$clientesBuro['segundo_nombre_pfae']:""));
			$apellidoPaterno=$persona->appendChild($xml->createElement("apellidoPaterno",isset($clientesBuro['apellido_paterno_pfae'])?$clientesBuro['apellido_paterno_pfae']:""));
			$apellidoMaterno=$persona->appendChild($xml->createElement("apellidoMaterno",isset($clientesBuro['apellido_materno_pfae'])?$clientesBuro['apellido_materno_pfae']:""));
			$curp=$persona->appendChild($xml->createElement("curp",$clientesBuro['curp']));
			$fechaNacimiento=$persona->appendChild($xml->createElement("fechaNacimiento",$fecha_nacimiento));
			$nacionalidad=$persona->appendChild($xml->createElement("nacionalidad","MX"));
			$tipoCliente=$persona->appendChild($xml->createElement("tipoCliente",$tipoClienteBuro));
		}
		//***************************************** PERSONA    **********************************************************/
		//***************************************************************************************************************/
		//***************************************** DIRECCION    ********************************************************/
		//***************************************************************************************************************/
		$domicilio=$consulta->appendChild($xml->createElement("domicilio",""));
		$direccion=$domicilio->appendChild($xml->createElement("direccion",$clientesBuro["direccion_completa"]));
		$colonia=$domicilio->appendChild($xml->createElement("colonia",$clientesBuro["colonia"]));
		$ciudad=$domicilio->appendChild($xml->createElement("ciudad",$clientesBuro["ciudad"]));
		$delegacionMunicipio=$domicilio->appendChild($xml->createElement("delegacionMunicipio",$clientesBuro["municipio"]));
		$codigoPostal=$domicilio->appendChild($xml->createElement("codigoPostal",$clientesBuro["codigo_postal"]));
		if ($clientesBuro["pais"]=="MX") {
			$estado=$domicilio->appendChild($xml->createElement("estado",$clientesBuro["estado"]));
		}else{
			$estadoExt=$domicilio->appendChild($xml->createElement("estadoExt",isset($clientesBuro['estado_extranjero'])?$clientesBuro['estado_extranjero']:""));
		}
		$pais=$domicilio->appendChild($xml->createElement("pais",$clientesBuro["pais"]));
		//***************************************** DIRECCION    ********************************************************/
		//***************************************************************************************************************/

		if ($clientes->tipo_persona == "Persona Fisica" && $clientes->actividad_empresarial==1) {

				if ($solicitudes['score_code']=="009") {

					$accionistas=Contactos::model()->findAll(array('condition'=>"id_cliente='$clientes->id' AND acciones>0",'order'=>'acciones DESC','limit'=>5));

					$accionista1=$consulta->appendChild($xml->createElement("accionista",""));

					foreach ($accionistas as $key => $accionista) {
						//Fecha de Nacimiento
						if (isset($accionista['fecha_nacimiento']) && !is_null($accionista['fecha_nacimiento']) && $accionista['fecha_nacimiento']!="0000-00-00") {
							$fecha_nacimiento_a = date("dmY",strtotime($accionista['fecha_nacimiento']));
						}
						$accionistasBuro=array();
						foreach ($accionista as $llave => $dato) {
							if ($llave=="pais") {
								if (!is_null($accionista->pais) && isset($accionista->pais)  && $accionista->pais!="") {
									$pais = Paises::model()->find("pais=:pais",array(":pais"=>$accionista->pais));
									$dato = $pais->iso;
									if ($dato!="MX") {
										$clienteExtranjero = $accionista->estado;
										$valorEstado = strtoupper($clienteExtranjero);
										$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
										$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
										$valorEstado = str_replace($search, $replace, $valorEstado);
										$accionistasBuro["estado_extranjero"] = $valorEstado;
									}
								}
							}
							//Dirreccion completa
							if ($llave=="calle") {
								$dato = $accionista->getDireccionBuro();
							}
							$search = array('á', 'é', 'í', 'ó', 'ú', 'Á', 'É', 'Í', 'Ó', 'Ú', 'ñ', 'Ñ');
							$replace = array('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U', 'n', 'N');
							$valor = str_replace($search, $replace, $dato);
							$valor = strtoupper($valor);
							$accionistasBuro[$llave] = $valor;
						}
						//***************************************** DIRECCION    ********************************************************/
						//***************************************************************************************************************/

						//***************************************** ACCIONISTAS    *******************************************************/
						//***************************************************************************************************************/


						$identificadorAccionista=$accionista1->appendChild($xml->createElement("identificadorAccionista",$accionistasBuro['rfc']));

						$paccionista=$accionista1->appendChild($xml->createElement("persona",""));

						$rfc=$paccionista->appendChild($xml->createElement("rfc",$accionistasBuro['rfc']));
						$primerNombre=$paccionista->appendChild($xml->createElement("primerNombre",$accionistasBuro['nombre']));
						$segundoNombre=$paccionista->appendChild($xml->createElement("segundoNombre",$accionistasBuro['nombre2']));
						$apellidoPaterno=$paccionista->appendChild($xml->createElement("apellidoPaterno",$accionistasBuro['apellido_paterno']));
						$apellidoMaterno=$paccionista->appendChild($xml->createElement("apellidoMaterno",$accionistasBuro['apellido_materno']));
						$apellidoAdicional=$paccionista->appendChild($xml->createElement("apellidoAdicional",""));
						$curp=$paccionista->appendChild($xml->createElement("curp",$accionistasBuro['curp']));
						$fechaNacimiento=$paccionista->appendChild($xml->createElement("fechaNacimiento",$fecha_nacimiento_a));
						$nacionalidad=$paccionista->appendChild($xml->createElement("nacionalidad",$accionistasBuro['pais']));
						$daccionista=$accionista1->appendChild($xml->createElement("domicilio",""));
						$direccion=$daccionista->appendChild($xml->createElement("direccion",isset($accionistasBuro['calle'])?$accionistasBuro['calle']:""));
						$colonia=$daccionista->appendChild($xml->createElement("colonia",$accionistasBuro['colonia']));
						$ciudad=$daccionista->appendChild($xml->createElement("ciudad",$accionistasBuro['ciudad']));
						$delegacionMunicipio=$daccionista->appendChild($xml->createElement("delegacionMunicipio",$accionistasBuro['municipio']));
						$codigo_postal=$daccionista->appendChild($xml->createElement("codigo_postal",$accionistasBuro['codigo_postal']));
						if ($accionistasBuro["pais"]=="MX") {
							$estado=$daccionista->appendChild($xml->createElement("estado",$accionistasBuro['estado']));
						}else{
							$estadoExt=$daccionista->appendChild($xml->createElement("estadoExt",isset($accionistasBuro['estado_extranjero'])?$accionistasBuro['estado_extranjero']:""));
						}
						$pais=$daccionista->appendChild($xml->createElement("pais",$accionistasBuro['pais']));
					}
				}

				//***************************************** ACCIONISTAS    *******************************************************/
				//***************************************************************************************************************/
		}

		$xmlString=$xml->saveXML();
		$xmlString=str_replace(' xmlns=""', "",$xmlString);
		$xmlString=str_replace('<?xml version="1.0" encoding="UTF-8"?>', "",$xmlString);
		$xmlString=trim($xmlString);

		//echo htmlentities($xmlString);
		//die();
		if($apiConfig->pruebaoproduccion==0){
			$url=(($apiConfig->url_test!="")?$apiConfig->url_test:"http://128.9.55.102:7080/consultaxml-pm/requestInquiry");
		}else{
			$url=(($apiConfig->url_conexion!="")?$apiConfig->url_conexion:"http://128.9.55.151:7080/consultaxml-pm/requestInquiry");
		}

		// TODO
		$headers[]="Content-Type:application/xml";
		$ch=curl_init();

		curl_setopt($ch, CURLOPT_URL, $url);
		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
		curl_setopt($ch, CURLOPT_POSTFIELDS, $xmlString);
		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 300);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch,CURLOPT_CUSTOMREQUEST,"POST");
        // TODO BuroC- personas morales
		$result=curl_exec($ch);
		curl_close($ch);

		return $result;
	}

	public function getCotizadoresAgro($array = false) {
		if($this->isNewRecord){
		    if(isset($this->id_grupo_cliente) && !empty($this->id_grupo_cliente)){
                $data=Cotizador::model()->with("solicitud0")->findAll("t.id_grupo_cliente=:cliente AND solicitud0.id IS NULL AND t.id_commodities > 0",array(':cliente'=>$this->id_grupo_cliente));
            }else{
                $data=Cotizador::model()->with("solicitud0")->findAll("t.id_cliente=:cliente AND solicitud0.id IS NULL AND t.id_commodities > 0",array(':cliente'=>$this->id_cliente));
            }
		}else{
			$data=Cotizador::model()->findAll("id=:cotizador  AND id_commodities > 0",array(':cotizador'=>$this->id_cotizador));

		}
		return $array ? $data : CHtml::listData ($data, 'id', 'clave' );
	}
	public function getCotizadoresAgro2($array = false) {
		$data=Cotizador::model()->with("solicitud0")->findAll("t.id_cliente=:cliente AND t.id_commodities > 0",array(':cliente'=>$this->id_cliente));
		return $array ? $data : CHtml::listData ($data, 'id', 'clave' );
	}
	public function getProductosAgro(){
		$data = Commodities::model()->findAll();
		return CHtml::listData($data,'id','nombre');
	}
	public function generarTasas(){
		$solicitudes=Solicitudes::model()->findAll('bloquear_tasas=:tasas',array(':tasas'=>0));
		foreach ($solicitudes as $key => $solicitud) {
			$cliente = Clientes::model()->findByPk($solicitud->id_cliente);
			$calificaciones=Calificaciones::model()->find(array('condition'=>"id_solicitud='{$solicitud->id}'",'order'=>'fecha DESC'));
			$riesgos=CalificacionesRiesgo::model()->find('clave=:clave',array(':clave'=>$calificaciones->calificacion));
			$porcentaje=ProductosRiesgosTasas::model()->find('riesgo=:riesgo',array(':riesgo'=>$riesgos->riesgo));
			$solicitud->sobretasa = $porcentaje->incremento/100;
			$success=$solicitud->save();
			if ($success) {
				$plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>'reservas'));
				$polizasAutomaticas=PolizasAutomaticas::model()->findAll("nombre_poliza=:nombre_poliza",array(':nombre_poliza'=>$plantilla->nombre_poliza));
				$tipo="Ingreso";
				$operacion="Reservas";
				$fecha=date('Y-m-d');
				$cantidad=$solicitud->entregable;
				$porciento=$porcentaje->porcentaje_reserva;
				$monto=($cantidad*$porciento/100);
				$modelClaves=Claves::model()->find();
				// var_dump($monto_porcentual);
				// exit();
				$data=array(
					'tipo'=>'poliza',
					'tipo_poliza'=>substr($tipo,0,1),
					'year'=>date("Y",strtotime($fecha)),
					'mes'=>date("m",strtotime($fecha)),
				);
				$clavePoliza=$modelClaves->getClave($data);
				//CARGOS
				foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
					if(!isset($polizaAutomatica->id_cuenta_cargo) || $polizaAutomatica->id_cuenta_cargo==0){
						continue;
					}
					$cuenta=$polizaAutomatica->id_cuenta_cargo0;
					//Se desglosa la cuenta
					$params=array(
						'banco'=>$solicitud->id_banco,
						'moneda'=>$solicitud->id_moneda,
						'producto'=>$solicitud->id_producto,
						'producto_factoraje'=>null,
						'acreedor'=>null,
						'proveedor'=>null,
						'deudor'=>$solicitud->id_deudor,
						'cliente'=>$cliente->id,
						'empleado'=>null,
                        'solicitud'=>$solicitud->id,
                        'concepto'=>$polizaAutomatica->concepto
					);
					$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
					if($desglose['success']){
						$cuentaCargo=CatalogoCuentas::model()->findByPk($desglose["id"]);
						$success=true;
					}else{
						$success=false;
						$msg=$desglose["msg"];
					}
					//Se genera la poliza
					if($success && $monto>0){
						$poliza=new PolizasDiario();
						$poliza->tipo=$tipo;
						$poliza->operacion=$operacion;
						$poliza->relacionado=$solicitud->id;
						$poliza->id_usuario=Yii::app()->user->getId();
						$poliza->fecha=$fecha;
						$poliza->poliza=$clavePoliza;
						$poliza->id_cuenta=$cuentaCargo->id;
						$poliza->id_moneda=$solicitud->id_moneda;
						$poliza->cargo=$monto;
						$poliza->concepto=$polizaAutomatica->concepto;
						$poliza->concepto_importe=$polizaAutomatica->concepto;
						$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                        $poliza->id_cliente=$this->id_cliente;
                        $poliza->id_solicitud=$this->id;
						$success=$poliza->save();
						if(!$success){
							break;
						}
					}
				}

				if($success){
					//ABONOS
					foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
						if(!isset($polizaAutomatica->id_cuenta_abono) || $polizaAutomatica->id_cuenta_abono==0){
							continue;
						}
						//Se obtiene el monto
						$cantidad=$solicitud->entregable;
						$porciento=$porcentaje->porcentaje_reserva;
						$monto=($cantidad*$porciento/100);
						//Se obtiene la cuenta
						$cuenta=$polizaAutomatica->id_cuenta_abono0;
						//Se desglosa la cuenta
						$params=array(
							'banco'=>$solicitud->id_banco,
							'moneda'=>$solicitud->id_moneda,
							'producto'=>$solicitud->id_producto,
							'producto_factoraje'=>null,
							'acreedor'=>null,
							'proveedor'=>null,
							'deudor'=>$solicitud->id_deudor,
							'cliente'=>$cliente->id,
							'empleado'=>null,
                            'solicitud'=>$solicitud->id,
                            'concepto'=>$polizaAutomatica->concepto
						);
						$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
						if($desglose['success']){
							$success=true;
							$cuentaAbono=CatalogoCuentas::model()->findByPk($desglose["id"]);
						}else{
							$success=false;
							$msg=$desglose["msg"];
						}
						//Se genera la poliza
						if($success && $monto>0){
							$poliza=new PolizasDiario();
							$poliza->tipo=$tipo;
							$poliza->operacion=$operacion;
							$poliza->relacionado=$solicitud->id;
							$poliza->id_usuario=Yii::app()->user->getId();
							$poliza->fecha=$fecha;
							$poliza->poliza=$clavePoliza;
							$poliza->id_cuenta=$cuentaAbono->id;
							$poliza->id_moneda=$solicitud->id_moneda;
							$poliza->abono=$monto;
							$poliza->concepto=$polizaAutomatica->concepto;
							$poliza->concepto_importe=$polizaAutomatica->concepto;
							$poliza->plantilla=$polizaAutomatica->nombre_poliza;
                            $poliza->id_cliente=$this->id_cliente;
                            $poliza->id_solicitud=$this->id;
							$success=$poliza->save();
							if(!$success){
								break;
							}
						}
					}
				}

			}
		}
		return $calificaciones;

	}
	public function getReserva($claveCalificacion,$claveSolicitud){
		$risk=0;
		if($claveCalificacion!==' '){
			$product=Solicitudes::model()->find('clave=:clave',array('clave'=>$claveSolicitud))->id_producto;
			$valQualification=CalificacionesRiesgo::model()->find('clave=:clave',array(':clave'=>$claveCalificacion))->riesgo;
			$risk=ProductosRiesgosTasas::model()->find('riesgo=:riesgo AND id_producto=:id_producto',array(':riesgo'=>$valQualification,':id_producto'=>$product))->porcentaje_reserva;
		}
		$total=(floatval($risk)!=0)?floatval($risk):floatval($risk);
		return "{$total}%";
	}

	public function getResidual(){
        if (isset($this->valor_residual_porcentaje) && $this->valor_residual_porcentaje != 0) {
            if ($this->calculo_capital == 2) {
                $residual = $this->valor_residual_porcentaje * ($this->valor_equipo);
            } else {
                $residual = $this->valor_residual_porcentaje * ($this->valor_equipo - $this->iva_equipo);
            }
        } else {
            $residual = $this->valor_residual_monto;
        }
        return $residual;
    }

	public function generatePolizaReservaDispo(){
		$claves=Claves::model()->find();
		$date=date("Y-m-d");
		$data=array(
			'tipo'=>'poliza',
			'tipo_poliza'=>substr('Diario',0,1),
			'year'=>date("Y",strtotime($date)),
			'mes'=>date("m",strtotime($date)),
		);
		$clavePoliza=$claves->getClave($data);

		$polizas=PolizasAutomaticas::model()->findAll('poliza=:reservas',array('reservas'=>'reservas'));
		$amortizacion=Amortizaciones::model()->find('id_solicitud=:id_solicitud and fecha_pago=:fecha_pago order by fecha_amortizacion asc',array('id_solicitud'=>$this->id, 'fecha_pago'=>'0000-00-00 00:00:00'));
		$reserva=floatval(($this->getReserva($this->calificacion_asignada, $this->clave)))/100;
		$reserva=$amortizacion->saldo_capital*$reserva;
		foreach ($polizas as $item) {
			$charge=NULL;
			$payment=NULL;
			if(!isset($item->id_cuenta_abono) || $item->id_cuenta_abono==0){
				$id_cuenta=$item->id_cuenta_cargo;
				$charge=$reserva;

			}elseif (!isset($item->id_cuenta_cargo) || $item->id_cuenta_cargo==0){
				$id_cuenta=$item->id_cuenta_abono;
				$payment=$reserva;
			}
			$params=array(
				'banco'=>$this->id_banco,
				'moneda'=>$this->id_moneda,
				'producto'=>$this->id_producto,
				'producto_factoraje'=>null,
				'acreedor'=>null,
				'proveedor'=>null,
				'deudor'=>$this->id_deudor,
				'cliente'=>$this->id_cliente,
				'empleado'=>null,
                'solicitud'=>$this->id,
                'concepto'=>$item->concepto
			);
			$cuenta=CatalogoCuentas::model()->findByPk($id_cuenta);
			$desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
			if($desglose['success']){
				$cuentaCargo=CatalogoCuentas::model()->findByPk($desglose["id"]);
			}else{
				$success=false;
				$msg=$desglose["msg"];
			}
			$poliza=new PolizasDiario();
			$poliza->tipo='Diario';
			$poliza->id_usuario=Yii::app()->user->getId();
			$poliza->fecha=$date;
			$poliza->poliza=$clavePoliza;
			$poliza->id_cuenta=$cuentaCargo->id;
			$poliza->id_moneda=$this->id_moneda;
			$poliza->cargo=$charge;
			$poliza->abono=$payment;
			$poliza->concepto=$item->nombre_poliza." ".$this->clave;
			$poliza->concepto_importe=$item->concepto;
			$poliza->plantilla=$item->nombre_poliza;
			$success=$poliza->save();
			if(!$success){
				echo '<pre>';
				die(var_dump($poliza->getErrors()));
			}
		}
		if($success){return true;}
		
	}
	/**
	 *
	 * Funciones para el producto de Panama (Facilito)
	 *
	 */
	public function getFacilitoObjeto(){
		$data = array(
			'Adelanto de efectivo'=>'Adelanto de efectivo',
			'Compra'=>'Compra',
			'Adelanto y compra'=>'Adelanto y compra'
		);
		return $data;
	}
	public function getFacilitoCodeudor(){
		$data = array(
			'Si'=>'Si',
			'No'=>'No'
		);
		return $data;
	}
	public function getFacilitoMetodos(){
		$data = array(
			'voluntario'=>'Voluntario',
			'directo'=>'Directo'
		);
		return $data;
	}

	public function getusuariopf(){
		$empresa = Empresa::model()->find();
		$apiConfig=CuentasUsuariosPass::model()->find("producto_conexion='buro' AND tipo='Consultar' AND tipo_persona='Persona Fisica'");
		if(isset($apiConfig)){
			$usuario=$apiConfig->usuario;
		}else{
			$usuario=$empresa->nombre_usuario_buropf;
		}
		return $usuario;
	}

	public function getclavepf(){
		$empresa = Empresa::model()->find();
		$apiConfig=CuentasUsuariosPass::model()->find("producto_conexion='buro' AND tipo='Consultar' AND tipo_persona='Persona Fisica'");
		if(isset($apiConfig)){
			$pass=$apiConfig->password;
		}else{
			$pass=$empresa->clave_buropf;
		}
		return $pass;
	}

	public function getusuariopm(){
		$empresa = Empresa::model()->find();
		$apiConfig=CuentasUsuariosPass::model()->find("producto_conexion='buro' AND tipo='Consultar' AND tipo_persona='Persona Moral'");
		if(isset($apiConfig)){
			$usuario=$apiConfig->usuario;
		}else{
			$usuario=$empresa->nombre_usuario_buro;
		}
		return $usuario;
	}

	public function getclavepm(){
		$empresa = Empresa::model()->find();
		$apiConfig=CuentasUsuariosPass::model()->find("producto_conexion='buro' AND tipo='Consultar' AND tipo_persona='Persona Moral'");
		if(isset($apiConfig)){
			$pass=$apiConfig->password;
		}else{
			$pass=$empresa->clave_buro;
		}
		return $pass;
	}

	public function generarTokenClubpago($id){
		$solicitud = Solicitudes::model()->findbypk($id);
		$listo=false;
		$where='producto_conexion="clubpago" AND tipo="Autentificar"'; 
		$valCuentaClubPago=CuentasUsuariosPass::model()->findAll('producto_conexion="clubpago" AND tipo="Autentificar"'); 
		foreach($valCuentaClubPago AS $row){
			if($row->valor_carga){
				$listProd=json_decode($row->baseJson,true);
				$claveProd = array_search($solicitud->id_producto, $listProd); 
				if (array_key_exists($claveProd, $listProd)) {
					$where="id = $row->id AND producto_conexion='clubpago' AND tipo='Autentificar'"; 
					$listo=true;
				}else{
					$listo=false;
					$resp=array(
						"estado"=>500,
						"respuesta"=>"Validación de multicuentas ClubPago",
						"error"=>"No esta configurado el listado de producto con la cuenta de clubpago: ".$row->usuario,
					);
				}
			}else{
				$where='producto_conexion="clubpago" AND tipo="Autentificar"'; 
				$listo=true;
			} 
		}
		
		$modelcuenta=CuentasUsuariosPass::model()->find($where); 
		if($listo){
			// Generar token para solicitar referencia Club Pago
            if($modelcuenta->pruebaoproduccion==0){ // Ojo para correr en pruebas, bandera a uno
                $url = $modelcuenta->url_test;
                $identificadorclubpago=$modelcuenta->api_key; 
            }else{
                $url = $modelcuenta->url_conexion;
                $identificadorclubpago=$modelcuenta->api_key; 
            } 
            $a=array(
                "user"=>$modelcuenta->usuario,
                "Pswd"=>$modelcuenta->password
            );

            $post_data = json_encode($a);
            $ch=curl_init();
            curl_setopt ($ch, CURLOPT_POST, TRUE);
            curl_setopt ($ch, CURLOPT_URL,$url);
            curl_setopt ($ch, CURLOPT_HEADER, 0);
            curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
            curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, 0);
            curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, 0);  
            curl_setopt ($ch, CURLOPT_POSTFIELDS, $post_data);
            curl_setopt ($ch, CURLOPT_HTTPHEADER, array(
                    'content-type: application/json',
                )
            );
            
            $respuesta = curl_exec($ch);
            if (curl_errno($ch)) {
                $error_msg = curl_error($ch);
            }
			$statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
			if($statusCode == 200){
				$extra=json_decode($respuesta);
				$resp=array(
					"estado"=>$statusCode,
					"respuesta"=>$respuesta,
					"token"=>$extra->Token,
					"identificadorclubpago"=>$identificadorclubpago,
				);
			}else{
				$resp=array(
					"estado"=>$statusCode,
					"respuesta"=>json_encode($respuesta),
					"error"=>$error_msg,
				);
			}
		}    
		return $resp;
	}

		/**
	 * getTokenCP
	 * Genera el token de conexion con los servicios de club pago. La funciton de arriba(generarTokenClubPago) tambien funciona pero a esa le debes de enviar el ID de
	 * la Solicitud, y en este caso no la necesitamos.
	 * 
	 * @return array 
	 * 
	 */
	public function getTokenCP(): array
	{
		try {
			$valCuentaClubPago=CuentasUsuariosPass::model()->find('producto_conexion="clubpago" AND tipo="Autentificar"'); 
			if (!!$valCuentaClubPago == false) {
				throw new Exception("La producción no cuenta con credenciales para utilizar este servicio.", 502);
			}
			$url = $valCuentaClubPago->pruebaoproduccion=="1"?$valCuentaClubPago->url_conexion:$valCuentaClubPago->url_test;
			$a = array(
				"user"=>$valCuentaClubPago->usuario,
				"Pswd"=>$valCuentaClubPago->password
			);
			$post_data = json_encode($a);
			$ch=curl_init();
			curl_setopt ($ch, CURLOPT_POST, TRUE);
			curl_setopt ($ch, CURLOPT_URL, $url);
			curl_setopt ($ch, CURLOPT_HEADER, 0);
			curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, 0);
			curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, 0);
			curl_setopt ($ch, CURLOPT_POSTFIELDS, $post_data);
			curl_setopt ($ch, CURLOPT_HTTPHEADER, array(
					'content-type: application/json',
				)
			);
			$respuesta = curl_exec($ch);
			if (curl_errno($ch)) {
				$error_msg = curl_error($ch);
			}
			$statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);

			if ($statusCode != 200) {
				throw new Exception(CJSON::encode($respuesta), 500);
			}
			$extra = CJSON::decode($respuesta);
			$resp = [
				"estado" => $statusCode,
				"respuesta" => $extra,
				"token" => $extra['Token'],
				'identificadorclubpago' => $valCuentaClubPago->api_key,
			];
			return $resp;
		} catch (Exception $th) {
			return ['error'=>true,'message' => CJSON::decode($th->getMessage()) ?? $th->getMessage()];
		}
	}


	public function generarReferenciaClubPago($token,$identificadorclubpago,$identificadordeempresa,$solicitud,$empresa,$cliente,$monto,$esCliente = true){
		$modclubpago=CuentasUsuariosPass::model()->find('producto_conexion="clubpago" AND por_defecto=1');
		$subcuenta=strlen($identificadorclubpago);
		if($subcuenta==6){
			$identificadordeempresa=$identificadorclubpago; // esto si hay subcuenta
		}else{
			$identificadordeempresa="";
		}
			$idSolicitud = is_array($solicitud)?$solicitud['folio']:$solicitud->id;
			$idCliente = is_array($solicitud)?$solicitud['folio_cliente']:$solicitud->id_cliente;
			$identificadordeempresa.=str_pad($idSolicitud, 8,"0",STR_PAD_LEFT);
			$identificadordeempresa.=str_pad($idCliente, 8,"0",STR_PAD_LEFT);
			$identificadordeempresa=trim($identificadordeempresa);
		$json=array(
			"Description"=>"Pago Microcrédito",
			"Amount"=>$monto,
			"Account"=>$identificadordeempresa,
			"CustomerEmail"=>$cliente->email,
			"CustomerName" => $esCliente ? $cliente->nombre_completo : $cliente->nombre." ".$cliente->apellido_paterno." ".$cliente->apellido_materno,
			"ExpirationDate"=>"",
			"RequestClabe"=>1,
			"RequestPayTD"=>1
			);
			$post_data = json_encode($json);
			$msjLog0="data de petición";
            $logApi=(new LogConsultasApis())->regLogApis($solicitud->id_cliente,$post_data,$msjLog0,$modclubpago->producto_conexion);
			if($modclubpago->pruebaoproduccion==0){
			    $url=$modclubpago->url_test;
			}else{
				$url=$modclubpago->url_conexion;
			}
			$tokenL="Authorization: Bearer ".$token;
			$ch=curl_init();
				curl_setopt ($ch, CURLOPT_URL,$url);
				curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
				curl_setopt ($ch, CURLOPT_SSL_VERIFYHOST, 0);
				curl_setopt ($ch, CURLOPT_SSL_VERIFYPEER, 0);
				curl_setopt ($ch, CURLOPT_ENCODING, '');
				curl_setopt ($ch, CURLOPT_MAXREDIRS, 10);
				curl_setopt ($ch, CURLOPT_TIMEOUT, 0);
				curl_setopt ($ch, CURLOPT_FOLLOWLOCATION, true);
				curl_setopt ($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
				curl_setopt ($ch, CURLOPT_CUSTOMREQUEST, 'POST');
				curl_setopt ($ch, CURLOPT_POSTFIELDS, $post_data);
				curl_setopt ($ch, CURLOPT_HTTPHEADER, array("$tokenL",
				"Content-Type: application/json",
			));
			$respuesta = curl_exec($ch);
			if (curl_errno($ch)) {
					$error_msg = curl_error($ch);
			}
			$r1 = json_decode($respuesta,true);
			$statusCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
            curl_close($ch);
			$msjLog0="data de respuesta";
            $logApi=(new LogConsultasApis())->regLogApis($solicitud->id_cliente,$respuesta,$msjLog0,$modclubpago->producto_conexion);
			if($statusCode == 200){
				$extra=json_decode($respuesta);
				$resp=array(
					"estado"=>$statusCode,
					"respuesta"=>json_encode($r1),
					"reference"=>$extra->Reference,
					"clabe"=>$extra->Clabe,
				);
			}else{
				$resp=array(
					"estado"=>$statusCode,
					"respuesta"=>json_encode($r1),
					"error"=>$error_msg,
				);
			}
            return $resp;
    }

	/**
	 * generarReferenciaClubPagoMultiple !! La funcion de arriba (generarReferenciaClubPago) no devuelve el documento con la informacion de la referencia, esta funcion si.
	 * @param string $token
	 * @param string $identificadorclubpago
	 * @param string $identificadordeempresa
	 * @param string $empresa
	 * @param string $usuario
	 * @param string $monto (Esta)
	 *
	 */
	public function generarReferenciaClubPagoMultiple($token, $identificadorclubpago, $identificadordeempresa, $empresa, $usuario, $monto)
	{
		$identificadordeempresa=$identificadorclubpago;
		$idSolicitud = rand(1, 10000);
		$idCliente = $usuario->id;
		$identificadordeempresa .= str_pad($idSolicitud, 8, "0", STR_PAD_LEFT);
		$identificadordeempresa .= str_pad($idCliente, 8, "0", STR_PAD_LEFT);
		$identificadordeempresa = trim($identificadordeempresa);
		$modclubpago=CuentasUsuariosPass::model()->find('producto_conexion="clubpago" AND por_defecto=1');
		$json=array(
			"Description"=>"Pago Microcrédito",
			"Amount"=>$monto,
			"Account"=>$identificadordeempresa,
			"CustomerEmail"=>$usuario->email,
			"CustomerName" => $usuario->nombre." ".$usuario->apellido_paterno." ".$usuario->apellido_materno,
			"ExpirationDate"=>"",
			"RequestClabe"=>1);
			$post_data = json_encode($json);
			if($modclubpago->pruebaoproduccion==0){
			    $url=$modclubpago->url_test;
			}else{
				$url=$modclubpago->url_conexion;
			}
			$ch=curl_init();
			curl_setopt ($ch, CURLOPT_POST, TRUE);
			curl_setopt ($ch, CURLOPT_URL,$url);
			curl_setopt ($ch, CURLOPT_HEADER, 0);
			curl_setopt ($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
            curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
			curl_setopt ($ch, CURLOPT_POSTFIELDS, $post_data);
			curl_setopt ($ch, CURLOPT_HTTPHEADER, array(
				'content-type: application/json',
				'authorization: Bearer '.$token
			));
			$respuesta = curl_exec($ch);
			$r1 = json_decode($respuesta);
            curl_close($ch);
            return $r1;
	}

	public function gettipodisposicion()
	{
		$data = array(
		"1"=>"Ventanilla Bancaria",
		"2"=>"SPEI",
		"3"=>"Tarjeta de Debito",
		"5"=>"Cheque",
		"9"=>"STP SPEI"
		);
		return $data;
	}

	public function productos_financiados_fimubac()
	{
		$data = ProductosFinanciadosFimubac::model()->findAll();
		return CHtml::listData($data,'codigo','descripcion');
	}

	public function sucursales_fimubac()
	{
		$data = SucursalesFimubac::model()->findAll();
		return CHtml::listData($data,'codigo','descripcion');
	}

	public function codigos_convenios_fimubac()
	{
		$data = CodigosConveniosFimubac::model()->findAll();
		return CHtml::listData($data,'codigo','descripcion');
	}

	public function generarstpclabe($data= "",$withVal=false)
	{
		if($withVal){
			$clabe = $data;
			goto Calclabe;
		}
		//************************ ORIGEN ************/
		$bancos = Bancos::model()->find("bancoSTP=1");
		$account = $bancos->clabe;
		$key = file_get_contents($bancos->certificadopem);
		$passphrase = $bancos->clavecertificadopem;
		//************************ ORIGEN ************/

		$clabe=$account;

		if($clabe=="" || is_null($clabe)){
			return "0";
		}

		$prefijo = substr($clabe,0,13);

		$existe=1;
		for ($i=1;$i<=9999;$i++){
			$existe=1;
			$clabe=$prefijo.str_pad($i,4,"0",STR_PAD_LEFT);
			$solicitudes = Solicitudes::model()->find("cuentastp like '%".$clabe."%'");
			if(is_null($solicitudes) || !isset($solicitudes) || count($solicitudes)<=0){
				$Clientes = Clientes::model()->find("cuentastp like '%".$clabe."%'");
				if(is_null($Clientes) || !isset($Clientes) || count($Clientes)<=0){
					$existe=0;
					break;
				}
			}
		}

		if($existe==1){
			return "0";
		}

Calclabe:

		unset($ponderado);
		for($i=1;$i<=17;$i++){
			switch ($i) {
				case 1:
				$ponderado[0]=(intval(substr($clabe,$i-1,1))*3)%10;
				break;
				case 2:
				$ponderado[1]=(intval(substr($clabe,$i-1,1))*7)%10;
				break;
				case 3:
				$ponderado[2]=(intval(substr($clabe,$i-1,1))*1)%10;
				break;
				case 4:
				$ponderado[3]=(intval(substr($clabe,$i-1,1))*3)%10;
				break;
				case 5:
				$ponderado[4]=(intval(substr($clabe,$i-1,1))*7)%10;
				break;
				case 6:
				$ponderado[5]=(intval(substr($clabe,$i-1,1))*1)%10;
				break;
				case 7:
				$ponderado[6]=(intval(substr($clabe,$i-1,1))*3)%10;
				break;
				case 8:
				$ponderado[7]=(intval(substr($clabe,$i-1,1))*7)%10;
				break;
				case 9:
				$ponderado[8]=(intval(substr($clabe,$i-1,1))*1)%10;
				break;
				case 10:
				$ponderado[9]=(intval(substr($clabe,$i-1,1))*3)%10;
				break;
				case 11:
				$ponderado[10]=(intval(substr($clabe,$i-1,1))*7)%10;
				break;
				case 12:
				$ponderado[11]=(intval(substr($clabe,$i-1,1))*1)%10;
				break;
				case 13:
				$ponderado[12]=(intval(substr($clabe,$i-1,1))*3)%10;
				break;
				case 14:
				$ponderado[13]=(intval(substr($clabe,$i-1,1))*7)%10;
				break;
				case 15:
				$ponderado[14]=(intval(substr($clabe,$i-1,1))*1)%10;
				break;
				case 16:
				$ponderado[15]=(intval(substr($clabe,$i-1,1))*3)%10;
				break;
				case 17:
				$ponderado[16]=(intval(substr($clabe,$i-1,1))*7)%10;
				break;
			}
		}

		$suma=0;
		for($i=0;$i<=16;$i++){
			$suma+=intval($ponderado[$i]);
		}

		$modsuma= $suma % 10;

		$ressuma = 10 - $modsuma;

		$digverificador = $ressuma % 10;

		$clabe=$clabe.$digverificador;

		return $clabe;

	}

	//**************** PRODUCTO CREDITO NOMINA

    public function validarFechaCreditoNomina($gruposolicitud=null,$id_producto=null){
		if(is_null($id_producto)){
			$id_producto=0;
		}
		if(is_null($gruposolicitud))$gruposolicitud="-1";
		if(($gruposolicitud==""))$gruposolicitud="-1";
			$sql="select fechacobranza from fechas_nomina_validacion where curdate()<fechaenvio and id_producto=".$id_producto." and id_grupo_solicitud=".$gruposolicitud." order by fechacobranza asc";
			$data=Yii::app()->db->createCommand($sql)->queryAll(); 
		return CHtml::listData($data,'fechacobranza','fechacobranza');
    }

    //**************** PRODUCTO CREDITO NOMINA
	
	/**
	 * Returns the static model of the specified AR class.
	 * Please note that you should have this exact method in all your CActiveRecord descendants!
	 *
	 * @param string $className
	 *      active record class name.
	 * @return Solicitudes the static model class
	 */
	public static function model($className = __CLASS__) {
		return parent::model ( $className );
	}

	/**
	 * regresa las relaciones que solicita el cliente por el api
	 */
	public function getRelationShow($body)
	{
		$response = [];
		$myRelations = $this->relations();
        $relations = [];

        foreach ($myRelations as $key => $value) {
            $relation = str_replace('_', '', ucwords($key, '_'));
            $relation = substr_replace($relation,"", -1);
            $relation = (substr($relation, 0,2) == 'Id') ? substr_replace($relation,"", 0, 2) : $relation;
            $relations[$relation] = $key;
        }

        unset($relations['Empresa']);
        ksort($relations);

		foreach ($body as $key => $value) {
            if ($value) {
				array_push($response, $relations[$key]);
            }
        }

        return $response;
	}

	/**
	 * identificarCliente
	 *
	 * @param  mixed $clave
	 * @return array
	 */
	public function identificarCliente($clave):array
	{
		$resp=array();
		$buscar=Cotizador::model()->find("clave=:cl",array(":cl"=>$clave));
		if($buscar->id_cliente>0){
			$resp=array(
				"estado"=>1,
				"respuesta"=>"La cotizacion si tiene asignado un cliente",
				"id_cliente"=>$buscar->id_cliente,
				"id_cot"=>$buscar->id,
				"data"=>$buscar->attributes
			);
		}else{
			$resp=array(
				"estado"=>0,
				"respuesta"=>"No existe cotizacion con la clave proporcionada",
			);
		}
		return $resp;
	}

	/**
	 * validarSolicitudActivas
	 *
	 * @param  mixed $idcli
	 * @return array
	 */
	public function validarSolicitudActivas($idcli):array
	{
		$claves="";
		$resp="";
        $countSolicitud=Solicitudes::model()->count("id_cliente = $idcli");
        if($countSolicitud>0){
            $validarSolicitud=Solicitudes::model()->findAll("id_cliente=$idcli");
                foreach($validarSolicitud AS $rws){
					if($rws["status_asignado"] !='Pagado'){
						$claves.="'".$rws->clave."',";
					}
                }
            $claves=substr($claves,0,strlen($claves)-1);
       }
	   if($claves!=""){
			$resp=array(
				"estado"=>true,
				"respuesta"=>$claves,
			);
	   }else{
			$resp=array(
				"estado"=>false,
				"respuesta"=>"No hay solicitudes vigentes",
			);
	   }
	   return $resp;
	}

	/**
	 * crearSolicitud
	 *
	 * @param  mixed $json
	 * @param  mixed $cotId
	 * @return array
	 */
	public function crearSolicitud($json,$cotId):array
	{
		$model_etapa = new ProcesosCreditos();
        $metodoClaves=Claves::model()->find();
		$empresa=Empresa::model()->find();
		$model = new Solicitudes ();
		$dataResp=array();
		//procesos de credito
		$model->etapa=1;
		$model->attributes = $json;
		$model->monto_solicitado=$json["monto_autorizado"];
		$model->monto_solicitado=floatval(str_replace(",","",$model->monto_solicitado));//Numero con miles separados con comas
		$model->ingreso_cliente=floatval(str_replace(",","",$model->ingreso_cliente));//Numero con miles separados con comas
		///CORREGIR COMAS
		$model->valor_equipo=str_replace(",", "", $model->valor_equipo);
		$model->iva_equipo=str_replace(",", "", $model->iva_equipo);
		$model->valor_sin_iva=str_replace(",", "", $model->valor_sin_iva);
		$model->deposito_monto=str_replace(",", "", $model->deposito_monto);
		$model->deposito_adicional=str_replace(",", "", $model->deposito_adicional);
		$model->anticipo_rentas=str_replace(",", "", $model->anticipo_rentas);
		$model->ratificacion=str_replace(",", "", $model->ratificacion);
		$model->ratificacion_total=str_replace(",", "", $model->ratificacion_total);
		$model->enganche=str_replace(",", "", $model->enganche);
		$model->gastos_iniciales=str_replace(",", "", $model->gastos_iniciales);
		$model->comisiones_iniciales=str_replace(",", "", $model->comisiones_iniciales);
		$model->garantia_extendida=str_replace(",", "", $model->garantia_extendida);
		$model->seguro=str_replace(",", "", $model->seguro);
		$model->accesorios=str_replace(",", "", $model->accesorios);
		$model->tenencia=str_replace(",", "", $model->tenencia);
		$model->otros_gastos=str_replace(",", "", $model->otros_gastos);
		$model->nombre_empresa = $empresa->nombre_comercial;
		$model->id_empresa = $empresa->id;
		date_default_timezone_set('America/Merida');
		$fecha_crea = date("Y-m-d");
		$fecha_completo = date("Y-m-d H:i:s");
		$model->fecha_disposicion=$json["fecha_disposicion"];
		$model->fecha_solicitud = $fecha_completo;
		$model->entregable=$model->monto_solicitado;
		$mTipoAmortizacion=TiposAmortizacion::model()->findByPk($model->id_tipo_amortizacion);
		$fechaIni=date("Y-m-d H:i:s", strtotime($model->fecha_disposicion."+ $mTipoAmortizacion->dias days"));
		$model->fecha_inicio_amortizaciones=$fechaIni;

		if(isset(Yii::app()->session['cliente'])){
				$datosCliente=Clientes::model()->findByPk(Yii::app()->session['cliente']);
				$solicitud->id_cliente=$datosCliente->id;
				$solicitud->clave_cliente=$datosCliente->clave;
		}
		if (in_array($metodoClaves->metodo,array("Consecutivo","Personalizado1","Personalizado2","Personalizado3"))) {
			if(isset($model->id_grupo_cliente) && $model->id_grupo_cliente!=""){
				$sucursal=$model->id_grupo_cliente0->clientes0[0]->id_sucursal0;
			}else{
				$sucursal=$model->id_cliente0->id_sucursal0;
			}
			$data=array(
				'tipo'=>'solicitud',
				'sucursal'=>(isset($sucursal->prefijo)?$sucursal->prefijo:''),
				'producto'=>(isset($model->id_producto0->prefijo)?$model->id_producto0->prefijo:''),
				'tipo_activo'=>(isset($model->id_activo_arrendamiento0->tipo_arrendamiento0->prefijo)?$model->id_activo_arrendamiento0->tipo_arrendamiento0->prefijo:''),
				'tipo_cliente'=>(isset($model->id_cliente0->id_tipo_cliente0->prefijo)?$model->id_cliente0->id_tipo_cliente0->prefijo:''),
				'mes'=>(isset($model->fecha_solicitud)?date("m",strtotime($model->fecha_solicitud)):''),
				'year'=>(isset($model->fecha_solicitud)?date("Y",strtotime($model->fecha_solicitud)):''),
			);
			$clave=$metodoClaves->getClave($data);
			$model->clave = $clave;
		}

		if(isset($model->clave) && $model->clave!="") {
			$modelProducto = Productos::model()->findByPk($model->id_producto);
			if ($modelProducto->id_tipo_producto == 11 or $modelProducto->id_tipo_producto == 12) {
				$model->importado = 1;
			}

			$model->clave_producto = $modelProducto->clave;
			$model->nombre_producto = $modelProducto->nombre;
			$model->tabla_disposiciones = $modelProducto->tabla_disposiciones;
			$modelTasaReferencia = TasasReferencia::model()->findByPk($model->id_tasa_referencia);
			$model->nombre_tasa_referencia = $modelTasaReferencia->nombre;
			$model->serie_tasa_referencia = $modelTasaReferencia->serie;
			$modelTipoAmortizacion = TiposAmortizacion::model()->findByPk($model->id_tipo_amortizacion);
			$model->nombre_tipo_amortizacion = $modelTipoAmortizacion->nombre;
			$modelTipoPago = TiposPagos::model()->findByPk($model->id_tipo_pago);
			$model->nombre_tipo_pago = $modelTipoPago->nombre;
			$model->sobretasa = $model->sobretasa / 100;
			$model->descuento_interes = $modelProducto->descuento_interes;
			$model->tasa_moratoria = $model->tasa_moratoria / 100;
			$model->id_impuesto = $modelProducto->id_impuesto;
			$modelImpuesto = Impuestos::model()->findByPk($modelProducto->id_impuesto);
			$model->nombre_impuesto = $modelImpuesto->nombre;
			$model->porcentaje_impuesto = $modelImpuesto->porcentaje;
			$model->plazo_solicitado = $model->plazo_autorizado;
			$model->id_impuesto_moratorios = $modelProducto->id_impuesto_moratorios;
			$modelImpuestoMoratorios = Impuestos::model()->findByPk($modelProducto->id_impuesto_moratorios);
			$model->nombre_impuesto_moratorios = $modelImpuestoMoratorios->nombre;
			$model->porcentaje_impuesto_moratorios = $modelImpuestoMoratorios->porcentaje;
			$model->id_parametrico = $modelProducto->id_parametrico;
			$modelGarantia = TiposGarantia::model()->findByPk($modelProducto->id_tipo_garantia);
			$model->tipo_garantia = $modelGarantia->nombre;
			$modelCliente = Clientes::model()->findByPk($model->id_cliente);
			$model->clave_cliente = $modelCliente->clave;
			$model->nombre_cliente = $modelCliente -> nombre.' '.$modelCliente->nombre2.' '.$modelCliente->apellido_paterno.' '.$modelCliente->apellido_materno;
			$model->id_sucursal = $modelCliente->id_sucursal;
			$model->id_status=1;

			if(isset($cotId)){$model->id_cotizador=$cotId;}
			$consulta = Solicitudes::model()->findAll("fecha_disposicion IS NOT NULL AND id_cliente = '$id_cliente'");
       		$ciclo = str_pad(count($consulta)+1, 2, 0, STR_PAD_LEFT);
			$model->ciclo=$ciclo;

			$modelUsuario=Usuarios::model()->find();
			$model->id_usuario=$modelUsuario->id;
			$model->usuario=$modelUsuario->usuario;
			$model->nombre_usuario=$modelUsuario->fullName;
			$model->status_calculado = "Registrada";

			//Arrendamiento
			$model->valor_residual_porcentaje = $model->valor_residual_porcentaje / 100;
			$model->comision_apertura_porcentaje = $model->comision_apertura_porcentaje / 100;
			$model->udi = $model->udi / 100;
			$model->valor_mercado = $model->valor_mercado / 100;
			$model->enganche = $model->enganche / 100;
			//Arrendamiento Puro
			if ($modelProducto->id_tipo_producto == 8) {
				$montoEnganche = $model->enganche * $model->valor_equipo;
				$model->monto_solicitado = $model->valor_equipo - $model->iva_equipo - $montoEnganche - $model->anticipo_rentas;
				$model->entregable = $model->monto_solicitado;
				if ($model->financiamiento_gastos_iniciales == "Financiado" && $model->anual_gastos_iniciales == 0)
					$model->monto_solicitado += $model->gastos_iniciales;
				if ($model->financiamiento_garantia_extendida == "Financiado" && $model->anual_garantia_extendida == 0)
					$model->monto_solicitado += $model->garantia_extendida;
				if ($model->financiamiento_seguro == "Financiado" && $model->anual_seguro == 0)
					$model->monto_solicitado += $model->seguro;
				if ($model->financiamiento_accesorios == "Financiado" && $model->anual_accesorios == 0)
					$model->monto_autorizado += $model->accesorios;
				if ($model->financiamiento_tenencia == "Financiado" && $model->anual_tenencia == 0)
					$model->monto_solicitado += $model->tenencia;
				if ($model->financiamiento_otros_gastos == "Financiado" && $model->anual_otros_gastos == 0)
					$model->monto_solicitado += $model->otros_gastos;

				$model->valor_residual_monto = $model->valor_residual_porcentaje * ($model->valor_equipo - $model->iva_equipo);

				$aux = clone $model;
				$aux->plazo_autorizado = $aux->plazo_solicitado;
				$aux->monto_autorizado = $aux->monto_solicitado;
				$amortizaciones = Amortizaciones::model()->generarAmortizaciones($aux, array(), array(), array());
				unset($aux);

				$model->deposito_monto = $model->deposito_adicional;
				if ($solicitud->deposito_con_iva == 1) {
					for ($nRenta = 1; $nRenta <= $model->deposito_meses; $nRenta++) {
						$model->deposito_monto += $amortizaciones[$nRenta]['pago_capital'] +
							$amortizaciones[$nRenta]['iva_capital'] +
							$amortizaciones[$nRenta]['pago_interes'] +
							$amortizaciones[$nRenta]['pago_seguro'] +
							$amortizaciones[$nRenta]['pago_otros_gastos'];
					}
				} else {
					for ($nRenta = 1; $nRenta <= $model->deposito_meses; $nRenta++) {
						$model->deposito_monto += $amortizaciones[$nRenta]['pago_capital'] +
							$amortizaciones[$nRenta]['pago_interes'] -
							$amortizaciones[$nRenta]['iva_interes_generado'] +
							$amortizaciones[$nRenta]['pago_seguro'] -
							$amortizaciones[$nRenta]['iva_seguro'] +
							$amortizaciones[$nRenta]['pago_otros_gastos'] -
							$amortizaciones[$nRenta]['iva_otros_gastos'];
					}
				}
			//Credito Automotriz
			} elseif ($modelProducto->id_tipo_producto == 9) {
				$model->sobretasa = $modelProducto->sobretasa;
				$montoEnganche = $model->enganche * 100;
				$model->enganche = $model->enganche * 100;
				$model->entregable = $model->monto_autorizado;
				$model->monto_solicitado=$model->monto_autorizado;
				if ($model->financiamiento_gastos_iniciales == "Financiado")
					$model->monto_solicitado += $model->gastos_iniciales;
				if ($model->financiamiento_garantia_extendida == "Financiado")
					$model->monto_solicitado += $model->garantia_extendida;
				if ($model->financiamiento_seguro == "Financiado")
					$model->monto_solicitado += $model->seguro;
				if ($model->financiamiento_tenencia == "Financiado")
					$model->monto_solicitado += $model->tenencia;
				if ($model->financiamiento_otros_gastos == "Financiado")
					$model->monto_solicitado += $model->otros_gastos;
			}
			$model->etapa='1';
			$model->id_supervisor=$json['id_supervisor'];
			$success=$model->save();
			$msjLog0 = "guardado de solicitud por api digi: $model->id_cliente";
			$general=array(
				"data"=>$model->attributes,
				"error"=>$cotizacion->errors,
			);
            (new LogConsultasApis())->regLogApis(($model->id_cliente?$model->id_cliente:1), json_encode($general), $msjLog0, "softcreditoCallback");
			if($success){
				if(Servicios::model()->validateServicio("PROAUTO-1666707319")== true){
					$proceso=(new AutoProcesoCredito)->procesoActivo("solicitudes","Calificar Automática endPoint");
					if($proceso==1){
						$calificarSol=(new DatosClientes)->calificarAuto($model->id);
						$msjCalificar=$calificarSol["mensaje"];
						if($calificarSol["estado"]==1){
							$procesoTabla=(new AutoProcesoCredito)->procesoActivo("solicitudes","Guardar Tabla endPoint");
							if($procesoTabla==1){
								$generarTablaSolicitud=(new Solicitudes)->guardarTablaSol($model);
								if($generarTablaSolicitud["estado"]){
									$procesoPagar=(new AutoProcesoCredito)->procesoActivo("solicitudes","Pagar amortizacion 0");
									if($procesoPagar==1){
										$pagarA0=(new DispositivosMoviles)->pagarAmort0($model->id);
									}
								}
								$msjtabla=$generarTablaSolicitud["amortizaciones"];
							}else{
								$msjtabla="No esta activado la disposición automática";
							}
						}
					}else{
						$msjCalificar="No esta activado la calificación automática";

						// Estatus para las solicitudes
						$status=StatusSolicitudes::model()->find('proceso = "Solicitud generada"');
						if(!is_null($status->proceso) AND isset($status->proceso)){
							$model->id_status=$status->id;
							$model->proceso=$status->proceso;
							$sv=$model->save();
									if($sv){
										if(StatusSolicitudes::model()->alertaActiva($status->proceso)==1){
											$envio=StatusSolicitudes::model()->envioAlerta($model->id,$status->proceso);
										}
									}
						}
                        //Status de cobranza
                        $statusCobranza=EstatusCobroSolicitudes::model()->find('proceso = "Registrada"');
                        if(!is_null($statusCobranza->proceso) AND $statusCobranza->proceso!=""){
                            $model->id_estatus_cobro=$statusCobranza->id;
                            $model->proceso=$statusCobranza->proceso;
                            $sv=$model->save();
                        }
					}
					$service = Servicios::model()->find('codigo_servicio = :codigoServicio AND status = 1', ['codigoServicio' => 'PROAUTO-1666707319']);
					$dataRequest['data'] = [
						'request'=> 'Solicitud de procesos automaticos, crear solicitud'
					];
					$service->createLogs($service->id, json_encode($dataRequest));
				}else{
						// Estatus para las solicitudes
						$status=StatusSolicitudes::model()->find('proceso = "Solicitud generada"');
						if(!is_null($status->proceso) AND isset($status->proceso)){
							$model->id_status=$status->id;
							$model->proceso=$status->proceso;
							$sv=$model->save();
									if($sv){
										if(StatusSolicitudes::model()->alertaActiva($status->proceso)==1){
											$envio=StatusSolicitudes::model()->envioAlerta($model->id,$status->proceso);
										}
									}
						}
                    //Status de cobranza
                    $statusCobranza=EstatusCobroSolicitudes::model()->find('proceso = "Registrada"');
                    if(!is_null($statusCobranza->proceso) AND $statusCobranza->proceso!=""){
                        $model->id_estatus_cobro=$statusCobranza->id;
                        $model->proceso=$statusCobranza->proceso;
                        $sv=$model->save();
                    }
				}
				$dataResp=array(
					"estado"=>1,
					"mensaje"=>"La solicitud se ha creado correctamente",
					"calificar"=>array(
						"mensaje"=>$msjCalificar,
						"mensaje2"=>$msjtabla,
						"error"=>$calificarSol["error"],
					),
					"respuesta"=>$model,
				);
			}else{
				$dataResp=array(
					"estado"=>0,
					"mensaje"=>"Ha ocurrido un error favor de intentarlo mas tarde",
					"calificar"=>array(
						"mensaje"=>$msjCalificar,
						"mensaje2"=>$msjtabla,
						"error"=>$calificarSol["error"],
					),
					"error"=> $this->showErrors($model),
				);
			}
		}else{
			$dataResp=array(
				"estado"=>2,
				"mensaje"=>"Ha ocurrido un error favor de intentarlo mas tarde",
				"error"=>"La clave esta vacia",
			);
		}

		return $dataResp;
	}

	function showErrors($model){
        $errors = $model->getErrors();
        if (empty($errors)) {
            return;
        }
        $message = '';
        foreach ($errors as $name => $error) {
            if (!is_array($error)) {
                continue;
            }
            $message .= $name . ': ';
            foreach ($error as $e) {
                $message .= $e . '; ';
            }
        }
        return  $message;
    }


	/**
	 * guardarTablaSol
	 *
	 * @param  mixed $solicitud
	 * @return array
	 */
	public function guardarTablaSol($solicitud): array
	{
		$nreg = 0;
		$msjErro1 = "";
		$msjErro2 = "";
		$msjErro3 = "";
		if ($solicitud->fecha_disposicion == "0000-00-00 00:00:00") {
			$fechaDisp = date("Y-m-d", strtotime($solicitud->fecha_aceptacion));
		} else {
			$fechaDisp = date("Y-m-d", strtotime($solicitud->fecha_disposicion));
		}
		//$fechaIni=(new DatosClientes)->getFechaPrimerPago($solicitud->id_tipo_amortizacion,$fechaDisp,$solicitud->plazo_autorizado);
		$mTipoAmortizacion = TiposAmortizacion::model()->findByPk($solicitud->id_tipo_amortizacion);
		$fechaIni = date("Y-m-d H:i:s", strtotime($fechaDisp . "+ $mTipoAmortizacion->dias days"));
		$solicitud->fecha_inicio_amortizaciones = $fechaIni;
		$modeloamortizaciones = new Amortizaciones();
		$amortizaciones = $modeloamortizaciones->generarAmortizaciones($solicitud);
		foreach ($amortizaciones as $amortizacion) {
			$modelLiquidado = new amortizaciones();
			$modelLiquidado->id_solicitud = $solicitud->id;
			$modelLiquidado->referencia_operacion = null;
			$modelLiquidado->fecha_amortizacion = date("Y-m-d", strtotime($amortizacion["fecha_amortizacion"]));
			$modelLiquidado->numero_amortizacion = $amortizacion["numero_amortizacion"];
			$modelLiquidado->saldo_capital = $amortizacion["saldo_capital"];
			$modelLiquidado->saldo_inicial = $amortizacion["saldo_inicial"];
			$modelLiquidado->interes_generado = $amortizacion["interes_generado"];
			$modelLiquidado->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
			$modelLiquidado->descuento_moratorios = $amortizacion["descuento_moratorios"];
			$modelLiquidado->interes_real_generado = $amortizacion["interes_real_generado"];
			$modelLiquidado->iva_interes_generado = $amortizacion["iva_interes_generado"];
			$modelLiquidado->iva_moratorios = $amortizacion["iva_moratorios"];
			$modelLiquidado->pago_capital = $amortizacion["pago_capital"];
			$modelLiquidado->pago_interes = $amortizacion["pago_interes"];
			$modelLiquidado->pago_comisiones = $amortizacion["pago_comisiones"];
			$modelLiquidado->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
			$modelLiquidado->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
			$modelLiquidado->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
			$modelLiquidado->pago_seguro = $amortizacion["pago_seguro"];
			$modelLiquidado->pago_accesorios = $amortizacion["pago_accesorios"];
			$modelLiquidado->pago_tenencia = $amortizacion["pago_tenencia"];
			$modelLiquidado->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
			$modelLiquidado->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
			$modelLiquidado->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
			$modelLiquidado->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
			$modelLiquidado->iva_seguro = $amortizacion["iva_seguro"];
			$modelLiquidado->iva_accesorios = $amortizacion["iva_accesorios"];
			$modelLiquidado->iva_tenencia = $amortizacion["iva_tenencia"];
			$modelLiquidado->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
			$modelLiquidado->pago_moratorios = $amortizacion["pago_moratorios"];
			$modelLiquidado->pago_realizado = 0;
			$modelLiquidado->pago_restante = $amortizacion["pago_total"];
			$modelLiquidado->pago_total = $amortizacion["pago_total"];
			$modelLiquidado->saldo_final = $amortizacion["saldo_final"];
			$modelLiquidado->fecha_pago = null;
			$modelLiquidado->status = "Calculado";
			$sv1 = $modelLiquidado->save();
			if (!$sv1) {
				$msjErro1 = "No se pudo guardar las tabla de amortizacón";
			} else {
				$msjErro1 = "Se guardo correctamente la amortización";
				$nreg++;
			}
		}
		$amortizacioni = Amortizaciones::model()->find("id_solicitud=" . $solicitud->id . " and numero_amortizacion=0");
		$amortizacionesg = Amortizaciones::model()->findAll("id_solicitud=" . $solicitud->id . " and numero_amortizacion>0");
		$comisiones = Comisiones::model()->findAll("id_producto=:producto AND tipo_comision IN('Permanente','Inicial')", array(':producto' => $solicitud->id_producto));
		foreach ($comisiones as $comision) {
			$comisionAmortizacion = new ComisionesAmortizaciones();
			if ($comision->tipo_comision == "Inicial") {
				$comisionAmortizacion->id_amortizacion = $amortizacioni->id;
				$comisionAmortizacion->nombre = $comision->nombre;
				$comisionAmortizacion->tipo_importe = $comision->tipo_importe;
				$comisionAmortizacion->base = $comision->base;
				$comisionAmortizacion->tipo_comision = $comision->tipo_comision;
				$comisionAmortizacion->importe = $comision->importe;
				$comisionAmortizacion->id_impuesto = $comision->id_impuesto;
				$sv2 = $comisionAmortizacion->save(false);
				if (!$sv2) {
					$msjErro2 = "No se pudo guardar las comisiones iniciales";
				} else {
					$msjErro2 = "Se guardo correctamente la comisión inicial";
				}
			} elseif ($comision->tipo_comision == "Permanente") {
				foreach ($amortizacionesg as $amortizaciong) {
					$comisionAmortizacion = new ComisionesAmortizaciones();
					$comisionAmortizacion->id_amortizacion = $amortizaciong->id;
					$comisionAmortizacion->nombre = $comision->nombre;
					$comisionAmortizacion->tipo_importe = $comision->tipo_importe;
					$comisionAmortizacion->base = $comision->base;
					$comisionAmortizacion->tipo_comision = $comision->tipo_comision;
					$comisionAmortizacion->importe = $comision->importe;
					$comisionAmortizacion->id_impuesto = $comision->id_impuesto;
					$success = $comisionAmortizacion->save(false);
					if ($success) {
						$montoComision = 0;
						if ($comisionAmortizacion->tipo_importe == "Porcentaje") {
							if ($comision->tipo_comision == "Inicial") {
								$montoComision = $comisionAmortizacion->importe * $amortizaciong->saldo_capital * (1 + $comisionAmortizacion->id_impuesto0->porcentaje);
							} else {
								$montoComision = $comisionAmortizacion->importe * ($amortizaciong->pago_capital + $amortizaciong->pago_interes) * (1 + $comisionAmortizacion->id_impuesto0->porcentaje);
							}
						} else {
							$montoComision = $comisionAmortizacion->importe * (1 + $comisionAmortizacion->id_impuesto0->porcentaje);
						}
						$amortizaciong->pago_comisiones += $montoComision;
						$amortizaciong->pago_total += $montoComision;
						$success = $amortizaciong->save(false);
						if (!$success) {
							$msjErro3 = "No se pudo guardar las comisiones permanentes";
						} else {
							$msjErro3 = "Se guardo correctamente la comisiones permanentes";
						}
					}
				}
			}
		}
		if ($nreg > 0) {
			$resultado = array(
				"estado" => true,
				"amortizaciones" => $msjErro1,
				"numeroReg" => $nreg,
				"comisionesIni" => $msjErro2,
				"comisionesPer" => $msjErro3
			);
		} else {
			$resultado = array(
				"estado" => false,
				"amortizaciones" => $msjErro1,
				"numeroReg" => $nreg,
				"comisionesIni" => $msjErro2,
				"comisionesPer" => $msjErro3
			);
		}
		return $resultado;
	}

	public function getIdsClients($origen)
	{
		$response = [];

		if ($origen == 'clientes') {
			$query = "SELECT c.id FROM clientes c INNER JOIN solicitudes s ON s.id_cliente = c.id WHERE s.monto_autorizado > 0 GROUP BY c.id";
		}

		if ($origen == 'solicitudes') {
			$query = "SELECT c.id FROM clientes c INNER JOIN solicitudes s ON s.id_cliente = c.id WHERE s.monto_autorizado IS NOT NULL AND s.monto_autorizado > 0 GROUP BY c.id";
		}

		$rows = Yii::app()->db->createCommand($query)->queryAll();

		foreach($rows as $row){
			if ( !isset($row['id']) ) continue;
			$response[] = $row['id'];
		}

		if (count($response) === 0) {
			$response = [-1];
		}

		return implode(',', $response);
	}

	/**
	 * getCalcularCat
	 *
	 * @param  mixed $clave
	 * @param  mixed $directJson
	 * @return void
	 */
	public function getCalcularCat($clave, $directJson = false)
	{
		$solicitud = null;
		if (!$directJson) {
			$solicitud=Solicitudes::model()->find("clave='$clave'");
		} else {
			$solicitud = $clave;
		}
        if(isset($solicitud)){
			$amort=Amortizaciones::model()->count("id_solicitud=$solicitud->id");
			$cat= 0;
			$resp=array();
			if($amort>0){
				if(isset($solicitud->id_grupo_cliente)){
					$amortizaciones=Amortizaciones::model()->getAmortizacionesSolidario($solicitud);
					$comisionesAmortizaciones=ComisionesAmortizaciones::model()->with("id_amortizacion0.id_grupo_solidario0")->findAll("id_grupo_solidario0.id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					$comisiones=array();
					foreach ($comisionesAmortizaciones as $comisionAmortizacion) {
						$comisiones[$comisionAmortizacion->id_amortizacion0->numero_amortizacion][]=$comisionAmortizacion;
					}
				}else{
					$amortizaciones=Amortizaciones::model()->getAmortizaciones($solicitud);
					$comisionesAmortizaciones=ComisionesAmortizaciones::model()->with("id_amortizacion0")->findAll("id_amortizacion0.id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					$comisiones=array();
					foreach ($comisionesAmortizaciones as $comisionAmortizacion) {
						$comisiones[$comisionAmortizacion->id_amortizacion0->id][]=$comisionAmortizacion;
					}
				}
				$cat=Amortizaciones::model()->getCAT($amortizaciones,$solicitud,null,$comisiones);
				$solicitud->cat=$cat*100;
				$success=$solicitud->save(false);
				$resp=array(
					"estado"=>true,
					"mensaje"=>"Se realizo el calculo del cat",
					"cat"=>$cat
				);
			}else{
				$producto=Productos::model()->findByPk($solicitud->id_producto);
				$comisiones=Comisiones::model()->findAll("id_producto=:producto AND tipo_comision IN('Permanente','Inicial')",array(':producto'=>$producto->id));
				$comisionesAmortizaciones=array();
				foreach ($comisiones as $comision){
					$comisionCotizacionAmortizacion=new ComisionesAmortizaciones();
					if($comision->tipo_comision=="Inicial"){
						$comisionCotizacionAmortizacion->id_amortizacion=0;
						$comisionCotizacionAmortizacion->nombre=$comision->nombre;
						$comisionCotizacionAmortizacion->tipo_importe=$comision->tipo_importe;
						$comisionCotizacionAmortizacion->importe=$comision->importe;
						$comisionCotizacionAmortizacion->tipo_comision=$comision->tipo_comision;
						$comisionCotizacionAmortizacion->base=$comision->base;
						if($comisionCotizacionAmortizacion->tipo_importe=="Porcentaje"){
							$comisionCotizacionAmortizacion->importe=$comisionCotizacionAmortizacion->importe;
						}
						$comisionCotizacionAmortizacion->id_impuesto=$comision->id_impuesto;
						if ($comisionCotizacionAmortizacion->validate (array('id_amortizacion','tipo_importe', 'importe', 'id_impuesto','tipo_comision','financiado','base'))){
							$comisionesCotizacion=$comisionesAmortizaciones;
							$comisionesCotizacionAmortizacion=$comisionesCotizacion[0];
							$comisionCotizacionAmortizacion->id=count($comisionesCotizacionAmortizacion)+1;
							$comisionesCotizacionAmortizacion[$comisionCotizacionAmortizacion->id]=$comisionCotizacionAmortizacion;
							$comisionesCotizacion[0]=$comisionesCotizacionAmortizacion;
							$comisionesAmortizaciones=$comisionesCotizacion;
						}
					}elseif($comision->tipo_comision=="Permanente"){
						for($i=1;$i<=$solicitud->plazo_autorizado;$i++){
							$comisionCotizacionAmortizacion=new ComisionesAmortizaciones();
							$comisionCotizacionAmortizacion->id_amortizacion=$i;
							$comisionCotizacionAmortizacion->nombre=$comision->nombre;
							$comisionCotizacionAmortizacion->tipo_importe=$comision->tipo_importe;
							$comisionCotizacionAmortizacion->importe=$comision->importe;
							$comisionCotizacionAmortizacion->tipo_comision=$comision->tipo_comision;
							$comisionCotizacionAmortizacion->base=$comision->base;
							if($comisionCotizacionAmortizacion->tipo_importe=="Porcentaje"){
								$comisionCotizacionAmortizacion->importe=$comisionCotizacionAmortizacion->importe;
							}
							$comisionCotizacionAmortizacion->id_impuesto=$comision->id_impuesto;
							if ($comisionCotizacionAmortizacion->validate (array('id_amortizacion','tipo_importe', 'importe', 'id_impuesto','tipo_comision','financiado','base'))){
								$comisionesCotizacion=$comisionesAmortizaciones;
								$comisionesCotizacionAmortizacion=$comisionesCotizacion[$i];
								$comisionCotizacionAmortizacion->id=count($comisionesCotizacionAmortizacion)+1;
								$comisionesCotizacionAmortizacion[$comisionCotizacionAmortizacion->id]=$comisionCotizacionAmortizacion;
								$comisionesCotizacion[$i]=$comisionesCotizacionAmortizacion;
								$comisionesAmortizaciones=$comisionesCotizacion;
							}
						}
					}
				}
				//Se calcula tres veces las amortizaciones con el fin de obtener fechas exactas y no se tengan periodos menores
				$amortizaciones=Amortizaciones::model()->generarAmortizaciones($solicitud,null,$comisionesAmortizaciones);
				$solicitud->fecha_disposicion=$amortizaciones[2]['fecha_amortizacion'];
				$solicitud->fecha_inicio_amortizaciones=$amortizaciones[2]['fecha_amortizacion'];
				$amortizaciones=Amortizaciones::model()->generarAmortizaciones($solicitud,null,$comisionesAmortizaciones);
				$solicitud->fecha_inicio_amortizaciones=$amortizaciones[2]['fecha_amortizacion'];
				$amortizaciones=Amortizaciones::model()->generarAmortizaciones($solicitud,null,$comisionesAmortizaciones);
				$cat=Amortizaciones::model()->getCAT($amortizaciones,$solicitud,null,$comisionesAmortizaciones);
				$resp=array(
					"estado"=>true,
					"mensaje"=>"Se realizo el calculo del cat",
					"cat"=>$cat
				);
			}
		}else{
				$resp=array(
					"estado"=>false,
					"mensaje"=>"No hay solicitud con la clave: ".$clave,
					"cat"=>$cat
				);
		}
       	return $resp;
	}

	public function getClavesObservacion(){
		return ClavesObservacion::model()->findAll();
	}


	/**
	 * getEtapaSolicitud
	 *
	 * @param  mixed $claveSol
	 * @return int
	 */
	public function getEtapaSolicitud($claveSol):int
	{
		$etapa = 1;

		$solModel = $this->findByAttributes(['clave' => $claveSol]);
		if($solModel == null) return $etapa;
		$etapa = 2;

		// $calificarModel = DatosClientes::model()->findByAttributes(['id_solicitud' => $solModel->id]);
		if($solModel->status_asignado != 'Aceptada') return $etapa;
		$etapa = 3;

		$amortizacionesModel = Amortizaciones::model()->findByAttributes(['id_solicitud' => $solModel->id]);
		if($amortizacionesModel == null) return $etapa;
		$etapa = 4;

		return $etapa;
	}

	public static function validarCredencialesBuroPF ($empresa) {
		$errores = [];

		if ($empresa->nombre_usuario_buropf == "") {
            $errores [] = "no se ha asignado un nombre de usuario para buró de crédito persona fisica.";
        }

		if ($empresa->clave_buropf == "") {
            $errores [] = "No se ha asignado una clave para buró de crédito persona fisica..";
        }

		return $errores;
    }

	public static function validarCredencialesBuroPM ($empresa) {
		$errores = [];

		if ($empresa->nombre_usuario_buro == "") {
            $errores [] = "No se ha asignado un nombre de usuario para buró de crédito persona moral.";
        }

		if ($empresa->clave_buro == "") {
            $errores [] = "No se ha asignado una clave para buró de crédito persona moral.";
        }

		return $errores;
    }

	public static function validarCredencialesBuro ($tipoPersona, $fecha_corte = null) {
        $empresa = Empresa::model()->find();
		$fechaCorteFinal = $fecha_corte ?? $empresa->fecha_corte_buro;
        $errores = [];

		////////////////////////
        // Informacion General
		////////////////////////
        if ($fechaCorteFinal == null || $fechaCorteFinal == '0000-00-00') {
            $errores = "No se ha asignado una fecha de corte.";
        }

		if ((strstr($tipoPersona, 'Fisica') !== false) || (strstr($tipoPersona, 'Física') !== false)) {
			$errores = array_merge($errores, self::validarCredencialesBuroPF($empresa));
		} else if (strstr($tipoPersona, 'Moral') !== false) {
			$errores = array_merge($errores, self::validarCredencialesBuroPM($empresa));
		}

		if ($empresa->tipo_empresa_buro == "") {
            $errores [] = "No se ha asignado un tipo de empresa para buró de crédito.";
        }

		$catalogos = [
			"paises" => Yii::app()->db->createCommand("SELECT COUNT(*) FROM paises")->queryScalar(),
			"estados" => Yii::app()->db->createCommand("SELECT COUNT(*) FROM estados")->queryScalar(),
			"municipios" => Yii::app()->db->createCommand("SELECT COUNT(*) FROM municipios")->queryScalar(),
			"codigos_postales" => Yii::app()->db->createCommand("SELECT COUNT(*) FROM codigo")->queryScalar(),
			"tipos_contratos" => Yii::app()->db->createCommand("SELECT COUNT(*) FROM tipos_contratos")->queryScalar(),
			"tipos_productos" => Yii::app()->db->createCommand("SELECT COUNT(*) FROM tipos_productos")->queryScalar(),
			"claves_observacion" => Yii::app()->db->createCommand("SELECT COUNT(*) FROM paises")->queryScalar(),
		];

		foreach ($catalogos as $indice => $numeroRegistros) {
			if ($numeroRegistros == 0) {
				$errores [] = "No se han cargado los catálogos de: " . $indice;
			}
		}

        return $errores;
    }

	public function trackSol($log){
		$apiLogEnabled = Empresa::model()->find(array('condition' => 'api_log_enabled=1', 'select' => 'api_log_enabled'));
        if (!$apiLogEnabled) {return false;}
        $host_run = gethostname();
        date_default_timezone_set('America/Merida');
		$logFile2Req = (Yii::app()->basePath . "/customerFiles/temporales/softcred_solicitudes_trace_request_". date("Ymd") . ".logs");
		// Obtener la fecha actual con milisegundos
		$fechaActual = date('Y-m-d H:i:s') . '.' . substr((string)microtime(), 2, 3);
		// Crear un objeto DateTime para formatear la fecha
		$date = new DateTime($fechaActual);
        preg_match("/dbname=([^;]*)/", Yii::app()->db->connectionString, $matches);
        $database = "[" . $matches[1] . "]";
        $dataStr = "[" . $date->format('Y-m-d H:i:s.u') . "] ". $host_run ." [" . $_SERVER["REMOTE_ADDR"] . ":" . $_SERVER["REMOTE_PORT"] . "] " . $log . "\n";
        file_put_contents($logFile2Req , $dataStr, FILE_APPEND);
	}

	// Getter personalizado para el campo json_descuentos_pago_puntual
    public function getJsonDescuentosPagoPuntual() {
        // Decodificar el JSON si el campo no está vacío
        return !empty($this->json_descuentos_pago_puntual) ? json_decode($this->json_descuentos_pago_puntual) : null;
    }

	/**
	 * Esta funcion devuelve la siguiente informacion de una solicitud:
	 * Numero de pagos puntuales actuales
	 * Numero de atrasos historicos
	 * Condicion verdadera para aplicar descuentos: Es un arreglo con dos propiedades,
	 * la propiedad llamada condiciones contiene las condiciones que se cumplieron para poder hacer un descuento en el siguiente pago de la solicitud
	 * la propiedad llamada descuentos contiene el descuento que se aplicara en el siguiente pago de la solicitud
	 *
	 * @param  mixed $amortizaciones Contiene todas las amortizaciones de la solicitud actual
	 * @return array $infoPagosPuntualesActuales
	 */
	public function getInfoPagosPuntualesActuales($amortizaciones, $fechaCalculo = null) {
		$jsonDescuentosPagoPuntual = $this->getJsonDescuentosPagoPuntual();
		if ($jsonDescuentosPagoPuntual == null) {
			return [
				"numeroPagosPuntualesActuales" => 0,
				"numeroAtrasosHistoricos" => 0,
				"condicionesVerdaderasPagoPuntual" => [],
				"descuentosPagoPuntual" => 0,
			];
		}

		$condicionesVerdaderasPagoPuntual = [];

		$banderaPagosPuntualesSeguidos = true;
		$numeroPagosPuntualesActuales = 0;
		$numeroAtrasosHistoricos = 0;
		$diasDeAtrasoAcumulados = 0;
		$fechaLimitePagoPuntualActual = null;

		for ($i = count($amortizaciones) - 1; $i >= 0; $i--) {
			if (!is_numeric($amortizaciones[$i]['numero_amortizacion'])) {
				continue;
			}

			if (strtotime(date('Y-m-d', strtotime($amortizaciones[$i]['fecha_amortizacion']))) <= strtotime(($fechaCalculo ?? date('Y-m-d')))) {
				$fechaLimitePagoPuntual = date('Y-m-d', strtotime(
					'+ ' . ($jsonDescuentosPagoPuntual->amortizaciones[$amortizaciones[$i]['numero_amortizacion']]->dias_gracia ?? 0) . ' DAY',
					strtotime($amortizaciones[$i]['fecha_amortizacion'])
				));

				if ($fechaLimitePagoPuntualActual == null) {
					$fechaLimitePagoPuntualActual = $fechaLimitePagoPuntual;
				}

				if ($banderaPagosPuntualesSeguidos) {
					if ( // Si ya hay fecha de pago en la amortizacion actual entonces verificamos que sea menor o igual que la fecha limite para ser considerado pago puntual
						($amortizaciones[$i]['fecha_pago'] != null)
						&& ($amortizaciones[$i]['fecha_pago'] != '0000-00-00 00:00:00')
						&& (strtotime($amortizaciones[$i]['fecha_pago']) <= strtotime($fechaLimitePagoPuntual))
						&& $banderaPagosPuntualesSeguidos
					) {
						$numeroPagosPuntualesActuales++;
					} else if ( // Si aun no se ha pagado entonces verificamos que la fecha actual sea menor o igual que la fecha limite para pago puntual
						(($amortizaciones[$i]['fecha_pago'] != null) || ($amortizaciones[$i]['fecha_pago'] != '0000-00-00 00:00:00'))
						&& (strtotime(($fechaCalculo ?? date('Y-m-d'))) <= strtotime($fechaLimitePagoPuntual))
						&& $banderaPagosPuntualesSeguidos
					) {
						$numeroPagosPuntualesActuales++;
					} else {
						$banderaPagosPuntualesSeguidos = false;
						$numeroAtrasosHistoricos++;

						if (($amortizaciones[$i]['fecha_pago'] == null) || ($amortizaciones[$i]['fecha_pago'] == '0000-00-00 00:00:00')) {
							$fechaInicioAtraso = new DateTime($amortizaciones[$i]['fecha_amortizacion']);
							$fechaFinAtraso = new DateTime(($fechaCalculo ?? date('Y-m-d')));
						} else {
							$fechaInicioAtraso = new DateTime($amortizaciones[$i]['fecha_amortizacion']);
							$fechaFinAtraso = new DateTime($amortizaciones[$i]['fecha_pago']);
						}
						$diasDeAtrasoAcumulados += $fechaInicioAtraso->diff($fechaFinAtraso)->days;
					}
				}
			}
		}

		foreach ($jsonDescuentosPagoPuntual->condiciones as $condicionPagoPuntual) {
			if (
				Clientes::filterQueryBuilder([
					'numero_pagos_puntuales_actuales' => $numeroPagosPuntualesActuales,
					'numero_de_atrasos_historicos' => $numeroAtrasosHistoricos,
					'dias_de_atraso_acumulados' => $diasDeAtrasoAcumulados,
				], json_decode($condicionPagoPuntual->rules, true))
			) {
				$condicionesVerdaderasPagoPuntual[] = $condicionPagoPuntual;
			}
		}

		return [
			'numero_pagos_puntuales_actuales' => $numeroPagosPuntualesActuales,
			'numero_de_atrasos_historicos' => $numeroAtrasosHistoricos,
			'dias_de_atraso_acumulados' => $diasDeAtrasoAcumulados,
			'condiciones_verdaderas_pago_puntual' => $condicionesVerdaderasPagoPuntual,
			'fecha_limite_pago_puntual_actual' => $fechaLimitePagoPuntualActual,
		];
	}

	public function deleteSolicitud($solicitud, $options = []) {
		$logs = $options['logs'] ?? true;
		$originalTransaction = $options['originalTransaction'];
		$callbackDeleteEntity = $options['callbackDeleteEntity'] ?? function($entity) {
			return $entity->delete();
		};

		$validarDispositivo=DispositivosMoviles::model()->find('id_solicitud=:id_solicitud',array(':id_solicitud'=>$solicitud->id));
		if(is_null($validarDispositivo)){
			$saldoPromedio=SaldoPromedio::model()->find('id_solicitud=:id_solicitud',array(':id_solicitud'=>$solicitud->id));
		if(!is_null($saldoPromedio)){
			$query='DELETE FROM saldos_promedio WHERE id_solicitud='.$solicitud->id;
			Yii::app()->db->createCommand($query)->query();
		}
		$n=Amortizaciones::model()->count("id_solicitud=:solicitud AND status='Registrado'",array(":solicitud"=>$solicitud->id));
		if($n==0){
			$n=Amortizaciones::model()->with("id_grupo_solidario0")->count("id_grupo_solidario0.id_solicitud=:solicitud AND t.status='Registrado'",array(":solicitud"=>$solicitud->id));
			if($n==0){
				$transaccion=$originalTransaction??Amortizaciones::model()->getDbConnection()->beginTransaction();
				try {
					// Por cada delete hay que agregar su correspondienteWrapper para que se haga su respaldo al borrar masivamente en el moduloAdministrativo
					$respaldar = [];
					$respaldar[] = AvalesSolicitudes::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					$respaldar[] = BitacorasCredito::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					$respaldar[] = DatosClientes::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					$respaldar[] = GarantiasSolicitudes::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					$respaldar[] = DatosClientesSolidario::model()->findAll("(SELECT id_solicitud FROM grupos_solidarios WHERE id=t.id_grupo_solidario LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));
					$respaldar[] = ProcesosCreditos::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					$respaldar[] = SolicitudesDatos::model()->findAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));

					foreach ($respaldar as $entidadParaRespaldar) {
						foreach ($entidadParaRespaldar as $entidad) {
							$callbackDeleteEntity($entidad);
						}
					}

					AvalesSolicitudes::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					BitacorasCredito::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					DatosClientes::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					GarantiasSolicitudes::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					DatosClientesSolidario::model()->deleteAll("(SELECT id_solicitud FROM grupos_solidarios WHERE id=datos_clientes_solidario.id_grupo_solidario LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));
					ProcesosCreditos::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					SolicitudesDatos::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));

					// Se borrar y no se respaldan
					DetallesEstadoCuenta::model()->deleteAll("(SELECT id_solicitud FROM estados_cuenta WHERE id=estados_cuenta.id LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));
					EstadosCuenta::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id)); // borrar sin respaldo

					// Se manda la instruccion de borrado pero ya deberian estar eliminados todos los registros cuando se borran los pagos
					ComisionesAmortizaciones::model()->deleteAll("(SELECT id_solicitud FROM amortizaciones WHERE id=comisiones_amortizaciones.id_amortizacion LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));
					ComisionesAmortizaciones::model()->deleteAll("(SELECT grupos_solidarios.id_solicitud FROM grupos_solidarios LEFT JOIN amortizaciones ON(grupos_solidarios.id=amortizaciones.id_grupo_solidario) WHERE amortizaciones.id=comisiones_amortizaciones.id_amortizacion LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));
					FacturasSolicitudes::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					OperacionesInusuales::model()->deleteAll("(SELECT id_solicitud FROM operaciones WHERE id=operaciones_inusuales.id_operacion LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));
					OperacionesRelevantes::model()->deleteAll("(SELECT id_solicitud FROM operaciones WHERE id=operaciones_relevantes.id_operacion LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));
					OperacionesInternasPreocupantes::model()->deleteAll("(SELECT id_solicitud FROM operaciones WHERE id=operaciones_internas_preocupantes.id_operacion LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));
					Operaciones::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					CirculoCredito::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					Disposiciones::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					Amortizaciones::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					Amortizaciones::model()->deleteAll("(SELECT id_solicitud FROM grupos_solidarios WHERE id=amortizaciones.id_grupo_solidario LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));
					AmortizacionesIni::model()->deleteAll("id_solicitud=:solicitud",array(':solicitud'=>$solicitud->id));
					AmortizacionesIni::model()->deleteAll("(SELECT id_solicitud FROM grupos_solidarios WHERE id=amortizaciones_ini.id_grupo_solidario LIMIT 1)=:solicitud",array(':solicitud'=>$solicitud->id));

					if(isset($solicitud->id_grupo_cliente) && $solicitud->id_grupo_cliente!=""){
						$log="Borrado de la solicitud $solicitud->clave (Grupo: {$solicitud->id_grupo_cliente0->nombre})";
					}else{
						$log="Borrado de la solicitud $solicitud->clave (Cliente: {$solicitud->id_cliente0->fullName})";
					}
					$clave=$solicitud->clave;
					$success=$callbackDeleteEntity($solicitud);

					if($success){
						$sql="delete from solicitudes_securidata where clave='".$clave."'";
						Yii::app()->db->createCommand($sql)->execute();

						if ($logs) {
							LogUsuarios::crearLog("borrado_solicitud",$log);
						}
					}

				} catch (Exception $e) {
					throw new CHttpException ( 500, 'No se ha podido eliminar la solicitud.\n'.$e->getMessage() );
				}

				if ($originalTransaction===null) {
					$transaccion->commit();
				}

				return $success;
			}else{
				throw new CHttpException ( 403, 'No se puede eliminar la solicitud con pagos realizados' );
			}
		}else{
			throw new CHttpException ( 403, 'No se puede eliminar la solicitud con pagos realizados' );
		}
		}else{
			throw new CHttpException ( 403, utf8_decode('No se puede eliminar la solicitud si tiene registrado un dispositivo móvil') );
		}
	}

	public function updateEtapaCredito($etapa=null,$etapaOriginal,$fecha=null,$vencimientos=array()){
	    if($this->etapa_automatica==0){
	        return $this->id_etapa_credito;
        }
        if(!isset($etapa) && isset($fecha)){//se calcula
            $amortizaciones=Amortizaciones::model()->findAll("id_solicitud=$this->id");
            $set=false;
            $totalCredito=0;
            $totalRestante=0;
            foreach($amortizaciones as $amortizacion){
                if($amortizacion->pago_total>0 && $amortizacion->status=="Calculado" && $set==false){
                    if(strtotime($fecha)>strtotime($amortizacion->fecha_amortizacion)){
                        $dias=(strtotime($fecha)-strtotime($amortizacion->fecha_amortizacion))/60/60/24;
                    }else{
                        $dias=0;
                    }
                    $set=true;
                }
                $totalCredito+=$amortizacion->pago_total;
                $totalRestante+=$amortizacion->pago_restante;
            }
            $etapa1=EtapasCreditos::model()->find("etapa='Etapa 1'");
            $etapa2=EtapasCreditos::model()->find("etapa='Etapa 2'");
            $etapa3=EtapasCreditos::model()->find("etapa='Etapa 3'");
            if($dias>$etapa2->dias){
                $etapa=$etapa3->id;
            }elseif($dias>$etapa1->dias){
                if($totalRestante<($totalCredito/20)){
                    $etapa=$etapa1->id;
                }else{
                    $etapa=$etapa2->id;
                }
            }else{
                $etapa=$etapa1->id;
            }
        }
        if($etapa!=$etapaOriginal){
            if(!($etapa==1 && is_null($etapaOriginal))){
                if(!empty($vencimientos)){
                    $amortizaciones=$vencimientos;
                }else{
                    $amortizaciones = Amortizaciones::model()->getAmortizaciones($this,array(),array(),array(),0,0,$fecha,0,array(),array(),array(),true);
                }
                $saldos=array();
                foreach($amortizaciones as $amortizacion){
                    if($amortizacion["status"]=="Calculado"){
                        $saldos["capital"]+=($amortizacion["pago_capital"]-$amortizacion["parcial_capital"]);
                        $saldos["comisiones_financiadas"]+=($amortizacion["pago_comisiones_financiadas"]-$amortizacion["parcial_comisiones_financiadas"])/(1+$this->porcentaje_impuesto);
                        $saldos["iva_comisiones_financiadas"]+=($amortizacion["pago_comisiones_financiadas"]-$amortizacion["parcial_comisiones_financiadas"])-(($amortizacion["pago_comisiones_financiadas"]-$amortizacion["parcial_comisiones_financiadas"])/(1+$this->porcentaje_impuesto));
                        $saldos["interes"]+=($amortizacion["pago_interes"]-$amortizacion["parcial_interes"])/(1+$this->porcentaje_impuesto);
                        $saldos["iva_interes"]+=($amortizacion["pago_interes"]-$amortizacion["parcial_interes"])-(($amortizacion["pago_interes"]-$amortizacion["parcial_interes"])/(1+$this->porcentaje_impuesto));
                        $saldos["comisiones"]+=($amortizacion["pago_comisiones"]-$amortizacion["parcial_comisiones"])/(1+$this->porcentaje_impuesto);
                        $saldos["iva_comisiones"]+=($amortizacion["pago_comisiones"]-$amortizacion["parcial_comisiones"])-(($amortizacion["pago_comisiones"]-$amortizacion["parcial_comisiones"])/(1+$this->porcentaje_impuesto));
                        $saldos["moratorios"]+=($amortizacion["pago_moratorios"]-$amortizacion["parcial_moratorios"])/(1+$this->porcentaje_impuesto_moratorios);
                        $saldos["iva_moratorios"]+=($amortizacion["pago_moratorios"]-$amortizacion["parcial_moratorios"])-(($amortizacion["pago_moratorios"]-$amortizacion["parcial_moratorios"])/(1+$this->porcentaje_impuesto_moratorios));
                    }
                }
                $this->id_etapa_credito=$etapa;
                if(is_null($etapaOriginal)){
                    $etapaOriginal=1;
                }
                do{
                    if($etapa<$etapaOriginal){
                        $success=$this->createPolizaDiarioEtapa($fecha,$etapaOriginal-1,$saldos,$etapaOriginal);
                        $etapaOriginal--;
                        if($etapaOriginal==2 && $this->id_producto0->tipo_cierre==1){
                            $success=$this->createPolizaDiarioPausarCredito(1,$fecha);
                        }
                    }else{
                        $success=$this->createPolizaDiarioEtapa($fecha,$etapaOriginal+1,$saldos);
                        $etapaOriginal++;
                        if($etapaOriginal==3 && $this->id_producto0->tipo_cierre==1){
                            $success=$this->createPolizaDiarioPausarCredito(2,$fecha);
                        }
                    }
                }while($etapaOriginal!=$etapa);
            }
        }
        return $etapa;
    }

    public function createPolizaDiarioEtapa($fecha,$etapa,$saldos,$etapaOriginal=""){
        $modelClaves=Claves::model()->find();
        $fecha=date("Y-m-d",strtotime($fecha));
        $tipo="Diario";
        $operacion="etapa".$etapa;
        $concepto="Cambio a etapa $etapa, solicitud ".$this->clave;
        $solicitud=$this;
        $cliente=$this->id_cliente0;

        $data=array(
            'tipo'=>'poliza',
            'tipo_poliza'=>substr($tipo,0,1),
            'year'=>date("Y",strtotime($fecha)),
            'mes'=>date("m",strtotime($fecha)),
        );
        $clavePoliza=$modelClaves->getClave($data);

        $plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>'etapa'.$etapaOriginal.$etapa));
        $polizasAutomaticas=PolizasAutomaticas::model()->findAll("nombre_poliza=:nombre_poliza",array(':nombre_poliza'=>$plantilla->nombre_poliza));
        $success=true;

        //CARGOS
        foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
            if(!isset($polizaAutomatica->id_cuenta_cargo) || $polizaAutomatica->id_cuenta_cargo==0){
                continue;
            }
            //Se obtiene el monto
            $monto=0;
            switch ($polizaAutomatica->concepto) {
                case 'saldo_capital':
                    $monto=$saldos["capital"];
                    break;
                case 'saldo_comisiones_financiadas':
                    $monto=$saldos["comisiones_financiadas"];
                    break;
                case 'saldo_iva_comisiones_financiadas':
                    $monto=$saldos["iva_comisiones_financiadas"];
                    break;
                case 'saldo_interes':
                    $monto=$saldos["interes"];
                    break;
                case 'saldo_iva_interes':
                    $monto=$saldos["iva_interes"];
                    break;
                case 'saldo_comisiones':
                    $monto=$saldos["comisiones"];
                    break;
                case 'saldo_iva_comisiones':
                    $monto=$saldos["iva_comisiones"];
                    break;
                case 'saldo_moratorios':
                    $monto=$saldos["moratorios"];
                    break;
                case 'saldo_iva_moratorios':
                    $monto=$saldos["iva_moratorios"];
                    break;
                case 'saldo_total':
                    $monto=$saldos["capital"]+$saldos["interes"]+$saldos["iva_interes"]+$saldos["comisiones"]+$saldos["iva_comisiones"]+$saldos["moratorios"]+$saldos["iva_moratorios"];
                    break;
            }

            //Se obtiene la cuenta
            $cuenta=$polizaAutomatica->id_cuenta_cargo0;

            //Se desglosa la cuenta
            $params=array(
                'banco'=>$solicitud->id_banco,
                'moneda'=>$solicitud->id_moneda,
                'producto'=>$solicitud->id_producto,
                'producto_factoraje'=>null,
                'acreedor'=>null,
                'proveedor'=>null,
                'deudor'=>$solicitud->id_deudor,
                'cliente'=>$cliente->id,
                'empleado'=>null,
                'solicitud'=>$solicitud->id,
                'concepto'=>$polizaAutomatica->concepto
            );
            $desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
            if($desglose['success']){
                $cuentaCargo=CatalogoCuentas::model()->findByPk($desglose["id"]);
            }else{
                $success=false;
                $msg=$desglose["msg"];
            }

            //Se genera la poliza
            if($success && $monto>0){
                $poliza=new PolizasDiario();
                $poliza->tipo=$tipo;
                $poliza->operacion=$operacion;
                $poliza->relacionado=$this->id;
                if(get_class(Yii::app()) != "CConsoleApplication"){
                    $poliza->id_usuario=Yii::app()->user->getId();
                }else{
                    $poliza->id_usuario=0;
                }
                $poliza->fecha=$fecha;
                $poliza->poliza=$clavePoliza;
                $poliza->id_cuenta=$cuentaCargo->id;
                $poliza->cargo=$monto;
                $poliza->concepto=$concepto;
                $poliza->concepto_importe=$polizaAutomatica->concepto;
                $poliza->plantilla=$polizaAutomatica->nombre_poliza;
                $poliza->id_cliente=$this->id_cliente;
                $poliza->id_solicitud=$this->id;
                $success=$poliza->save();
                if(!$success){
                    break;
                }
            }
        }
        if($success){
            //ABONOS
            foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
                if(!isset($polizaAutomatica->id_cuenta_abono) || $polizaAutomatica->id_cuenta_abono==0){
                    continue;
                }
                //Se obtiene el monto
                $monto=0;
                switch ($polizaAutomatica->concepto) {
                    case 'saldo_capital':
                        $monto=$saldos["capital"];
                        break;
                    case 'saldo_comisiones_financiadas':
                        $monto=$saldos["comisiones_financiadas"];
                        break;
                    case 'saldo_iva_comisiones_financiadas':
                        $monto=$saldos["iva_comisiones_financiadas"];
                        break;
                    case 'saldo_interes':
                        $monto=$saldos["interes"];
                        break;
                    case 'saldo_iva_interes':
                        $monto=$saldos["iva_interes"];
                        break;
                    case 'saldo_comisiones':
                        $monto=$saldos["comisiones"];
                        break;
                    case 'saldo_iva_comisiones':
                        $monto=$saldos["iva_comisiones"];
                        break;
                    case 'saldo_moratorios':
                        $monto=$saldos["moratorios"];
                        break;
                    case 'saldo_iva_moratorios':
                        $monto=$saldos["iva_moratorios"];
                        break;
                    case 'saldo_total':
                        $monto=$saldos["capital"]+$saldos["interes"]+$saldos["iva_interes"]+$saldos["comisiones"]+$saldos["iva_comisiones"]+$saldos["moratorios"]+$saldos["iva_moratorios"];
                        break;
                }

                //Se obtiene la cuenta
                $cuenta=$polizaAutomatica->id_cuenta_abono0;

                //Se desglosa la cuenta
                $params=array(
                    'banco'=>$solicitud->id_banco,
                    'moneda'=>$solicitud->id_moneda,
                    'producto'=>$solicitud->id_producto,
                    'producto_factoraje'=>null,
                    'acreedor'=>null,
                    'proveedor'=>null,
                    'deudor'=>$solicitud->id_deudor,
                    'cliente'=>$cliente->id,
                    'empleado'=>null,
                    'solicitud'=>$solicitud->id,
                    'concepto'=>$polizaAutomatica->concepto
                );
                $desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
                if($desglose['success']){
                    $cuentaAbono=CatalogoCuentas::model()->findByPk($desglose["id"]);
                }else{
                    $success=false;
                    $msg=$desglose["msg"];
                }

                //Se genera la poliza
                if($success && $monto>0){
                    $poliza=new PolizasDiario();
                    $poliza->tipo=$tipo;
                    $poliza->operacion=$operacion;
                    $poliza->relacionado=$this->id;
                    if(get_class(Yii::app()) != "CConsoleApplication"){
                        $poliza->id_usuario=Yii::app()->user->getId();
                    }else{
                        $poliza->id_usuario=0;
                    }
                    $poliza->fecha=$fecha;
                    $poliza->poliza=$clavePoliza;
                    $poliza->id_cuenta=$cuentaAbono->id;
                    $poliza->abono=$monto;
                    $poliza->concepto=$concepto;
                    $poliza->concepto_importe=$polizaAutomatica->concepto;
                    $poliza->plantilla=$polizaAutomatica->nombre_poliza;
                    $poliza->id_cliente=$this->id_cliente;
                    $poliza->id_solicitud=$this->id;
                    $success=$poliza->save();
                    if(!$success){
                        break;
                    }
                }
            }
        }

        return $success;
    }

    public function createPolizaDiarioPausarCredito($tipoP=1,$fecha){
        $modelClaves=Claves::model()->find();
        $fecha=date("Y-m-d",strtotime($fecha));
        $tipo="Diario";
        $operacion=($tipoP==2)?"pausar_credito":"reanudar_credito";
        $concepto=($tipoP==2)?"Suspensión del Devengo de Intereses":"Reversión de Suspensión del Devengo de Intereses"." de la solicitud ".$this->clave;
        $solicitud=$this;
        $cliente=$this->id_cliente0;

        $data=array(
            'tipo'=>'poliza',
            'tipo_poliza'=>substr($tipo,0,1),
            'year'=>date("Y",strtotime($fecha)),
            'mes'=>date("m",strtotime($fecha)),
        );
        $clavePoliza=$modelClaves->getClave($data);
        $tipoPoliza=($tipoP==2)?"suspension_intereses":"reversion_suspension_intereses";
        $plantilla=PolizasAutomaticas::model()->find("poliza=:poliza",array(':poliza'=>$tipoPoliza));
        $polizasAutomaticas=PolizasAutomaticas::model()->findAll("nombre_poliza=:nombre_poliza",array(':nombre_poliza'=>$plantilla->nombre_poliza));
        $success=true;
        $devengado=$this->getInteresesDevengadosSuspension();

        //CARGOS
        foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
            if(!isset($polizaAutomatica->id_cuenta_cargo) || $polizaAutomatica->id_cuenta_cargo==0){
                continue;
            }
            //Se obtiene el monto
            $monto=0;
            switch ($polizaAutomatica->concepto) {
                case 'intereses_devengados':
                    $monto=$devengado["interes"];
                    break;
            }

            //Se obtiene la cuenta
            $cuenta=$polizaAutomatica->id_cuenta_cargo0;

            //Se desglosa la cuenta
            $params=array(
                'banco'=>$solicitud->id_banco,
                'moneda'=>$solicitud->id_moneda,
                'producto'=>$solicitud->id_producto,
                'producto_factoraje'=>null,
                'acreedor'=>null,
                'proveedor'=>null,
                'deudor'=>$solicitud->id_deudor,
                'cliente'=>$cliente->id,
                'empleado'=>null,
                'solicitud'=>$solicitud->id,
                'concepto'=>$polizaAutomatica->concepto
            );
            $desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
            if($desglose['success']){
                $cuentaCargo=CatalogoCuentas::model()->findByPk($desglose["id"]);
            }else{
                $success=false;
                $msg=$desglose["msg"];
            }

            //Se genera la poliza
            if($success && $monto>0){
                $poliza=new PolizasDiario();
                $poliza->tipo=$tipo;
                $poliza->operacion=$operacion;
                $poliza->relacionado=$this->id;
                if(get_class(Yii::app()) != "CConsoleApplication"){
                    $poliza->id_usuario=Yii::app()->user->getId();
                }else{
                    $poliza->id_usuario=0;
                }
                $poliza->fecha=$fecha;
                $poliza->poliza=$clavePoliza;
                $poliza->id_cuenta=$cuentaCargo->id;
                $poliza->cargo=$monto;
                $poliza->concepto=$concepto;
                $poliza->concepto_importe=$polizaAutomatica->concepto;
                $poliza->plantilla=$polizaAutomatica->nombre_poliza;
                $poliza->id_cliente=$this->id_cliente;
                $poliza->id_solicitud=$this->id;
                $success=$poliza->save();
                if(!$success){
                    break;
                }
            }
        }
        if($success){
            //ABONOS
            foreach ($polizasAutomaticas as $key => $polizaAutomatica) {
                if(!isset($polizaAutomatica->id_cuenta_abono) || $polizaAutomatica->id_cuenta_abono==0){
                    continue;
                }
                //Se obtiene el monto
                $monto=0;
                switch ($polizaAutomatica->concepto) {
                    case 'intereses_devengados':
                        $monto=$devengado["interes"];
                        break;
                }

                //Se obtiene la cuenta
                $cuenta=$polizaAutomatica->id_cuenta_abono0;

                //Se desglosa la cuenta
                $params=array(
                    'banco'=>$solicitud->id_banco,
                    'moneda'=>$solicitud->id_moneda,
                    'producto'=>$solicitud->id_producto,
                    'producto_factoraje'=>null,
                    'acreedor'=>null,
                    'proveedor'=>null,
                    'deudor'=>$solicitud->id_deudor,
                    'cliente'=>$cliente->id,
                    'empleado'=>null,
                    'solicitud'=>$solicitud->id,
                    'concepto'=>$polizaAutomatica->concepto
                );
                $desglose=CuentasAutomaticas::getCuentaDesglosada($cuenta,$params);
                if($desglose['success']){
                    $cuentaAbono=CatalogoCuentas::model()->findByPk($desglose["id"]);
                }else{
                    $success=false;
                    $msg=$desglose["msg"];
                }

                //Se genera la poliza
                if($success && $monto>0){
                    $poliza=new PolizasDiario();
                    $poliza->tipo=$tipo;
                    $poliza->operacion=$operacion;
                    $poliza->relacionado=$this->id;
                    if(get_class(Yii::app()) != "CConsoleApplication"){
                        $poliza->id_usuario=Yii::app()->user->getId();
                    }else{
                        $poliza->id_usuario=0;
                    }
                    $poliza->fecha=$fecha;
                    $poliza->poliza=$clavePoliza;
                    $poliza->id_cuenta=$cuentaAbono->id;
                    $poliza->abono=$monto;
                    $poliza->concepto=$concepto;
                    $poliza->concepto_importe=$polizaAutomatica->concepto;
                    $poliza->plantilla=$polizaAutomatica->nombre_poliza;
                    $poliza->id_cliente=$this->id_cliente;
                    $poliza->id_solicitud=$this->id;
                    $success=$poliza->save();
                    if(!$success){
                        break;
                    }
                }
            }
        }

        return $success;
    }

    public function getInteresesDevengadosSuspension(){
	    $etapaOriginal=$this->id_etapa_credito;
        $this->id_etapa_credito=3;
        $amortizaciones = Amortizaciones::model()->getAmortizaciones($this,array(),array(),array(),0,0,$fecha,0,array(),array(),array(),true);
        $devengado=array();
        foreach($amortizaciones as $amortizacion){
            if($amortizacion["status"]=="Calculado"){
                $devengado["interes"]+=$amortizacion["pago_interes"];
            }
        }
        $this->id_etapa_credito=$etapaOriginal;
        return $devengado;
    }

    public function getTipoGarantiaCub(){
	    $garantias=GarantiasSolicitudes::model()->findAll("id_solicitud=$this->id");
        $tipo="";
	    foreach($garantias as $garantia){
	        if($tipo==""){
                $tipo=$garantia->id_tipo_garantia_cub;
            }elseif($tipo!=$garantia->id_tipo_garantia_cub){
                $tipo="Multiple";
                break;
            }
        }
	    if($tipo!="Multiple" && $tipo!="" && !is_null($tipo)){
	        $tipoGarantia=TiposGarantiaCub::model()->findByPk($tipo);
	        $tipo=$tipoGarantia->tipo;
        }
	    return $tipo;
    }
    public function getSubTipoGarantiaCub(){
        $garantias=GarantiasSolicitudes::model()->findAll("id_solicitud=$this->id");
        $tipo="";
        foreach($garantias as $garantia){
            if($tipo==""){
                $tipo=$garantia->id_sub_tipo_garantia_cub;
            }elseif($tipo!=$garantia->id_sub_tipo_garantia_cub){
                $tipo="Multiple";
                break;
            }
        }
        if($tipo!="Multiple" && $tipo!="" && !is_null($tipo)){
            $tipoGarantia=SubTiposGarantiaCub::model()->findByPk($tipo);
            $tipo=$tipoGarantia->tipo;
        }
        return $tipo;
    }
    public function getMontoGarantiaCub(){
        $garantias=GarantiasSolicitudes::model()->findAll("id_solicitud=$this->id");
        $monto=0;
        foreach($garantias as $garantia){
            $monto+=$garantia->valor;
        }
        return $monto;
    }
    public function getSeveridadCub(){
        $garantias=GarantiasSolicitudes::model()->findAll("id_solicitud=$this->id");
        $severidad114=$this->getSeveridad114();
        $severidadTotal=0;
        foreach($garantias as $garantia){
            $severidad=0;
            $tipoGarantia=TiposGarantiaCub::model()->findByPk($garantia->id_tipo_garantia_cub);
            switch ($tipoGarantia->tipo){
                case 'No real':
                    $severidad=$severidad114;
                    break;
                case 'Financiera':
                    if($garantia->valor>=$this->entregable){
                        $severidad=0;
                    }else{
                        $severidad=$severidad114*(($this->entregable-$garantia->valor)/$this->entregable);
                    }
                    break;
                case 'No Financiera':
                    $subTipoGarantia=SubTiposGarantiaCub::model()->findByPk($garantia->id_sub_tipo_garantia_cub);
                    $cobertura=$garantia->valor/$this->entregable;
                    switch($subTipoGarantia->tipo){
                        case 'Inmueble':
                            if($cobertura<0.30){
                                $severidad=0.45;
                            }elseif($cobertura>=1.40){
                                $severidad=0.35;
                            }else{
                                $sp1=($cobertura/1.4)*$this->entregable;
                                $sp2=$this->entregable-$sp1;
                                $severidad=($sp1/$this->entregable*0.35)+($sp2/$this->entregable*0.45);
                            }
                            break;
                        case 'Maquinaria':
                            if($cobertura<0.30){
                                $severidad=0.45;
                            }elseif($cobertura>=1.40){
                                $severidad=0.40;
                            }else{
                                $sp1=($cobertura/1.4)*$this->entregable;
                                $sp2=$this->entregable-$sp1;
                                $severidad=($sp1/$this->entregable*0.40)+($sp2/$this->entregable*0.45);
                            }
                            break;
                        case 'Derechos de Cobro':
                            if($cobertura>1.25){
                                $severidad=0.35;
                            }else{
                                $sp1=($cobertura/1.25)*$this->entregable;
                                $sp2=$this->entregable-$sp1;
                                $severidad=($sp1/$this->entregable*0.35)+($sp2/$this->entregable*0.45);
                            }
                            break;
                    }
                    break;
            }
            if($this->id_status_garantia==2){
                $productoE = EntidadesProductos::model()->findByPk($this->id_producto_garante);
                if($productoE->porcentaje_garantizado>0){
                    $severidad = $severidad * (1 - $productoE->porcentaje_garantizado);
                }
            }
            $severidadTotal+=$severidad;
            $garantia->severidad_cub=$severidad;
            $garantia->save();
        }
        return $severidadTotal;
    }

	public static function obtenerFechasReportesSIC($m = null, $a = null, $sic = "buro") {
		$empresa = Empresa::model()->find();
        $a = $a ?? date("Y");
        $m = $m ?? date("n");

		$fechaCorteSIC = null;

		if ($sic == "buro") {
			$fechaCorteSIC = $empresa->fecha_corte_buro;
		} else if ($sic == "circulo") {
			$fechaCorteSIC = $empresa->fecha_corte_circulo;
		}
        $fechaCorte = "{$a}-" . str_pad($m, 2, "0", STR_PAD_LEFT) . date("-d", strtotime($empresa->fecha_corte_buro));

        $dia = date("d", strtotime($fechaCorte));
        $diaCorte = date("d", strtotime($fechaCorteSIC));

        if ($dia < $diaCorte) {
            $fechaCorte = date("Y-m-d",
                strtotime("+1 MONTH -1 DAY",
                    strtotime(date("Y-") . str_pad($m, 2, "0", STR_PAD_LEFT) . "-01")
                )
            );
            $dia = date("d", strtotime($fechaCorte));
        }

        $a = date("Y", strtotime($fechaCorte));

        // Inicio del periodo (Mensual)
        $stringSubtractMonth = '-1 month';
        if (
            $dia == 31
            || ($dia == 28 && date("d", strtotime($fechaCorteSIC)) >= 30)
            || ($dia == 30 && $m == 3 && date("d", strtotime($fechaCorteSIC)) == 30)
        ) {
            $stringSubtractMonth = 'last day of previous month';
        }

        // Se le resta un dia para que todos los creditos tengan operaciones hasta maximo un dia antes
        $inicioDelPeriodoDelReporte = date('Y-m-d', strtotime($stringSubtractMonth, strtotime($fechaCorte)));

        return [
            'inicioDelPeriodoDelReporte' => $inicioDelPeriodoDelReporte,
            'fechaCorte' => $fechaCorte
        ];
    }

	public static function validarInformacionReportesSIC($entidad = "BDC", $tipoPersona = null) {
		$empresa = Empresa::model()->findByPk(1);

		// Fecha corte
		if ($empresa->fecha_corte_buro == "" || $empresa->fecha_corte_buro == "0000-00-00") {
			return false;
		}

		// Tipo de institucion
		if ($empresa->tipo_empresa_buro == "") {
			return false;
		}

		// PM y PF
		// Nombre usuario y Clave otorgante
		// if ($tipoPersona !== null && $tipoPersona == "PF") {
		// 	if ($empresa->nombre_usuario_buropf == "" || $empresa->clave_buropf) {
		// 		return false;
		// 	}
		// } else if ($tipoPersona !== null && $tipoPersona == "PM") {
		// 	if ($empresa->nombre_usuario_buro == "" || $empresa->clave_buro) {
		// 		return false;
		// 	}
		// }

		return true;
	}

    public function getSeveridad114(){
        $severidad=0;
        if($this->id_etapa_credito==3){
            $etapa3=EtapasCreditos::model()->find("etapa='Etapa 3'");
            $mesesAtraso=($this->dias_atraso-$etapa3->dias)/30;
            $puntaje=Puntajes114::model()->find("meses2 IS NULL");
            if($mesesAtraso<$puntaje->meses1){
                $puntaje=Puntajes114::model()->find("$mesesAtraso>meses1 AND $mesesAtraso<=meses2");
            }
        }else{
            $puntaje=Puntajes114::model()->find("meses1 IS NULL");
        }
        switch($this->id_cliente0->id_segmentacion_cub0->nombre){
            case 'Menores a 14 MDU (Comercial Pyme)':
                $severidad=$puntaje->categoria1;
                break;
            case 'Entre 14 y 54 MDU (Comercial Corporativo)':
                $severidad=$puntaje->categoria2;
                break;
            case 'Mayores a 54 MDU (Gran Corporativo)':
                $severidad=$puntaje->categoria3;
                break;
        }
        return $severidad;
    }

    public function updateAmounts(){
	    if(isset($this->id)){
            $vencimientos = Amortizaciones::model()->findAll("id_solicitud=$this->id");
            if(!empty($vencimientos)){
                $amortizaciones = Amortizaciones::model()->getAmortizaciones($this,array(),array(),array(),0,0,null,0,array(),array(),array(),true);
                foreach ($vencimientos as $vencimiento){
                    if($vencimiento->status=="Calculado"){
                        foreach ($amortizaciones as $amortizacion){
                            if($vencimiento->id==$amortizacion["id"]){
                                $vencimiento->saldo_capital = $amortizacion["saldo_capital"];
                                $vencimiento->saldo_inicial = $amortizacion["saldo_inicial"];
                                $vencimiento->interes_generado = $amortizacion["interes_generado"];
                                $vencimiento->descuento_interes_generado = $amortizacion["descuento_interes_generado"];
                                $vencimiento->descuento_moratorios = $amortizacion["descuento_moratorios"];
                                $vencimiento->interes_real_generado = $amortizacion["interes_real_generado"];
                                $vencimiento->iva_capital = $amortizacion["iva_capital"];
                                $vencimiento->iva_interes_generado = $amortizacion["iva_interes_generado"];
                                $vencimiento->iva_comisiones = $amortizacion["pago_comisiones_iva"];
                                $vencimiento->iva_moratorios = $amortizacion["iva_moratorios"];
                                $vencimiento->pago_capital = $amortizacion["pago_capital"];
                                $vencimiento->pago_interes = $amortizacion["pago_interes"];
                                $vencimiento->pago_comisiones = $amortizacion["pago_comisiones"];
                                //Arrendamiento
                                $vencimiento->pago_gastos_iniciales = $amortizacion["pago_gastos_iniciales"];
                                $vencimiento->pago_comisiones_iniciales = $amortizacion["pago_comisiones_iniciales"];
                                $vencimiento->pago_garantia_extendida = $amortizacion["pago_garantia_extendida"];
                                $vencimiento->pago_seguro = $amortizacion["pago_seguro"];
                                if ($vencimiento->numero_amortizacion >= 1) {
                                    $vencimiento->capital_seguro = $amortizacion["pago_seguro"] - $amortizacion["iva_seguro"] - $amortizacion["interes_generado_financiados"] * (($solicitud->seguro / 1.16) / $amortizacion["total_financiado"]);
                                    $vencimiento->interes_seguro = $amortizacion["interes_generado_financiados"] * ($solicitud->seguro / 1.16) / $amortizacion["total_financiado"];
                                    $vencimiento->iva_interes_seguro = $model->interes_seguro * .16;
                                    $vencimiento->capital_otros_gastos = $amortizacion["pago_otros_gastos"] - $amortizacion["iva_otros_gastos"] - $amortizacion["interes_generado_financiados"] * (($solicitud->otros_gastos / 1.16) / $amortizacion["total_financiado"]);
                                    $vencimiento->interes_otros_gastos = $amortizacion["interes_generado_financiados"] * ($solicitud->otros_gastos / 1) / $amortizacion["total_financiado"];
                                    $vencimiento->iva_interes_otros_gastos = $model->interes_otros_gastos * .16;
                                }
                                $vencimiento->pago_accesorios = $amortizacion["pago_accesorios"];
                                $vencimiento->pago_tenencia = $amortizacion["pago_tenencia"];
                                $vencimiento->pago_otros_gastos = $amortizacion["pago_otros_gastos"];
                                //----------------------
                                $vencimiento->iva_gastos_iniciales = $amortizacion["iva_gastos_iniciales"];
                                $vencimiento->iva_comisiones_iniciales = $amortizacion["iva_comisiones_iniciales"];
                                $vencimiento->iva_garantia_extendida = $amortizacion["iva_garantia_extendida"];
                                $vencimiento->iva_seguro = $amortizacion["iva_seguro"];
                                $vencimiento->iva_accesorios = $amortizacion["iva_accesorios"];
                                $vencimiento->iva_tenencia = $amortizacion["iva_tenencia"];
                                $vencimiento->iva_otros_gastos = $amortizacion["iva_otros_gastos"];
                                //End Arrendamiento
                                $vencimiento->pago_moratorios = $amortizacion["pago_moratorios"];
                                $vencimiento->pago_realizado = $amortizacion["pago_realizado"];
                                $vencimiento->pago_restante = $amortizacion["pago_restante"];
                                $vencimiento->pago_total = $amortizacion["pago_total"];
                                $vencimiento->saldo_final = $amortizacion["saldo_final"];
                                $vencimiento->save(false);
                            }
                        }
                    }
                }
            }
        }
    }

	public function procesarCreateSolicitud($json) {
		// 1. Preparar datos iniciales y modelos necesarios
		$model_etapa = new ProcesosCreditos();
		$metodoClaves = Claves::model()->find();
		if(Yii::app()->session['wizard'] == 35)
			Yii::app()->session['wizard'] = 36;
		
		$empresa = Empresa::model()->find();
		$model = new Solicitudes();
		
		// 2. Procesar y asignar atributos generales a la solicitud
		$model->etapa = '1';
		$model->attributes = $json;
		
		// Convertir números formateados con comas a float
		$model->monto_solicitado = floatval(str_replace(",", "", $model->monto_solicitado));
		$model->ingreso_cliente = floatval(str_replace(",", "", $model->ingreso_cliente));
		
		// Eliminar comas de varios campos
		$model->valor_equipo       = str_replace(",", "", $model->valor_equipo);
		$model->iva_equipo         = str_replace(",", "", $model->iva_equipo);
		$model->valor_sin_iva      = str_replace(",", "", $model->valor_sin_iva);
		$model->deposito_monto     = str_replace(",", "", $model->deposito_monto);
		$model->deposito_adicional = str_replace(",", "", $model->deposito_adicional);
		$model->anticipo_rentas    = str_replace(",", "", $model->anticipo_rentas);
		$model->ratificacion       = str_replace(",", "", $model->ratificacion);
		$model->ratificacion_total = str_replace(",", "", $model->ratificacion_total);
		$model->enganche           = str_replace(",", "", $model->enganche);
		$model->gastos_iniciales   = str_replace(",", "", $model->gastos_iniciales);
		$model->comisiones_iniciales = str_replace(",", "", $model->comisiones_iniciales);
		$model->garantia_extendida = str_replace(",", "", $model->garantia_extendida);
		$model->seguro             = str_replace(",", "", $model->seguro);
		$model->accesorios         = str_replace(",", "", $model->accesorios);
		$model->tenencia           = str_replace(",", "", $model->tenencia);
		$model->otros_gastos       = str_replace(",", "", $model->otros_gastos);
		
		$model->nombre_empresa = $empresa->nombre_comercial;
		$model->id_empresa = $empresa->id;
		
		$modelProducto = Productos::model()->findByPk($model->id_producto);
		if ($modelProducto->id_tipo_producto == 11 || $modelProducto->id_tipo_producto == 12) {
			$model->importado = 1;
		}

		// Validar valor mínimo para monto_solicitado y valor_equipo
		if (isset($modelProducto->monto_minimo) && $modelProducto->monto_minimo > 0) {
			// Validar monto_solicitado

			if ($modelProducto->id_tipo_producto == 8 || $modelProducto->id_tipo_producto == 9) {
				// Si es arrendamiento puro o crédito automotriz, validar valor_equipo
				if (floatval($model->valor_equipo) < $modelProducto->monto_minimo) {
					header('content-type: application/json');
					http_response_code(400);
					die(json_encode([
						'error' => 'El valor del equipo no puede ser menor al valor mínimo establecido',
						'monto_minimo' => $modelProducto->monto_minimo
					]));
				}
			} else if (floatval($model->monto_solicitado) < $modelProducto->monto_minimo) {
				header('content-type: application/json');
				http_response_code(400);
				die(json_encode([
					'error' => 'El monto solicitado no puede ser menor al valor mínimo establecido',
					'monto_minimo' => $modelProducto->monto_minimo
				]));
			}
			
		}


		if ($modelProducto->activar_opciones == 1 && !empty($modelProducto->config_opciones)) {
			$opcionesPredefinidas = json_decode($modelProducto->config_opciones, true);
			if (!$opcionesPredefinidas) {
				throw new CException("Error al decodificar las opciones predefinidas del producto");
			}
			
			// Agrupar opciones por variable
			$opcionesPorVariable = [];
			foreach ($opcionesPredefinidas as $opcion) {
				$variable = $opcion['variable'];
				$valor = $opcion['valor'];
				if (!isset($opcionesPorVariable[$variable])) {
					$opcionesPorVariable[$variable] = [];
				}
				$opcionesPorVariable[$variable][] = $valor;
			}
			
			// Validar monto solicitado
			if (isset($opcionesPorVariable['monto']) && !empty($opcionesPorVariable['monto'])) {
				// Decidir qué campo validar y establecer el mensaje de error adecuado
				if ($modelProducto->id_tipo_producto == 8 || $modelProducto->id_tipo_producto == 9) {
					// Si es arrendamiento puro o crédito automotriz, siempre usar valor_equipo
					$montoAValidar = floatval(str_replace(",", "", isset($json["valor_equipo"]) ? $json["valor_equipo"] : 0));
					$campoError = "valor_equipo";
				} else if (!isset($json["monto_solicitado"]) || empty($json["monto_solicitado"])) {
					// Si no está definido monto_solicitado para otros tipos de producto, usar valor_equipo
					$montoAValidar = floatval(str_replace(",", "", isset($json["valor_equipo"]) ? $json["valor_equipo"] : 0));
					$campoError = "valor_equipo";
				} else {
					// Para otros productos con monto_solicitado definido, usarlo
					$montoAValidar = floatval(str_replace(",", "", $json["monto_solicitado"]));
					$campoError = "monto_solicitado";
				}
				
				// Comprobar si el valor está en la lista de valores permitidos
				if (!in_array((string)$montoAValidar, $opcionesPorVariable['monto'])) {
					header('content-type: application/json');
					http_response_code(400);
					die(json_encode([
						'error' => 'El '.$campoError.' no está permitido',
						'valores_permitidos_monto' => $opcionesPorVariable['monto']
					]));
				}
			}
			
			// Validar plazo solicitado
			if (isset($opcionesPorVariable['plazo']) && !empty($opcionesPorVariable['plazo'])) {
				$plazoSolicitado = $json["plazo_solicitado"];
				if (!in_array((string)$plazoSolicitado, $opcionesPorVariable['plazo'])) {
					header('content-type: application/json');
					http_response_code(400);
					die(json_encode([
						'error' => 'Plazo solicitado no permitido',
						'valores_permitidos_plazo' => $opcionesPorVariable['plazo']
					]));
				}
			}
			
			// Validar otros campos como interés y mora si es necesario
			if (isset($opcionesPorVariable['interes']) && !empty($opcionesPorVariable['interes']) && isset($json["sobretasa"])) {
				$interes = floatval($json["sobretasa"]);
				if (!in_array((string)$interes, $opcionesPorVariable['interes'])) {
					header('content-type: application/json');
					http_response_code(400);
					die(json_encode([
						'error' => 'Tasa de interés no permitida',
						'valores_permitidos_interes' => $opcionesPorVariable['interes']
					]));
				}
			}

			if (isset($opcionesPorVariable['mora']) && !empty($opcionesPorVariable['mora']) && isset($json["tasa_moratoria"])) {
				$mora = floatval($json["tasa_moratoria"]);
				if (!in_array((string)$mora, $opcionesPorVariable['mora'])) {
					header('content-type: application/json');
					http_response_code(400);
					die(json_encode([
						'error' => 'Tasa moratoria no permitida',
						'valores_permitidos_mora' => $opcionesPorVariable['mora']
					]));
				}
			}

		}
		$fecha_solicitud=date('Y-m-d');
		$metodoClaves=Claves::model()->find();
		$empresa=Empresa::model()->find();
		$sucursal = Sucursales::model()->find();
		$data=array(
			'tipo'=>'solicitud',
			'sucursal'=>(isset($sucursal->prefijo)?$sucursal->prefijo:''),
			'producto'=>(isset($modelProducto->prefijo)?$modelProducto->prefijo:''),
			'mes'=>(isset($fecha_solicitud)?date("m",strtotime($fecha_solicitud)):''),
			'year'=>(isset($fecha_solicitud)?date("Y",strtotime($fecha_solicitud)):''),
		);
		$clave=$metodoClaves->getClave($data);
		$model->clave = $clave;                                
		// 3. Validar y procesar datos relacionados al producto (si la clave no está vacía)
		if(isset($model->clave) && $model->clave != "") {
			$model->clave_producto      = $modelProducto->clave;
			$model->nombre_producto     = $modelProducto->nombre;
			$model->tabla_disposiciones = $modelProducto->tabla_disposiciones;
			$model->id_tasa_referencia  = $json["id_tasa_referencia"];
			$modelTasaReferencia = TasasReferencia::model()->findByPk($model->id_tasa_referencia);
			$model->nombre_tasa_referencia = $modelTasaReferencia->nombre;
			$model->serie_tasa_referencia  = $modelTasaReferencia->serie;
			
			$model->id_tipo_amortizacion = $modelProducto->id_tipo_amortizacion;
			$modelTipoAmortizacion = TiposAmortizacion::model()->findByPk($model->id_tipo_amortizacion);
			$model->nombre_tipo_amortizacion = $modelTipoAmortizacion->nombre;
			
			$model->id_tipo_pago = $modelProducto->id_tipo_pago;
			$modelTipoPago = TiposPagos::model()->findByPk($model->id_tipo_pago);
			$model->nombre_tipo_pago = $modelTipoPago->nombre;
			
			// Procesar sobretasa y otros campos numéricos
			$model->sobretasa = is_null($json["sobretasa"]) ? $modelProducto->sobretasa : $json["sobretasa"] / 100;
			$model->porcentaje_capital = $model->porcentaje_capital / 100;
			$model->porcentaje_interes = $model->porcentaje_interes / 100;
			$model->descuento_interes = is_null($json["descuento_interes"]) ? $modelProducto->descuento_interes : $json["descuento_interes"];
			$model->tasa_moratoria = is_null($json["tasa_moratoria"]) ? $modelProducto->tasa_moratoria : $json["tasa_moratoria"] / 100;
			$model->id_impuesto = is_null($json["id_impuesto"]) ? $modelProducto->id_impuesto : $json["id_impuesto"];
			$modelImpuesto = Impuestos::model()->findByPk($model->id_impuesto);
			$model->nombre_impuesto = $modelImpuesto->nombre;
			$model->porcentaje_impuesto = $modelImpuesto->porcentaje;
			
			$model->id_impuesto_moratorios = is_null($json["id_impuesto_moratorios"]) ? $modelProducto->id_impuesto_moratorios : $json["id_impuesto_moratorios"];
			$modelImpuestoMoratorios = Impuestos::model()->findByPk($model->id_impuesto_moratorios);
			$model->nombre_impuesto_moratorios = $modelImpuestoMoratorios->nombre;
			$model->porcentaje_impuesto_moratorios = $modelImpuestoMoratorios->porcentaje;
			
			$model->id_parametrico = $modelProducto->id_parametrico;
			$modelGarantia = TiposGarantia::model()->findByPk($modelProducto->id_tipo_garantia);
			$model->tipo_garantia = $modelGarantia->nombre;
			
			$modelCliente = Clientes::model()->findByPk($model->id_cliente);
			$model->clave_cliente = $modelCliente->clave;
			$model->nombre_cliente = $modelCliente->fullName;
			$model->id_sucursal = $modelCliente->id_sucursal;
			
			$tokenData = (new Tokens())->decodeToken();
			$modelUsuario = Usuarios::model()->findByPk($tokenData->data->number);
			$model->id_usuario = $modelUsuario->id;
			$model->usuario = $modelUsuario->usuario;
			$model->nombre_usuario = $modelUsuario->fullName;
			$model->status_calculado = "Registrada";
			
			// 4. Ajustar campos para arrendamiento y crédito automotriz
			// Convertir porcentajes y valores residuales
			$model->valor_residual_porcentaje = $model->valor_residual_porcentaje / 100;
			$model->comision_apertura_porcentaje = $model->comision_apertura_porcentaje / 100;
			$model->udi = $model->udi / 100;
			$model->valor_mercado = $model->valor_mercado / 100;
			$model->enganche = $model->enganche / 100;
			
			if ($modelProducto->id_tipo_producto == 8) { // Arrendamiento Puro
				$montoEnganche = $model->enganche * $model->valor_equipo;
				$model->monto_solicitado = $model->valor_equipo - $model->iva_equipo - $montoEnganche - $model->anticipo_rentas;
				$model->entregable = $model->monto_solicitado;
				
				if ($model->financiamiento_gastos_iniciales == "Financiado" && $model->anual_gastos_iniciales == 0)
					$model->monto_solicitado += $model->gastos_iniciales;
				if ($model->financiamiento_garantia_extendida == "Financiado" && $model->anual_garantia_extendida == 0)
					$model->monto_solicitado += $model->garantia_extendida;
				if ($model->financiamiento_seguro == "Financiado" && $model->anual_seguro == 0)
					$model->monto_solicitado += $model->seguro;
				if ($model->financiamiento_accesorios == "Financiado" && $model->anual_accesorios == 0)
					$model->monto_autorizado += $model->accesorios;
				if ($model->financiamiento_tenencia == "Financiado" && $model->anual_tenencia == 0)
					$model->monto_solicitado += $model->tenencia;
				if ($model->financiamiento_otros_gastos == "Financiado" && $model->anual_otros_gastos == 0)
					$model->monto_solicitado += $model->otros_gastos;
				
				$model->valor_residual_monto = $model->valor_residual_porcentaje * ($model->valor_equipo - $model->iva_equipo);
				$aux = clone $model;
				$aux->plazo_autorizado = $aux->plazo_solicitado;
				$aux->monto_autorizado = $aux->monto_solicitado;
				$amortizaciones = Amortizaciones::model()->generarAmortizaciones($aux, array(), array(), array());
				unset($aux);
				$model->deposito_monto = $model->deposito_adicional;
				if ($model->deposito_con_iva == 1) {
					for ($nRenta = 1; $nRenta <= $model->deposito_meses; $nRenta++) {
						$model->deposito_monto += $amortizaciones[$nRenta]['pago_capital'] +
							$amortizaciones[$nRenta]['iva_capital'] +
							$amortizaciones[$nRenta]['pago_interes'] +
							$amortizaciones[$nRenta]['pago_seguro'] +
							$amortizaciones[$nRenta]['pago_otros_gastos'];
					}
				} else {
					for ($nRenta = 1; $nRenta <= $model->deposito_meses; $nRenta++) {
						$model->deposito_monto += $amortizaciones[$nRenta]['pago_capital'] +
							$amortizaciones[$nRenta]['pago_interes'] -
							$amortizaciones[$nRenta]['iva_interes_generado'] +
							$amortizaciones[$nRenta]['pago_seguro'] -
							$amortizaciones[$nRenta]['iva_seguro'] +
							$amortizaciones[$nRenta]['pago_otros_gastos'] -
							$amortizaciones[$nRenta]['iva_otros_gastos'];
					}
				}
			} elseif ($modelProducto->id_tipo_producto == 9) { // Crédito Automotriz
				$montoEnganche = $model->enganche * 100;
				$model->enganche = $model->enganche * 100;
				$model->monto_solicitado = $model->valor_equipo - $model->iva_equipo - $montoEnganche - $model->anticipo_rentas;
				$model->entregable = $model->monto_solicitado;
				if ($model->financiamiento_gastos_iniciales == "Financiado")
					$model->monto_solicitado += $model->gastos_iniciales;
				if ($model->financiamiento_garantia_extendida == "Financiado")
					$model->monto_solicitado += $model->garantia_extendida;
				if ($model->financiamiento_seguro == "Financiado")
					$model->monto_solicitado += $model->seguro;
				if ($model->financiamiento_tenencia == "Financiado")
					$model->monto_solicitado += $model->tenencia;
				if ($model->financiamiento_otros_gastos == "Financiado")
					$model->monto_solicitado += $model->otros_gastos;
			}
			
			// 5. Asignar etapa, supervisor y otros datos de la solicitud
			$model->etapa = '1';
			$model->id_supervisor = $json['id_supervisor'];
			
			// Guardar la solicitud
			if(!$model->save()){
				// Si falla, lanzar excepción con los errores
				throw new CException(json_encode($model->getErrors()));
			}
		} else {
			// La clave está vacía: lanzar excepción
			throw new CException("La clave esta vacia");
		}
		
		// Enviar notificaciones, si es necesario (ejecutivo)
		$dataToken = (new Tokens())->getTokenUserData();
		if ($dataToken->perfil == Perfiles::EJECUTIVO) {
			$ejecutivoModel = Ejecutivos::model()->findByAttributes(['id_usuario' => $dataToken->id]);
			$idSupervisor = $ejecutivoModel->id_ejecutivo_supervisor;
			$supervisorModel = Supervisores::model()->findByAttributes(['id' => $idSupervisor]);
			$devicesModel = App2Devices::model()->findAllByAttributes(['id_usuario' => $supervisorModel->id_usuario, 'version' => 1]);
			$devices = [];
			foreach ($devicesModel as $valor) {
				// Validar que el token no esté vacío
				if (!empty($valor->device_token)) {
					$devices[] = $valor->device_token;
				}
			}
			$devices = array_values(array_unique($devices)); // Valores únicos
			$title = "Nueva solicitud registrada 🗒️";
			$body = "El promotor: {$dataToken->nombre} {$dataToken->apellido_paterno} ha completado el registro de una solicitud con clave: {$model->clave}";
			$payload = ['id_solicitud' => 1];
			(new NotificacionesApp1())->sendNotificationOneSignal($title, $body, NotificacionesApp1::SOLICITUDES, $devices, $payload);
		}
		
		// Actualizar datos adicionales usando el método del modelo (si existen)
		if (!empty($json['datos_adicionales'])) {
			SolicitudesDatos::actualizarDatosAdicionales($model->id, $json['datos_adicionales']);
		}

		return $model;
	}

}
